/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.account.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QuotationAccountSupport implements org.apache.thrift.TBase<QuotationAccountSupport, QuotationAccountSupport._Fields>, java.io.Serializable, Cloneable, Comparable<QuotationAccountSupport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuotationAccountSupport");

  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUPPORT_COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("supportCommodityIds", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuotationAccountSupportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuotationAccountSupportTupleSchemeFactory());
  }

  public long accountId; // optional
  public Set<Integer> supportCommodityIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_ID((short)1, "accountId"),
    SUPPORT_COMMODITY_IDS((short)2, "supportCommodityIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 2: // SUPPORT_COMMODITY_IDS
          return SUPPORT_COMMODITY_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCOUNTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ACCOUNT_ID,_Fields.SUPPORT_COMMODITY_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUPPORT_COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("supportCommodityIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuotationAccountSupport.class, metaDataMap);
  }

  public QuotationAccountSupport() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuotationAccountSupport(QuotationAccountSupport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.accountId = other.accountId;
    if (other.isSetSupportCommodityIds()) {
      Set<Integer> __this__supportCommodityIds = new HashSet<Integer>(other.supportCommodityIds);
      this.supportCommodityIds = __this__supportCommodityIds;
    }
  }

  public QuotationAccountSupport deepCopy() {
    return new QuotationAccountSupport(this);
  }

  @Override
  public void clear() {
    setAccountIdIsSet(false);
    this.accountId = 0;
    this.supportCommodityIds = null;
  }

  public long getAccountId() {
    return this.accountId;
  }

  public QuotationAccountSupport setAccountId(long accountId) {
    this.accountId = accountId;
    setAccountIdIsSet(true);
    return this;
  }

  public void unsetAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  public void setAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
  }

  public int getSupportCommodityIdsSize() {
    return (this.supportCommodityIds == null) ? 0 : this.supportCommodityIds.size();
  }

  public java.util.Iterator<Integer> getSupportCommodityIdsIterator() {
    return (this.supportCommodityIds == null) ? null : this.supportCommodityIds.iterator();
  }

  public void addToSupportCommodityIds(int elem) {
    if (this.supportCommodityIds == null) {
      this.supportCommodityIds = new HashSet<Integer>();
    }
    this.supportCommodityIds.add(elem);
  }

  public Set<Integer> getSupportCommodityIds() {
    return this.supportCommodityIds;
  }

  public QuotationAccountSupport setSupportCommodityIds(Set<Integer> supportCommodityIds) {
    this.supportCommodityIds = supportCommodityIds;
    return this;
  }

  public void unsetSupportCommodityIds() {
    this.supportCommodityIds = null;
  }

  /** Returns true if field supportCommodityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportCommodityIds() {
    return this.supportCommodityIds != null;
  }

  public void setSupportCommodityIdsIsSet(boolean value) {
    if (!value) {
      this.supportCommodityIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((Long)value);
      }
      break;

    case SUPPORT_COMMODITY_IDS:
      if (value == null) {
        unsetSupportCommodityIds();
      } else {
        setSupportCommodityIds((Set<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_ID:
      return Long.valueOf(getAccountId());

    case SUPPORT_COMMODITY_IDS:
      return getSupportCommodityIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_ID:
      return isSetAccountId();
    case SUPPORT_COMMODITY_IDS:
      return isSetSupportCommodityIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuotationAccountSupport)
      return this.equals((QuotationAccountSupport)that);
    return false;
  }

  public boolean equals(QuotationAccountSupport that) {
    if (that == null)
      return false;

    boolean this_present_accountId = true && this.isSetAccountId();
    boolean that_present_accountId = true && that.isSetAccountId();
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (this.accountId != that.accountId)
        return false;
    }

    boolean this_present_supportCommodityIds = true && this.isSetSupportCommodityIds();
    boolean that_present_supportCommodityIds = true && that.isSetSupportCommodityIds();
    if (this_present_supportCommodityIds || that_present_supportCommodityIds) {
      if (!(this_present_supportCommodityIds && that_present_supportCommodityIds))
        return false;
      if (!this.supportCommodityIds.equals(that.supportCommodityIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QuotationAccountSupport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportCommodityIds()).compareTo(other.isSetSupportCommodityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportCommodityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportCommodityIds, other.supportCommodityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuotationAccountSupport(");
    boolean first = true;

    if (isSetAccountId()) {
      sb.append("accountId:");
      sb.append(this.accountId);
      first = false;
    }
    if (isSetSupportCommodityIds()) {
      if (!first) sb.append(", ");
      sb.append("supportCommodityIds:");
      if (this.supportCommodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.supportCommodityIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuotationAccountSupportStandardSchemeFactory implements SchemeFactory {
    public QuotationAccountSupportStandardScheme getScheme() {
      return new QuotationAccountSupportStandardScheme();
    }
  }

  private static class QuotationAccountSupportStandardScheme extends StandardScheme<QuotationAccountSupport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuotationAccountSupport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountId = iprot.readI64();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUPPORT_COMMODITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set48 = iprot.readSetBegin();
                struct.supportCommodityIds = new HashSet<Integer>(2*_set48.size);
                for (int _i49 = 0; _i49 < _set48.size; ++_i49)
                {
                  int _elem50;
                  _elem50 = iprot.readI32();
                  struct.supportCommodityIds.add(_elem50);
                }
                iprot.readSetEnd();
              }
              struct.setSupportCommodityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuotationAccountSupport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAccountId()) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.accountId);
        oprot.writeFieldEnd();
      }
      if (struct.supportCommodityIds != null) {
        if (struct.isSetSupportCommodityIds()) {
          oprot.writeFieldBegin(SUPPORT_COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.supportCommodityIds.size()));
            for (int _iter51 : struct.supportCommodityIds)
            {
              oprot.writeI32(_iter51);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuotationAccountSupportTupleSchemeFactory implements SchemeFactory {
    public QuotationAccountSupportTupleScheme getScheme() {
      return new QuotationAccountSupportTupleScheme();
    }
  }

  private static class QuotationAccountSupportTupleScheme extends TupleScheme<QuotationAccountSupport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuotationAccountSupport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetSupportCommodityIds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAccountId()) {
        oprot.writeI64(struct.accountId);
      }
      if (struct.isSetSupportCommodityIds()) {
        {
          oprot.writeI32(struct.supportCommodityIds.size());
          for (int _iter52 : struct.supportCommodityIds)
          {
            oprot.writeI32(_iter52);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuotationAccountSupport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.accountId = iprot.readI64();
        struct.setAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set53 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.supportCommodityIds = new HashSet<Integer>(2*_set53.size);
          for (int _i54 = 0; _i54 < _set53.size; ++_i54)
          {
            int _elem55;
            _elem55 = iprot.readI32();
            struct.supportCommodityIds.add(_elem55);
          }
        }
        struct.setSupportCommodityIdsIsSet(true);
      }
    }
  }

}

