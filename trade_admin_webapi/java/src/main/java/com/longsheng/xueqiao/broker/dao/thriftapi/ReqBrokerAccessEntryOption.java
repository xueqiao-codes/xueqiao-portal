/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.broker.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqBrokerAccessEntryOption implements org.apache.thrift.TBase<ReqBrokerAccessEntryOption, ReqBrokerAccessEntryOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqBrokerAccessEntryOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqBrokerAccessEntryOption");

  private static final org.apache.thrift.protocol.TField BROKER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACCESS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("accessStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ENTRY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("entryIds", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField WORKING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("workingStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ACCESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accessName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqBrokerAccessEntryOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqBrokerAccessEntryOptionTupleSchemeFactory());
  }

  public List<Integer> brokerIds; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform
   */
  public com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform platform; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus
   */
  public com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus accessStatus; // optional
  public List<Integer> entryIds; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus
   */
  public com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus workingStatus; // optional
  public String accessName; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv
   */
  public com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv env; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_IDS((short)1, "brokerIds"),
    /**
     * 
     * @see com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform
     */
    PLATFORM((short)2, "platform"),
    /**
     * 
     * @see com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus
     */
    ACCESS_STATUS((short)3, "accessStatus"),
    ENTRY_IDS((short)4, "entryIds"),
    /**
     * 
     * @see com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus
     */
    WORKING_STATUS((short)5, "workingStatus"),
    ACCESS_NAME((short)6, "accessName"),
    /**
     * 
     * @see com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv
     */
    ENV((short)7, "env");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_IDS
          return BROKER_IDS;
        case 2: // PLATFORM
          return PLATFORM;
        case 3: // ACCESS_STATUS
          return ACCESS_STATUS;
        case 4: // ENTRY_IDS
          return ENTRY_IDS;
        case 5: // WORKING_STATUS
          return WORKING_STATUS;
        case 6: // ACCESS_NAME
          return ACCESS_NAME;
        case 7: // ENV
          return ENV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.BROKER_IDS,_Fields.PLATFORM,_Fields.ACCESS_STATUS,_Fields.ENTRY_IDS,_Fields.WORKING_STATUS,_Fields.ACCESS_NAME,_Fields.ENV};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_IDS, new org.apache.thrift.meta_data.FieldMetaData("brokerIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform.class)));
    tmpMap.put(_Fields.ACCESS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("accessStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus.class)));
    tmpMap.put(_Fields.ENTRY_IDS, new org.apache.thrift.meta_data.FieldMetaData("entryIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.WORKING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("workingStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus.class)));
    tmpMap.put(_Fields.ACCESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("accessName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqBrokerAccessEntryOption.class, metaDataMap);
  }

  public ReqBrokerAccessEntryOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqBrokerAccessEntryOption(ReqBrokerAccessEntryOption other) {
    if (other.isSetBrokerIds()) {
      List<Integer> __this__brokerIds = new ArrayList<Integer>(other.brokerIds);
      this.brokerIds = __this__brokerIds;
    }
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetAccessStatus()) {
      this.accessStatus = other.accessStatus;
    }
    if (other.isSetEntryIds()) {
      List<Integer> __this__entryIds = new ArrayList<Integer>(other.entryIds);
      this.entryIds = __this__entryIds;
    }
    if (other.isSetWorkingStatus()) {
      this.workingStatus = other.workingStatus;
    }
    if (other.isSetAccessName()) {
      this.accessName = other.accessName;
    }
    if (other.isSetEnv()) {
      this.env = other.env;
    }
  }

  public ReqBrokerAccessEntryOption deepCopy() {
    return new ReqBrokerAccessEntryOption(this);
  }

  @Override
  public void clear() {
    this.brokerIds = null;
    this.platform = null;
    this.accessStatus = null;
    this.entryIds = null;
    this.workingStatus = null;
    this.accessName = null;
    this.env = null;
  }

  public int getBrokerIdsSize() {
    return (this.brokerIds == null) ? 0 : this.brokerIds.size();
  }

  public java.util.Iterator<Integer> getBrokerIdsIterator() {
    return (this.brokerIds == null) ? null : this.brokerIds.iterator();
  }

  public void addToBrokerIds(int elem) {
    if (this.brokerIds == null) {
      this.brokerIds = new ArrayList<Integer>();
    }
    this.brokerIds.add(elem);
  }

  public List<Integer> getBrokerIds() {
    return this.brokerIds;
  }

  public ReqBrokerAccessEntryOption setBrokerIds(List<Integer> brokerIds) {
    this.brokerIds = brokerIds;
    return this;
  }

  public void unsetBrokerIds() {
    this.brokerIds = null;
  }

  /** Returns true if field brokerIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerIds() {
    return this.brokerIds != null;
  }

  public void setBrokerIdsIsSet(boolean value) {
    if (!value) {
      this.brokerIds = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform
   */
  public com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform getPlatform() {
    return this.platform;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform
   */
  public ReqBrokerAccessEntryOption setPlatform(com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus
   */
  public com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus getAccessStatus() {
    return this.accessStatus;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus
   */
  public ReqBrokerAccessEntryOption setAccessStatus(com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus accessStatus) {
    this.accessStatus = accessStatus;
    return this;
  }

  public void unsetAccessStatus() {
    this.accessStatus = null;
  }

  /** Returns true if field accessStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessStatus() {
    return this.accessStatus != null;
  }

  public void setAccessStatusIsSet(boolean value) {
    if (!value) {
      this.accessStatus = null;
    }
  }

  public int getEntryIdsSize() {
    return (this.entryIds == null) ? 0 : this.entryIds.size();
  }

  public java.util.Iterator<Integer> getEntryIdsIterator() {
    return (this.entryIds == null) ? null : this.entryIds.iterator();
  }

  public void addToEntryIds(int elem) {
    if (this.entryIds == null) {
      this.entryIds = new ArrayList<Integer>();
    }
    this.entryIds.add(elem);
  }

  public List<Integer> getEntryIds() {
    return this.entryIds;
  }

  public ReqBrokerAccessEntryOption setEntryIds(List<Integer> entryIds) {
    this.entryIds = entryIds;
    return this;
  }

  public void unsetEntryIds() {
    this.entryIds = null;
  }

  /** Returns true if field entryIds is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryIds() {
    return this.entryIds != null;
  }

  public void setEntryIdsIsSet(boolean value) {
    if (!value) {
      this.entryIds = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus
   */
  public com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus getWorkingStatus() {
    return this.workingStatus;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus
   */
  public ReqBrokerAccessEntryOption setWorkingStatus(com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus workingStatus) {
    this.workingStatus = workingStatus;
    return this;
  }

  public void unsetWorkingStatus() {
    this.workingStatus = null;
  }

  /** Returns true if field workingStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkingStatus() {
    return this.workingStatus != null;
  }

  public void setWorkingStatusIsSet(boolean value) {
    if (!value) {
      this.workingStatus = null;
    }
  }

  public String getAccessName() {
    return this.accessName;
  }

  public ReqBrokerAccessEntryOption setAccessName(String accessName) {
    this.accessName = accessName;
    return this;
  }

  public void unsetAccessName() {
    this.accessName = null;
  }

  /** Returns true if field accessName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessName() {
    return this.accessName != null;
  }

  public void setAccessNameIsSet(boolean value) {
    if (!value) {
      this.accessName = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv
   */
  public com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv getEnv() {
    return this.env;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv
   */
  public ReqBrokerAccessEntryOption setEnv(com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv env) {
    this.env = env;
    return this;
  }

  public void unsetEnv() {
    this.env = null;
  }

  /** Returns true if field env is set (has been assigned a value) and false otherwise */
  public boolean isSetEnv() {
    return this.env != null;
  }

  public void setEnvIsSet(boolean value) {
    if (!value) {
      this.env = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_IDS:
      if (value == null) {
        unsetBrokerIds();
      } else {
        setBrokerIds((List<Integer>)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform)value);
      }
      break;

    case ACCESS_STATUS:
      if (value == null) {
        unsetAccessStatus();
      } else {
        setAccessStatus((com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus)value);
      }
      break;

    case ENTRY_IDS:
      if (value == null) {
        unsetEntryIds();
      } else {
        setEntryIds((List<Integer>)value);
      }
      break;

    case WORKING_STATUS:
      if (value == null) {
        unsetWorkingStatus();
      } else {
        setWorkingStatus((com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus)value);
      }
      break;

    case ACCESS_NAME:
      if (value == null) {
        unsetAccessName();
      } else {
        setAccessName((String)value);
      }
      break;

    case ENV:
      if (value == null) {
        unsetEnv();
      } else {
        setEnv((com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_IDS:
      return getBrokerIds();

    case PLATFORM:
      return getPlatform();

    case ACCESS_STATUS:
      return getAccessStatus();

    case ENTRY_IDS:
      return getEntryIds();

    case WORKING_STATUS:
      return getWorkingStatus();

    case ACCESS_NAME:
      return getAccessName();

    case ENV:
      return getEnv();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_IDS:
      return isSetBrokerIds();
    case PLATFORM:
      return isSetPlatform();
    case ACCESS_STATUS:
      return isSetAccessStatus();
    case ENTRY_IDS:
      return isSetEntryIds();
    case WORKING_STATUS:
      return isSetWorkingStatus();
    case ACCESS_NAME:
      return isSetAccessName();
    case ENV:
      return isSetEnv();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqBrokerAccessEntryOption)
      return this.equals((ReqBrokerAccessEntryOption)that);
    return false;
  }

  public boolean equals(ReqBrokerAccessEntryOption that) {
    if (that == null)
      return false;

    boolean this_present_brokerIds = true && this.isSetBrokerIds();
    boolean that_present_brokerIds = true && that.isSetBrokerIds();
    if (this_present_brokerIds || that_present_brokerIds) {
      if (!(this_present_brokerIds && that_present_brokerIds))
        return false;
      if (!this.brokerIds.equals(that.brokerIds))
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_accessStatus = true && this.isSetAccessStatus();
    boolean that_present_accessStatus = true && that.isSetAccessStatus();
    if (this_present_accessStatus || that_present_accessStatus) {
      if (!(this_present_accessStatus && that_present_accessStatus))
        return false;
      if (!this.accessStatus.equals(that.accessStatus))
        return false;
    }

    boolean this_present_entryIds = true && this.isSetEntryIds();
    boolean that_present_entryIds = true && that.isSetEntryIds();
    if (this_present_entryIds || that_present_entryIds) {
      if (!(this_present_entryIds && that_present_entryIds))
        return false;
      if (!this.entryIds.equals(that.entryIds))
        return false;
    }

    boolean this_present_workingStatus = true && this.isSetWorkingStatus();
    boolean that_present_workingStatus = true && that.isSetWorkingStatus();
    if (this_present_workingStatus || that_present_workingStatus) {
      if (!(this_present_workingStatus && that_present_workingStatus))
        return false;
      if (!this.workingStatus.equals(that.workingStatus))
        return false;
    }

    boolean this_present_accessName = true && this.isSetAccessName();
    boolean that_present_accessName = true && that.isSetAccessName();
    if (this_present_accessName || that_present_accessName) {
      if (!(this_present_accessName && that_present_accessName))
        return false;
      if (!this.accessName.equals(that.accessName))
        return false;
    }

    boolean this_present_env = true && this.isSetEnv();
    boolean that_present_env = true && that.isSetEnv();
    if (this_present_env || that_present_env) {
      if (!(this_present_env && that_present_env))
        return false;
      if (!this.env.equals(that.env))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqBrokerAccessEntryOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerIds()).compareTo(other.isSetBrokerIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerIds, other.brokerIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessStatus()).compareTo(other.isSetAccessStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessStatus, other.accessStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryIds()).compareTo(other.isSetEntryIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryIds, other.entryIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkingStatus()).compareTo(other.isSetWorkingStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkingStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workingStatus, other.workingStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessName()).compareTo(other.isSetAccessName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessName, other.accessName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqBrokerAccessEntryOption(");
    boolean first = true;

    if (isSetBrokerIds()) {
      sb.append("brokerIds:");
      if (this.brokerIds == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerIds);
      }
      first = false;
    }
    if (isSetPlatform()) {
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetAccessStatus()) {
      if (!first) sb.append(", ");
      sb.append("accessStatus:");
      if (this.accessStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.accessStatus);
      }
      first = false;
    }
    if (isSetEntryIds()) {
      if (!first) sb.append(", ");
      sb.append("entryIds:");
      if (this.entryIds == null) {
        sb.append("null");
      } else {
        sb.append(this.entryIds);
      }
      first = false;
    }
    if (isSetWorkingStatus()) {
      if (!first) sb.append(", ");
      sb.append("workingStatus:");
      if (this.workingStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.workingStatus);
      }
      first = false;
    }
    if (isSetAccessName()) {
      if (!first) sb.append(", ");
      sb.append("accessName:");
      if (this.accessName == null) {
        sb.append("null");
      } else {
        sb.append(this.accessName);
      }
      first = false;
    }
    if (isSetEnv()) {
      if (!first) sb.append(", ");
      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqBrokerAccessEntryOptionStandardSchemeFactory implements SchemeFactory {
    public ReqBrokerAccessEntryOptionStandardScheme getScheme() {
      return new ReqBrokerAccessEntryOptionStandardScheme();
    }
  }

  private static class ReqBrokerAccessEntryOptionStandardScheme extends StandardScheme<ReqBrokerAccessEntryOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqBrokerAccessEntryOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.brokerIds = new ArrayList<Integer>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  int _elem34;
                  _elem34 = iprot.readI32();
                  struct.brokerIds.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setBrokerIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platform = com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform.findByValue(iprot.readI32());
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCESS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accessStatus = com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus.findByValue(iprot.readI32());
              struct.setAccessStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTRY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.entryIds = new ArrayList<Integer>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  int _elem37;
                  _elem37 = iprot.readI32();
                  struct.entryIds.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setEntryIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WORKING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workingStatus = com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus.findByValue(iprot.readI32());
              struct.setWorkingStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessName = iprot.readString();
              struct.setAccessNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.env = com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv.findByValue(iprot.readI32());
              struct.setEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqBrokerAccessEntryOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerIds != null) {
        if (struct.isSetBrokerIds()) {
          oprot.writeFieldBegin(BROKER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.brokerIds.size()));
            for (int _iter38 : struct.brokerIds)
            {
              oprot.writeI32(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.platform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.accessStatus != null) {
        if (struct.isSetAccessStatus()) {
          oprot.writeFieldBegin(ACCESS_STATUS_FIELD_DESC);
          oprot.writeI32(struct.accessStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.entryIds != null) {
        if (struct.isSetEntryIds()) {
          oprot.writeFieldBegin(ENTRY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.entryIds.size()));
            for (int _iter39 : struct.entryIds)
            {
              oprot.writeI32(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.workingStatus != null) {
        if (struct.isSetWorkingStatus()) {
          oprot.writeFieldBegin(WORKING_STATUS_FIELD_DESC);
          oprot.writeI32(struct.workingStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.accessName != null) {
        if (struct.isSetAccessName()) {
          oprot.writeFieldBegin(ACCESS_NAME_FIELD_DESC);
          oprot.writeString(struct.accessName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.env != null) {
        if (struct.isSetEnv()) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          oprot.writeI32(struct.env.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqBrokerAccessEntryOptionTupleSchemeFactory implements SchemeFactory {
    public ReqBrokerAccessEntryOptionTupleScheme getScheme() {
      return new ReqBrokerAccessEntryOptionTupleScheme();
    }
  }

  private static class ReqBrokerAccessEntryOptionTupleScheme extends TupleScheme<ReqBrokerAccessEntryOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqBrokerAccessEntryOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerIds()) {
        optionals.set(0);
      }
      if (struct.isSetPlatform()) {
        optionals.set(1);
      }
      if (struct.isSetAccessStatus()) {
        optionals.set(2);
      }
      if (struct.isSetEntryIds()) {
        optionals.set(3);
      }
      if (struct.isSetWorkingStatus()) {
        optionals.set(4);
      }
      if (struct.isSetAccessName()) {
        optionals.set(5);
      }
      if (struct.isSetEnv()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBrokerIds()) {
        {
          oprot.writeI32(struct.brokerIds.size());
          for (int _iter40 : struct.brokerIds)
          {
            oprot.writeI32(_iter40);
          }
        }
      }
      if (struct.isSetPlatform()) {
        oprot.writeI32(struct.platform.getValue());
      }
      if (struct.isSetAccessStatus()) {
        oprot.writeI32(struct.accessStatus.getValue());
      }
      if (struct.isSetEntryIds()) {
        {
          oprot.writeI32(struct.entryIds.size());
          for (int _iter41 : struct.entryIds)
          {
            oprot.writeI32(_iter41);
          }
        }
      }
      if (struct.isSetWorkingStatus()) {
        oprot.writeI32(struct.workingStatus.getValue());
      }
      if (struct.isSetAccessName()) {
        oprot.writeString(struct.accessName);
      }
      if (struct.isSetEnv()) {
        oprot.writeI32(struct.env.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqBrokerAccessEntryOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.brokerIds = new ArrayList<Integer>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            int _elem44;
            _elem44 = iprot.readI32();
            struct.brokerIds.add(_elem44);
          }
        }
        struct.setBrokerIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.platform = com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform.findByValue(iprot.readI32());
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accessStatus = com.longsheng.xueqiao.broker.thriftapi.BrokerAccessStatus.findByValue(iprot.readI32());
        struct.setAccessStatusIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.entryIds = new ArrayList<Integer>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            int _elem47;
            _elem47 = iprot.readI32();
            struct.entryIds.add(_elem47);
          }
        }
        struct.setEntryIdsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.workingStatus = com.longsheng.xueqiao.broker.thriftapi.BrokerAccessWorkingStatus.findByValue(iprot.readI32());
        struct.setWorkingStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.accessName = iprot.readString();
        struct.setAccessNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.env = com.longsheng.xueqiao.broker.thriftapi.TechPlatformEnv.findByValue(iprot.readI32());
        struct.setEnvIsSet(true);
      }
    }
  }

}

