/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.admin.web.api.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 已规划订阅信息
 */
public class PlanningSubscribedInfo implements org.apache.thrift.TBase<PlanningSubscribedInfo, PlanningSubscribedInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PlanningSubscribedInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlanningSubscribedInfo");

  private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXCHANGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMMODITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlanningSubscribedInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlanningSubscribedInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv platformEnv; // optional
  public int sledExchangeId; // optional
  public int sledCommodityId; // optional
  public String exchangeName; // optional
  public String commodityName; // optional
  public PreviewFields fields; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv
     */
    PLATFORM_ENV((short)1, "platformEnv"),
    SLED_EXCHANGE_ID((short)2, "sledExchangeId"),
    SLED_COMMODITY_ID((short)3, "sledCommodityId"),
    EXCHANGE_NAME((short)4, "exchangeName"),
    COMMODITY_NAME((short)5, "commodityName"),
    FIELDS((short)6, "fields");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLATFORM_ENV
          return PLATFORM_ENV;
        case 2: // SLED_EXCHANGE_ID
          return SLED_EXCHANGE_ID;
        case 3: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 4: // EXCHANGE_NAME
          return EXCHANGE_NAME;
        case 5: // COMMODITY_NAME
          return COMMODITY_NAME;
        case 6: // FIELDS
          return FIELDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDEXCHANGEID_ISSET_ID = 0;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PLATFORM_ENV,_Fields.SLED_EXCHANGE_ID,_Fields.SLED_COMMODITY_ID,_Fields.EXCHANGE_NAME,_Fields.COMMODITY_NAME,_Fields.FIELDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv.class)));
    tmpMap.put(_Fields.SLED_EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("exchangeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("commodityName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PreviewFields.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlanningSubscribedInfo.class, metaDataMap);
  }

  public PlanningSubscribedInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlanningSubscribedInfo(PlanningSubscribedInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlatformEnv()) {
      this.platformEnv = other.platformEnv;
    }
    this.sledExchangeId = other.sledExchangeId;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetExchangeName()) {
      this.exchangeName = other.exchangeName;
    }
    if (other.isSetCommodityName()) {
      this.commodityName = other.commodityName;
    }
    if (other.isSetFields()) {
      this.fields = new PreviewFields(other.fields);
    }
  }

  public PlanningSubscribedInfo deepCopy() {
    return new PlanningSubscribedInfo(this);
  }

  @Override
  public void clear() {
    this.platformEnv = null;
    setSledExchangeIdIsSet(false);
    this.sledExchangeId = 0;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.exchangeName = null;
    this.commodityName = null;
    this.fields = null;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv getPlatformEnv() {
    return this.platformEnv;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv
   */
  public PlanningSubscribedInfo setPlatformEnv(com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv platformEnv) {
    this.platformEnv = platformEnv;
    return this;
  }

  public void unsetPlatformEnv() {
    this.platformEnv = null;
  }

  /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformEnv() {
    return this.platformEnv != null;
  }

  public void setPlatformEnvIsSet(boolean value) {
    if (!value) {
      this.platformEnv = null;
    }
  }

  public int getSledExchangeId() {
    return this.sledExchangeId;
  }

  public PlanningSubscribedInfo setSledExchangeId(int sledExchangeId) {
    this.sledExchangeId = sledExchangeId;
    setSledExchangeIdIsSet(true);
    return this;
  }

  public void unsetSledExchangeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID);
  }

  /** Returns true if field sledExchangeId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID);
  }

  public void setSledExchangeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID, value);
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public PlanningSubscribedInfo setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public String getExchangeName() {
    return this.exchangeName;
  }

  public PlanningSubscribedInfo setExchangeName(String exchangeName) {
    this.exchangeName = exchangeName;
    return this;
  }

  public void unsetExchangeName() {
    this.exchangeName = null;
  }

  /** Returns true if field exchangeName is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeName() {
    return this.exchangeName != null;
  }

  public void setExchangeNameIsSet(boolean value) {
    if (!value) {
      this.exchangeName = null;
    }
  }

  public String getCommodityName() {
    return this.commodityName;
  }

  public PlanningSubscribedInfo setCommodityName(String commodityName) {
    this.commodityName = commodityName;
    return this;
  }

  public void unsetCommodityName() {
    this.commodityName = null;
  }

  /** Returns true if field commodityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityName() {
    return this.commodityName != null;
  }

  public void setCommodityNameIsSet(boolean value) {
    if (!value) {
      this.commodityName = null;
    }
  }

  public PreviewFields getFields() {
    return this.fields;
  }

  public PlanningSubscribedInfo setFields(PreviewFields fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLATFORM_ENV:
      if (value == null) {
        unsetPlatformEnv();
      } else {
        setPlatformEnv((com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv)value);
      }
      break;

    case SLED_EXCHANGE_ID:
      if (value == null) {
        unsetSledExchangeId();
      } else {
        setSledExchangeId((Integer)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case EXCHANGE_NAME:
      if (value == null) {
        unsetExchangeName();
      } else {
        setExchangeName((String)value);
      }
      break;

    case COMMODITY_NAME:
      if (value == null) {
        unsetCommodityName();
      } else {
        setCommodityName((String)value);
      }
      break;

    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((PreviewFields)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLATFORM_ENV:
      return getPlatformEnv();

    case SLED_EXCHANGE_ID:
      return Integer.valueOf(getSledExchangeId());

    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case EXCHANGE_NAME:
      return getExchangeName();

    case COMMODITY_NAME:
      return getCommodityName();

    case FIELDS:
      return getFields();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLATFORM_ENV:
      return isSetPlatformEnv();
    case SLED_EXCHANGE_ID:
      return isSetSledExchangeId();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case EXCHANGE_NAME:
      return isSetExchangeName();
    case COMMODITY_NAME:
      return isSetCommodityName();
    case FIELDS:
      return isSetFields();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlanningSubscribedInfo)
      return this.equals((PlanningSubscribedInfo)that);
    return false;
  }

  public boolean equals(PlanningSubscribedInfo that) {
    if (that == null)
      return false;

    boolean this_present_platformEnv = true && this.isSetPlatformEnv();
    boolean that_present_platformEnv = true && that.isSetPlatformEnv();
    if (this_present_platformEnv || that_present_platformEnv) {
      if (!(this_present_platformEnv && that_present_platformEnv))
        return false;
      if (!this.platformEnv.equals(that.platformEnv))
        return false;
    }

    boolean this_present_sledExchangeId = true && this.isSetSledExchangeId();
    boolean that_present_sledExchangeId = true && that.isSetSledExchangeId();
    if (this_present_sledExchangeId || that_present_sledExchangeId) {
      if (!(this_present_sledExchangeId && that_present_sledExchangeId))
        return false;
      if (this.sledExchangeId != that.sledExchangeId)
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_exchangeName = true && this.isSetExchangeName();
    boolean that_present_exchangeName = true && that.isSetExchangeName();
    if (this_present_exchangeName || that_present_exchangeName) {
      if (!(this_present_exchangeName && that_present_exchangeName))
        return false;
      if (!this.exchangeName.equals(that.exchangeName))
        return false;
    }

    boolean this_present_commodityName = true && this.isSetCommodityName();
    boolean that_present_commodityName = true && that.isSetCommodityName();
    if (this_present_commodityName || that_present_commodityName) {
      if (!(this_present_commodityName && that_present_commodityName))
        return false;
      if (!this.commodityName.equals(that.commodityName))
        return false;
    }

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PlanningSubscribedInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledExchangeId()).compareTo(other.isSetSledExchangeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeId, other.sledExchangeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeName()).compareTo(other.isSetExchangeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeName, other.exchangeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityName()).compareTo(other.isSetCommodityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityName, other.commodityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlanningSubscribedInfo(");
    boolean first = true;

    if (isSetPlatformEnv()) {
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
    }
    if (isSetSledExchangeId()) {
      if (!first) sb.append(", ");
      sb.append("sledExchangeId:");
      sb.append(this.sledExchangeId);
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetExchangeName()) {
      if (!first) sb.append(", ");
      sb.append("exchangeName:");
      if (this.exchangeName == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeName);
      }
      first = false;
    }
    if (isSetCommodityName()) {
      if (!first) sb.append(", ");
      sb.append("commodityName:");
      if (this.commodityName == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityName);
      }
      first = false;
    }
    if (isSetFields()) {
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fields != null) {
      fields.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlanningSubscribedInfoStandardSchemeFactory implements SchemeFactory {
    public PlanningSubscribedInfoStandardScheme getScheme() {
      return new PlanningSubscribedInfoStandardScheme();
    }
  }

  private static class PlanningSubscribedInfoStandardScheme extends StandardScheme<PlanningSubscribedInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlanningSubscribedInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformEnv = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv.findByValue(iprot.readI32());
              struct.setPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledExchangeId = iprot.readI32();
              struct.setSledExchangeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCHANGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeName = iprot.readString();
              struct.setExchangeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMODITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityName = iprot.readString();
              struct.setCommodityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fields = new PreviewFields();
              struct.fields.read(iprot);
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlanningSubscribedInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.platformEnv != null) {
        if (struct.isSetPlatformEnv()) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledExchangeId()) {
        oprot.writeFieldBegin(SLED_EXCHANGE_ID_FIELD_DESC);
        oprot.writeI32(struct.sledExchangeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeName != null) {
        if (struct.isSetExchangeName()) {
          oprot.writeFieldBegin(EXCHANGE_NAME_FIELD_DESC);
          oprot.writeString(struct.exchangeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityName != null) {
        if (struct.isSetCommodityName()) {
          oprot.writeFieldBegin(COMMODITY_NAME_FIELD_DESC);
          oprot.writeString(struct.commodityName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fields != null) {
        if (struct.isSetFields()) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          struct.fields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlanningSubscribedInfoTupleSchemeFactory implements SchemeFactory {
    public PlanningSubscribedInfoTupleScheme getScheme() {
      return new PlanningSubscribedInfoTupleScheme();
    }
  }

  private static class PlanningSubscribedInfoTupleScheme extends TupleScheme<PlanningSubscribedInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlanningSubscribedInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlatformEnv()) {
        optionals.set(0);
      }
      if (struct.isSetSledExchangeId()) {
        optionals.set(1);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(2);
      }
      if (struct.isSetExchangeName()) {
        optionals.set(3);
      }
      if (struct.isSetCommodityName()) {
        optionals.set(4);
      }
      if (struct.isSetFields()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPlatformEnv()) {
        oprot.writeI32(struct.platformEnv.getValue());
      }
      if (struct.isSetSledExchangeId()) {
        oprot.writeI32(struct.sledExchangeId);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetExchangeName()) {
        oprot.writeString(struct.exchangeName);
      }
      if (struct.isSetCommodityName()) {
        oprot.writeString(struct.commodityName);
      }
      if (struct.isSetFields()) {
        struct.fields.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlanningSubscribedInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.platformEnv = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv.findByValue(iprot.readI32());
        struct.setPlatformEnvIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledExchangeId = iprot.readI32();
        struct.setSledExchangeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangeName = iprot.readString();
        struct.setExchangeNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.commodityName = iprot.readString();
        struct.setCommodityNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fields = new PreviewFields();
        struct.fields.read(iprot);
        struct.setFieldsIsSet(true);
      }
    }
  }

}

