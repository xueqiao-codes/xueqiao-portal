/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.admin.web.api.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RePlanSubscribedInfoPreviewPage implements org.apache.thrift.TBase<RePlanSubscribedInfoPreviewPage, RePlanSubscribedInfoPreviewPage._Fields>, java.io.Serializable, Cloneable, Comparable<RePlanSubscribedInfoPreviewPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RePlanSubscribedInfoPreviewPage");

  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATE_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("stateMsg", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RePlanSubscribedInfoPreviewPageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RePlanSubscribedInfoPreviewPageTupleSchemeFactory());
  }

  public int total; // optional
  public List<RePlanSubscribedInfoPreview> page; // optional
  /**
   * 
   * @see PreviewState
   */
  public PreviewState state; // optional
  public String stateMsg; // optional
  public long lastUpdateTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL((short)1, "total"),
    PAGE((short)2, "page"),
    /**
     * 
     * @see PreviewState
     */
    STATE((short)3, "state"),
    STATE_MSG((short)4, "stateMsg"),
    LAST_UPDATE_TIMESTAMP_MS((short)5, "lastUpdateTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL
          return TOTAL;
        case 2: // PAGE
          return PAGE;
        case 3: // STATE
          return STATE;
        case 4: // STATE_MSG
          return STATE_MSG;
        case 5: // LAST_UPDATE_TIMESTAMP_MS
          return LAST_UPDATE_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_ISSET_ID = 0;
  private static final int __LASTUPDATETIMESTAMPMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TOTAL,_Fields.PAGE,_Fields.STATE,_Fields.STATE_MSG,_Fields.LAST_UPDATE_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RePlanSubscribedInfoPreview.class))));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PreviewState.class)));
    tmpMap.put(_Fields.STATE_MSG, new org.apache.thrift.meta_data.FieldMetaData("stateMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RePlanSubscribedInfoPreviewPage.class, metaDataMap);
  }

  public RePlanSubscribedInfoPreviewPage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RePlanSubscribedInfoPreviewPage(RePlanSubscribedInfoPreviewPage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.total = other.total;
    if (other.isSetPage()) {
      List<RePlanSubscribedInfoPreview> __this__page = new ArrayList<RePlanSubscribedInfoPreview>(other.page.size());
      for (RePlanSubscribedInfoPreview other_element : other.page) {
        __this__page.add(new RePlanSubscribedInfoPreview(other_element));
      }
      this.page = __this__page;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetStateMsg()) {
      this.stateMsg = other.stateMsg;
    }
    this.lastUpdateTimestampMs = other.lastUpdateTimestampMs;
  }

  public RePlanSubscribedInfoPreviewPage deepCopy() {
    return new RePlanSubscribedInfoPreviewPage(this);
  }

  @Override
  public void clear() {
    setTotalIsSet(false);
    this.total = 0;
    this.page = null;
    this.state = null;
    this.stateMsg = null;
    setLastUpdateTimestampMsIsSet(false);
    this.lastUpdateTimestampMs = 0;
  }

  public int getTotal() {
    return this.total;
  }

  public RePlanSubscribedInfoPreviewPage setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public int getPageSize() {
    return (this.page == null) ? 0 : this.page.size();
  }

  public java.util.Iterator<RePlanSubscribedInfoPreview> getPageIterator() {
    return (this.page == null) ? null : this.page.iterator();
  }

  public void addToPage(RePlanSubscribedInfoPreview elem) {
    if (this.page == null) {
      this.page = new ArrayList<RePlanSubscribedInfoPreview>();
    }
    this.page.add(elem);
  }

  public List<RePlanSubscribedInfoPreview> getPage() {
    return this.page;
  }

  public RePlanSubscribedInfoPreviewPage setPage(List<RePlanSubscribedInfoPreview> page) {
    this.page = page;
    return this;
  }

  public void unsetPage() {
    this.page = null;
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return this.page != null;
  }

  public void setPageIsSet(boolean value) {
    if (!value) {
      this.page = null;
    }
  }

  /**
   * 
   * @see PreviewState
   */
  public PreviewState getState() {
    return this.state;
  }

  /**
   * 
   * @see PreviewState
   */
  public RePlanSubscribedInfoPreviewPage setState(PreviewState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public String getStateMsg() {
    return this.stateMsg;
  }

  public RePlanSubscribedInfoPreviewPage setStateMsg(String stateMsg) {
    this.stateMsg = stateMsg;
    return this;
  }

  public void unsetStateMsg() {
    this.stateMsg = null;
  }

  /** Returns true if field stateMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStateMsg() {
    return this.stateMsg != null;
  }

  public void setStateMsgIsSet(boolean value) {
    if (!value) {
      this.stateMsg = null;
    }
  }

  public long getLastUpdateTimestampMs() {
    return this.lastUpdateTimestampMs;
  }

  public RePlanSubscribedInfoPreviewPage setLastUpdateTimestampMs(long lastUpdateTimestampMs) {
    this.lastUpdateTimestampMs = lastUpdateTimestampMs;
    setLastUpdateTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastUpdateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastUpdateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATETIMESTAMPMS_ISSET_ID);
  }

  public void setLastUpdateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATETIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((List<RePlanSubscribedInfoPreview>)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((PreviewState)value);
      }
      break;

    case STATE_MSG:
      if (value == null) {
        unsetStateMsg();
      } else {
        setStateMsg((String)value);
      }
      break;

    case LAST_UPDATE_TIMESTAMP_MS:
      if (value == null) {
        unsetLastUpdateTimestampMs();
      } else {
        setLastUpdateTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL:
      return Integer.valueOf(getTotal());

    case PAGE:
      return getPage();

    case STATE:
      return getState();

    case STATE_MSG:
      return getStateMsg();

    case LAST_UPDATE_TIMESTAMP_MS:
      return Long.valueOf(getLastUpdateTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL:
      return isSetTotal();
    case PAGE:
      return isSetPage();
    case STATE:
      return isSetState();
    case STATE_MSG:
      return isSetStateMsg();
    case LAST_UPDATE_TIMESTAMP_MS:
      return isSetLastUpdateTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RePlanSubscribedInfoPreviewPage)
      return this.equals((RePlanSubscribedInfoPreviewPage)that);
    return false;
  }

  public boolean equals(RePlanSubscribedInfoPreviewPage that) {
    if (that == null)
      return false;

    boolean this_present_total = true && this.isSetTotal();
    boolean that_present_total = true && that.isSetTotal();
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (!this.page.equals(that.page))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_stateMsg = true && this.isSetStateMsg();
    boolean that_present_stateMsg = true && that.isSetStateMsg();
    if (this_present_stateMsg || that_present_stateMsg) {
      if (!(this_present_stateMsg && that_present_stateMsg))
        return false;
      if (!this.stateMsg.equals(that.stateMsg))
        return false;
    }

    boolean this_present_lastUpdateTimestampMs = true && this.isSetLastUpdateTimestampMs();
    boolean that_present_lastUpdateTimestampMs = true && that.isSetLastUpdateTimestampMs();
    if (this_present_lastUpdateTimestampMs || that_present_lastUpdateTimestampMs) {
      if (!(this_present_lastUpdateTimestampMs && that_present_lastUpdateTimestampMs))
        return false;
      if (this.lastUpdateTimestampMs != that.lastUpdateTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RePlanSubscribedInfoPreviewPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStateMsg()).compareTo(other.isSetStateMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateMsg, other.stateMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTimestampMs()).compareTo(other.isSetLastUpdateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTimestampMs, other.lastUpdateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RePlanSubscribedInfoPreviewPage(");
    boolean first = true;

    if (isSetTotal()) {
      sb.append("total:");
      sb.append(this.total);
      first = false;
    }
    if (isSetPage()) {
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetStateMsg()) {
      if (!first) sb.append(", ");
      sb.append("stateMsg:");
      if (this.stateMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.stateMsg);
      }
      first = false;
    }
    if (isSetLastUpdateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateTimestampMs:");
      sb.append(this.lastUpdateTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RePlanSubscribedInfoPreviewPageStandardSchemeFactory implements SchemeFactory {
    public RePlanSubscribedInfoPreviewPageStandardScheme getScheme() {
      return new RePlanSubscribedInfoPreviewPageStandardScheme();
    }
  }

  private static class RePlanSubscribedInfoPreviewPageStandardScheme extends StandardScheme<RePlanSubscribedInfoPreviewPage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RePlanSubscribedInfoPreviewPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list116 = iprot.readListBegin();
                struct.page = new ArrayList<RePlanSubscribedInfoPreview>(_list116.size);
                for (int _i117 = 0; _i117 < _list116.size; ++_i117)
                {
                  RePlanSubscribedInfoPreview _elem118;
                  _elem118 = new RePlanSubscribedInfoPreview();
                  _elem118.read(iprot);
                  struct.page.add(_elem118);
                }
                iprot.readListEnd();
              }
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = PreviewState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATE_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stateMsg = iprot.readString();
              struct.setStateMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_UPDATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdateTimestampMs = iprot.readI64();
              struct.setLastUpdateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RePlanSubscribedInfoPreviewPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTotal()) {
        oprot.writeFieldBegin(TOTAL_FIELD_DESC);
        oprot.writeI32(struct.total);
        oprot.writeFieldEnd();
      }
      if (struct.page != null) {
        if (struct.isSetPage()) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.page.size()));
            for (RePlanSubscribedInfoPreview _iter119 : struct.page)
            {
              _iter119.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeI32(struct.state.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.stateMsg != null) {
        if (struct.isSetStateMsg()) {
          oprot.writeFieldBegin(STATE_MSG_FIELD_DESC);
          oprot.writeString(struct.stateMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastUpdateTimestampMs()) {
        oprot.writeFieldBegin(LAST_UPDATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastUpdateTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RePlanSubscribedInfoPreviewPageTupleSchemeFactory implements SchemeFactory {
    public RePlanSubscribedInfoPreviewPageTupleScheme getScheme() {
      return new RePlanSubscribedInfoPreviewPageTupleScheme();
    }
  }

  private static class RePlanSubscribedInfoPreviewPageTupleScheme extends TupleScheme<RePlanSubscribedInfoPreviewPage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RePlanSubscribedInfoPreviewPage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotal()) {
        optionals.set(0);
      }
      if (struct.isSetPage()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      if (struct.isSetStateMsg()) {
        optionals.set(3);
      }
      if (struct.isSetLastUpdateTimestampMs()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
      if (struct.isSetPage()) {
        {
          oprot.writeI32(struct.page.size());
          for (RePlanSubscribedInfoPreview _iter120 : struct.page)
          {
            _iter120.write(oprot);
          }
        }
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetStateMsg()) {
        oprot.writeString(struct.stateMsg);
      }
      if (struct.isSetLastUpdateTimestampMs()) {
        oprot.writeI64(struct.lastUpdateTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RePlanSubscribedInfoPreviewPage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.page = new ArrayList<RePlanSubscribedInfoPreview>(_list121.size);
          for (int _i122 = 0; _i122 < _list121.size; ++_i122)
          {
            RePlanSubscribedInfoPreview _elem123;
            _elem123 = new RePlanSubscribedInfoPreview();
            _elem123.read(iprot);
            struct.page.add(_elem123);
          }
        }
        struct.setPageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = PreviewState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stateMsg = iprot.readString();
        struct.setStateMsgIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastUpdateTimestampMs = iprot.readI64();
        struct.setLastUpdateTimestampMsIsSet(true);
      }
    }
  }

}

