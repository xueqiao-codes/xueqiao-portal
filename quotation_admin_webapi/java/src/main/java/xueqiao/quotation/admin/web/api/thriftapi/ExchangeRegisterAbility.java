/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation.admin.web.api.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExchangeRegisterAbility implements org.apache.thrift.TBase<ExchangeRegisterAbility, ExchangeRegisterAbility._Fields>, java.io.Serializable, Cloneable, Comparable<ExchangeRegisterAbility> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExchangeRegisterAbility");

  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUPPORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("supportType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXCHANGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMMODITY_ABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityAbilities", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExchangeRegisterAbilityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExchangeRegisterAbilityTupleSchemeFactory());
  }

  public long accountId; // optional
  public int sledExchangeId; // optional
  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.SupportType
   */
  public xueqiao.quotation.account.thriftapi.SupportType supportType; // optional
  public String exchangeName; // optional
  public List<CommodityRegisterAbility> commodityAbilities; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_ID((short)1, "accountId"),
    SLED_EXCHANGE_ID((short)2, "sledExchangeId"),
    /**
     * 
     * @see xueqiao.quotation.account.thriftapi.SupportType
     */
    SUPPORT_TYPE((short)4, "supportType"),
    EXCHANGE_NAME((short)5, "exchangeName"),
    COMMODITY_ABILITIES((short)6, "commodityAbilities");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 2: // SLED_EXCHANGE_ID
          return SLED_EXCHANGE_ID;
        case 4: // SUPPORT_TYPE
          return SUPPORT_TYPE;
        case 5: // EXCHANGE_NAME
          return EXCHANGE_NAME;
        case 6: // COMMODITY_ABILITIES
          return COMMODITY_ABILITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCOUNTID_ISSET_ID = 0;
  private static final int __SLEDEXCHANGEID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ACCOUNT_ID,_Fields.SLED_EXCHANGE_ID,_Fields.SUPPORT_TYPE,_Fields.EXCHANGE_NAME,_Fields.COMMODITY_ABILITIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPPORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("supportType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.quotation.account.thriftapi.SupportType.class)));
    tmpMap.put(_Fields.EXCHANGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("exchangeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_ABILITIES, new org.apache.thrift.meta_data.FieldMetaData("commodityAbilities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommodityRegisterAbility.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExchangeRegisterAbility.class, metaDataMap);
  }

  public ExchangeRegisterAbility() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExchangeRegisterAbility(ExchangeRegisterAbility other) {
    __isset_bitfield = other.__isset_bitfield;
    this.accountId = other.accountId;
    this.sledExchangeId = other.sledExchangeId;
    if (other.isSetSupportType()) {
      this.supportType = other.supportType;
    }
    if (other.isSetExchangeName()) {
      this.exchangeName = other.exchangeName;
    }
    if (other.isSetCommodityAbilities()) {
      List<CommodityRegisterAbility> __this__commodityAbilities = new ArrayList<CommodityRegisterAbility>(other.commodityAbilities.size());
      for (CommodityRegisterAbility other_element : other.commodityAbilities) {
        __this__commodityAbilities.add(new CommodityRegisterAbility(other_element));
      }
      this.commodityAbilities = __this__commodityAbilities;
    }
  }

  public ExchangeRegisterAbility deepCopy() {
    return new ExchangeRegisterAbility(this);
  }

  @Override
  public void clear() {
    setAccountIdIsSet(false);
    this.accountId = 0;
    setSledExchangeIdIsSet(false);
    this.sledExchangeId = 0;
    this.supportType = null;
    this.exchangeName = null;
    this.commodityAbilities = null;
  }

  public long getAccountId() {
    return this.accountId;
  }

  public ExchangeRegisterAbility setAccountId(long accountId) {
    this.accountId = accountId;
    setAccountIdIsSet(true);
    return this;
  }

  public void unsetAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  public void setAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
  }

  public int getSledExchangeId() {
    return this.sledExchangeId;
  }

  public ExchangeRegisterAbility setSledExchangeId(int sledExchangeId) {
    this.sledExchangeId = sledExchangeId;
    setSledExchangeIdIsSet(true);
    return this;
  }

  public void unsetSledExchangeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID);
  }

  /** Returns true if field sledExchangeId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID);
  }

  public void setSledExchangeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID, value);
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.SupportType
   */
  public xueqiao.quotation.account.thriftapi.SupportType getSupportType() {
    return this.supportType;
  }

  /**
   * 
   * @see xueqiao.quotation.account.thriftapi.SupportType
   */
  public ExchangeRegisterAbility setSupportType(xueqiao.quotation.account.thriftapi.SupportType supportType) {
    this.supportType = supportType;
    return this;
  }

  public void unsetSupportType() {
    this.supportType = null;
  }

  /** Returns true if field supportType is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportType() {
    return this.supportType != null;
  }

  public void setSupportTypeIsSet(boolean value) {
    if (!value) {
      this.supportType = null;
    }
  }

  public String getExchangeName() {
    return this.exchangeName;
  }

  public ExchangeRegisterAbility setExchangeName(String exchangeName) {
    this.exchangeName = exchangeName;
    return this;
  }

  public void unsetExchangeName() {
    this.exchangeName = null;
  }

  /** Returns true if field exchangeName is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeName() {
    return this.exchangeName != null;
  }

  public void setExchangeNameIsSet(boolean value) {
    if (!value) {
      this.exchangeName = null;
    }
  }

  public int getCommodityAbilitiesSize() {
    return (this.commodityAbilities == null) ? 0 : this.commodityAbilities.size();
  }

  public java.util.Iterator<CommodityRegisterAbility> getCommodityAbilitiesIterator() {
    return (this.commodityAbilities == null) ? null : this.commodityAbilities.iterator();
  }

  public void addToCommodityAbilities(CommodityRegisterAbility elem) {
    if (this.commodityAbilities == null) {
      this.commodityAbilities = new ArrayList<CommodityRegisterAbility>();
    }
    this.commodityAbilities.add(elem);
  }

  public List<CommodityRegisterAbility> getCommodityAbilities() {
    return this.commodityAbilities;
  }

  public ExchangeRegisterAbility setCommodityAbilities(List<CommodityRegisterAbility> commodityAbilities) {
    this.commodityAbilities = commodityAbilities;
    return this;
  }

  public void unsetCommodityAbilities() {
    this.commodityAbilities = null;
  }

  /** Returns true if field commodityAbilities is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityAbilities() {
    return this.commodityAbilities != null;
  }

  public void setCommodityAbilitiesIsSet(boolean value) {
    if (!value) {
      this.commodityAbilities = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((Long)value);
      }
      break;

    case SLED_EXCHANGE_ID:
      if (value == null) {
        unsetSledExchangeId();
      } else {
        setSledExchangeId((Integer)value);
      }
      break;

    case SUPPORT_TYPE:
      if (value == null) {
        unsetSupportType();
      } else {
        setSupportType((xueqiao.quotation.account.thriftapi.SupportType)value);
      }
      break;

    case EXCHANGE_NAME:
      if (value == null) {
        unsetExchangeName();
      } else {
        setExchangeName((String)value);
      }
      break;

    case COMMODITY_ABILITIES:
      if (value == null) {
        unsetCommodityAbilities();
      } else {
        setCommodityAbilities((List<CommodityRegisterAbility>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_ID:
      return Long.valueOf(getAccountId());

    case SLED_EXCHANGE_ID:
      return Integer.valueOf(getSledExchangeId());

    case SUPPORT_TYPE:
      return getSupportType();

    case EXCHANGE_NAME:
      return getExchangeName();

    case COMMODITY_ABILITIES:
      return getCommodityAbilities();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_ID:
      return isSetAccountId();
    case SLED_EXCHANGE_ID:
      return isSetSledExchangeId();
    case SUPPORT_TYPE:
      return isSetSupportType();
    case EXCHANGE_NAME:
      return isSetExchangeName();
    case COMMODITY_ABILITIES:
      return isSetCommodityAbilities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExchangeRegisterAbility)
      return this.equals((ExchangeRegisterAbility)that);
    return false;
  }

  public boolean equals(ExchangeRegisterAbility that) {
    if (that == null)
      return false;

    boolean this_present_accountId = true && this.isSetAccountId();
    boolean that_present_accountId = true && that.isSetAccountId();
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (this.accountId != that.accountId)
        return false;
    }

    boolean this_present_sledExchangeId = true && this.isSetSledExchangeId();
    boolean that_present_sledExchangeId = true && that.isSetSledExchangeId();
    if (this_present_sledExchangeId || that_present_sledExchangeId) {
      if (!(this_present_sledExchangeId && that_present_sledExchangeId))
        return false;
      if (this.sledExchangeId != that.sledExchangeId)
        return false;
    }

    boolean this_present_supportType = true && this.isSetSupportType();
    boolean that_present_supportType = true && that.isSetSupportType();
    if (this_present_supportType || that_present_supportType) {
      if (!(this_present_supportType && that_present_supportType))
        return false;
      if (!this.supportType.equals(that.supportType))
        return false;
    }

    boolean this_present_exchangeName = true && this.isSetExchangeName();
    boolean that_present_exchangeName = true && that.isSetExchangeName();
    if (this_present_exchangeName || that_present_exchangeName) {
      if (!(this_present_exchangeName && that_present_exchangeName))
        return false;
      if (!this.exchangeName.equals(that.exchangeName))
        return false;
    }

    boolean this_present_commodityAbilities = true && this.isSetCommodityAbilities();
    boolean that_present_commodityAbilities = true && that.isSetCommodityAbilities();
    if (this_present_commodityAbilities || that_present_commodityAbilities) {
      if (!(this_present_commodityAbilities && that_present_commodityAbilities))
        return false;
      if (!this.commodityAbilities.equals(that.commodityAbilities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ExchangeRegisterAbility other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(other.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, other.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledExchangeId()).compareTo(other.isSetSledExchangeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeId, other.sledExchangeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportType()).compareTo(other.isSetSupportType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportType, other.supportType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeName()).compareTo(other.isSetExchangeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeName, other.exchangeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityAbilities()).compareTo(other.isSetCommodityAbilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityAbilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityAbilities, other.commodityAbilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExchangeRegisterAbility(");
    boolean first = true;

    if (isSetAccountId()) {
      sb.append("accountId:");
      sb.append(this.accountId);
      first = false;
    }
    if (isSetSledExchangeId()) {
      if (!first) sb.append(", ");
      sb.append("sledExchangeId:");
      sb.append(this.sledExchangeId);
      first = false;
    }
    if (isSetSupportType()) {
      if (!first) sb.append(", ");
      sb.append("supportType:");
      if (this.supportType == null) {
        sb.append("null");
      } else {
        sb.append(this.supportType);
      }
      first = false;
    }
    if (isSetExchangeName()) {
      if (!first) sb.append(", ");
      sb.append("exchangeName:");
      if (this.exchangeName == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeName);
      }
      first = false;
    }
    if (isSetCommodityAbilities()) {
      if (!first) sb.append(", ");
      sb.append("commodityAbilities:");
      if (this.commodityAbilities == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityAbilities);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExchangeRegisterAbilityStandardSchemeFactory implements SchemeFactory {
    public ExchangeRegisterAbilityStandardScheme getScheme() {
      return new ExchangeRegisterAbilityStandardScheme();
    }
  }

  private static class ExchangeRegisterAbilityStandardScheme extends StandardScheme<ExchangeRegisterAbility> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExchangeRegisterAbility struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accountId = iprot.readI64();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledExchangeId = iprot.readI32();
              struct.setSledExchangeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUPPORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.supportType = xueqiao.quotation.account.thriftapi.SupportType.findByValue(iprot.readI32());
              struct.setSupportTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXCHANGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeName = iprot.readString();
              struct.setExchangeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMODITY_ABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                struct.commodityAbilities = new ArrayList<CommodityRegisterAbility>(_list84.size);
                for (int _i85 = 0; _i85 < _list84.size; ++_i85)
                {
                  CommodityRegisterAbility _elem86;
                  _elem86 = new CommodityRegisterAbility();
                  _elem86.read(iprot);
                  struct.commodityAbilities.add(_elem86);
                }
                iprot.readListEnd();
              }
              struct.setCommodityAbilitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExchangeRegisterAbility struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAccountId()) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.accountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledExchangeId()) {
        oprot.writeFieldBegin(SLED_EXCHANGE_ID_FIELD_DESC);
        oprot.writeI32(struct.sledExchangeId);
        oprot.writeFieldEnd();
      }
      if (struct.supportType != null) {
        if (struct.isSetSupportType()) {
          oprot.writeFieldBegin(SUPPORT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.supportType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeName != null) {
        if (struct.isSetExchangeName()) {
          oprot.writeFieldBegin(EXCHANGE_NAME_FIELD_DESC);
          oprot.writeString(struct.exchangeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityAbilities != null) {
        if (struct.isSetCommodityAbilities()) {
          oprot.writeFieldBegin(COMMODITY_ABILITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commodityAbilities.size()));
            for (CommodityRegisterAbility _iter87 : struct.commodityAbilities)
            {
              _iter87.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExchangeRegisterAbilityTupleSchemeFactory implements SchemeFactory {
    public ExchangeRegisterAbilityTupleScheme getScheme() {
      return new ExchangeRegisterAbilityTupleScheme();
    }
  }

  private static class ExchangeRegisterAbilityTupleScheme extends TupleScheme<ExchangeRegisterAbility> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExchangeRegisterAbility struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetSledExchangeId()) {
        optionals.set(1);
      }
      if (struct.isSetSupportType()) {
        optionals.set(2);
      }
      if (struct.isSetExchangeName()) {
        optionals.set(3);
      }
      if (struct.isSetCommodityAbilities()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAccountId()) {
        oprot.writeI64(struct.accountId);
      }
      if (struct.isSetSledExchangeId()) {
        oprot.writeI32(struct.sledExchangeId);
      }
      if (struct.isSetSupportType()) {
        oprot.writeI32(struct.supportType.getValue());
      }
      if (struct.isSetExchangeName()) {
        oprot.writeString(struct.exchangeName);
      }
      if (struct.isSetCommodityAbilities()) {
        {
          oprot.writeI32(struct.commodityAbilities.size());
          for (CommodityRegisterAbility _iter88 : struct.commodityAbilities)
          {
            _iter88.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExchangeRegisterAbility struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.accountId = iprot.readI64();
        struct.setAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledExchangeId = iprot.readI32();
        struct.setSledExchangeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.supportType = xueqiao.quotation.account.thriftapi.SupportType.findByValue(iprot.readI32());
        struct.setSupportTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangeName = iprot.readString();
        struct.setExchangeNameIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.commodityAbilities = new ArrayList<CommodityRegisterAbility>(_list89.size);
          for (int _i90 = 0; _i90 < _list89.size; ++_i90)
          {
            CommodityRegisterAbility _elem91;
            _elem91 = new CommodityRegisterAbility();
            _elem91.read(iprot);
            struct.commodityAbilities.add(_elem91);
          }
        }
        struct.setCommodityAbilitiesIsSet(true);
      }
    }
  }

}

