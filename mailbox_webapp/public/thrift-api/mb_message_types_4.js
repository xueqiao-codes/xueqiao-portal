//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


MType = {
'TYPE_XUEQIAO_NOTICE' : 0,
'TYPE_SYSTEM_NOTICE' : 1,
'TYPE_EXCHANGE_NOTICE' : 2,
'TYPE_MARKETING_PROMOTION' : 3
};
MLevel = {
'LEVEL_LOW' : 0,
'LEVEL_MEDIUM' : 10,
'LEVEL_HIGH' : 20
};
MessageContent = function(args) {
  this.type = null;
  this.level = null;
  this.title = null;
  this.summary = null;
  this.content = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.summary !== undefined) {
      this.summary = args.summary;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
MessageContent.prototype = {};
MessageContent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.summary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageContent.prototype.write = function(output) {
  output.writeStructBegin('MessageContent');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 2);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 10);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRING, 11);
    output.writeString(this.summary);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 12);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MESSAGE_ENV_VARIABLE_COMPANY_NAME = '{{companyName}}';
MESSAGE_ENV_VARIABLE_COMPANY_CODE = '{{companyCode}}';
MESSAGE_ENV_VARIABLE_GROUP_NAME = '{{groupName}}';
MESSAGE_ENV_VARIABLE_USER_NAME = '{{userName}}';
