//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


MBMessagePage = function(args) {
  this.totalNum = null;
  this.messageList = null;
  if (args) {
    if (args.totalNum !== undefined) {
      this.totalNum = args.totalNum;
    }
    if (args.messageList !== undefined) {
      this.messageList = args.messageList;
    }
  }
};
MBMessagePage.prototype = {};
MBMessagePage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.messageList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new MBMessage();
          elem6.read(input);
          this.messageList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MBMessagePage.prototype.write = function(output) {
  output.writeStructBegin('MBMessagePage');
  if (this.totalNum !== null && this.totalNum !== undefined) {
    output.writeFieldBegin('totalNum', Thrift.Type.I32, 1);
    output.writeI32(this.totalNum);
    output.writeFieldEnd();
  }
  if (this.messageList !== null && this.messageList !== undefined) {
    output.writeFieldBegin('messageList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.messageList.length);
    for (var iter7 in this.messageList)
    {
      if (this.messageList.hasOwnProperty(iter7))
      {
        iter7 = this.messageList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryMBMessageOption = function(args) {
  this.mbmIdSet = null;
  this.statusList = null;
  if (args) {
    if (args.mbmIdSet !== undefined) {
      this.mbmIdSet = args.mbmIdSet;
    }
    if (args.statusList !== undefined) {
      this.statusList = args.statusList;
    }
  }
};
QueryMBMessageOption.prototype = {};
QueryMBMessageOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size8 = 0;
        var _rtmp312;
        this.mbmIdSet = [];
        var _etype11 = 0;
        _rtmp312 = input.readSetBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI64().value;
          this.mbmIdSet.push(elem14);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size15 = 0;
        var _rtmp319;
        this.statusList = [];
        var _etype18 = 0;
        _rtmp319 = input.readSetBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readI32().value;
          this.statusList.push(elem21);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryMBMessageOption.prototype.write = function(output) {
  output.writeStructBegin('QueryMBMessageOption');
  if (this.mbmIdSet !== null && this.mbmIdSet !== undefined) {
    output.writeFieldBegin('mbmIdSet', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I64, this.mbmIdSet.length);
    for (var iter22 in this.mbmIdSet)
    {
      if (this.mbmIdSet.hasOwnProperty(iter22))
      {
        iter22 = this.mbmIdSet[iter22];
        output.writeI64(iter22);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.statusList !== null && this.statusList !== undefined) {
    output.writeFieldBegin('statusList', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.statusList.length);
    for (var iter23 in this.statusList)
    {
      if (this.statusList.hasOwnProperty(iter23))
      {
        iter23 = this.statusList[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MBMessageTemplatePage = function(args) {
  this.totalNum = null;
  this.templateList = null;
  if (args) {
    if (args.totalNum !== undefined) {
      this.totalNum = args.totalNum;
    }
    if (args.templateList !== undefined) {
      this.templateList = args.templateList;
    }
  }
};
MBMessageTemplatePage.prototype = {};
MBMessageTemplatePage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.templateList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new MBMessageTemplate();
          elem30.read(input);
          this.templateList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MBMessageTemplatePage.prototype.write = function(output) {
  output.writeStructBegin('MBMessageTemplatePage');
  if (this.totalNum !== null && this.totalNum !== undefined) {
    output.writeFieldBegin('totalNum', Thrift.Type.I32, 1);
    output.writeI32(this.totalNum);
    output.writeFieldEnd();
  }
  if (this.templateList !== null && this.templateList !== undefined) {
    output.writeFieldBegin('templateList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.templateList.length);
    for (var iter31 in this.templateList)
    {
      if (this.templateList.hasOwnProperty(iter31))
      {
        iter31 = this.templateList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryMBMessageTemplateOption = function(args) {
  this.templateIdSet = null;
  this.templateNamePartial = null;
  this.channel = null;
  this.type = null;
  this.level = null;
  if (args) {
    if (args.templateIdSet !== undefined) {
      this.templateIdSet = args.templateIdSet;
    }
    if (args.templateNamePartial !== undefined) {
      this.templateNamePartial = args.templateNamePartial;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
  }
};
QueryMBMessageTemplateOption.prototype = {};
QueryMBMessageTemplateOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size32 = 0;
        var _rtmp336;
        this.templateIdSet = [];
        var _etype35 = 0;
        _rtmp336 = input.readSetBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI64().value;
          this.templateIdSet.push(elem38);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.templateNamePartial = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.channel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryMBMessageTemplateOption.prototype.write = function(output) {
  output.writeStructBegin('QueryMBMessageTemplateOption');
  if (this.templateIdSet !== null && this.templateIdSet !== undefined) {
    output.writeFieldBegin('templateIdSet', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I64, this.templateIdSet.length);
    for (var iter39 in this.templateIdSet)
    {
      if (this.templateIdSet.hasOwnProperty(iter39))
      {
        iter39 = this.templateIdSet[iter39];
        output.writeI64(iter39);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.templateNamePartial !== null && this.templateNamePartial !== undefined) {
    output.writeFieldBegin('templateNamePartial', Thrift.Type.STRING, 2);
    output.writeString(this.templateNamePartial);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.I32, 3);
    output.writeI32(this.channel);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 5);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MBMessageJobPage = function(args) {
  this.totalNum = null;
  this.messageJobList = null;
  if (args) {
    if (args.totalNum !== undefined) {
      this.totalNum = args.totalNum;
    }
    if (args.messageJobList !== undefined) {
      this.messageJobList = args.messageJobList;
    }
  }
};
MBMessageJobPage.prototype = {};
MBMessageJobPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.messageJobList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new MBMessageJob();
          elem46.read(input);
          this.messageJobList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MBMessageJobPage.prototype.write = function(output) {
  output.writeStructBegin('MBMessageJobPage');
  if (this.totalNum !== null && this.totalNum !== undefined) {
    output.writeFieldBegin('totalNum', Thrift.Type.I32, 1);
    output.writeI32(this.totalNum);
    output.writeFieldEnd();
  }
  if (this.messageJobList !== null && this.messageJobList !== undefined) {
    output.writeFieldBegin('messageJobList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.messageJobList.length);
    for (var iter47 in this.messageJobList)
    {
      if (this.messageJobList.hasOwnProperty(iter47))
      {
        iter47 = this.messageJobList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryMBMessageJobOption = function(args) {
  this.jobIdSet = null;
  this.channel = null;
  this.type = null;
  this.level = null;
  this.queryStartCreateTimestamp = null;
  this.queryEndCreateTimestamp = null;
  this.statusSet = null;
  if (args) {
    if (args.jobIdSet !== undefined) {
      this.jobIdSet = args.jobIdSet;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.queryStartCreateTimestamp !== undefined) {
      this.queryStartCreateTimestamp = args.queryStartCreateTimestamp;
    }
    if (args.queryEndCreateTimestamp !== undefined) {
      this.queryEndCreateTimestamp = args.queryEndCreateTimestamp;
    }
    if (args.statusSet !== undefined) {
      this.statusSet = args.statusSet;
    }
  }
};
QueryMBMessageJobOption.prototype = {};
QueryMBMessageJobOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size48 = 0;
        var _rtmp352;
        this.jobIdSet = [];
        var _etype51 = 0;
        _rtmp352 = input.readSetBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readI64().value;
          this.jobIdSet.push(elem54);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.channel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.queryStartCreateTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.queryEndCreateTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size55 = 0;
        var _rtmp359;
        this.statusSet = [];
        var _etype58 = 0;
        _rtmp359 = input.readSetBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = input.readI32().value;
          this.statusSet.push(elem61);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryMBMessageJobOption.prototype.write = function(output) {
  output.writeStructBegin('QueryMBMessageJobOption');
  if (this.jobIdSet !== null && this.jobIdSet !== undefined) {
    output.writeFieldBegin('jobIdSet', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I64, this.jobIdSet.length);
    for (var iter62 in this.jobIdSet)
    {
      if (this.jobIdSet.hasOwnProperty(iter62))
      {
        iter62 = this.jobIdSet[iter62];
        output.writeI64(iter62);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.I32, 2);
    output.writeI32(this.channel);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 4);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.queryStartCreateTimestamp !== null && this.queryStartCreateTimestamp !== undefined) {
    output.writeFieldBegin('queryStartCreateTimestamp', Thrift.Type.I64, 5);
    output.writeI64(this.queryStartCreateTimestamp);
    output.writeFieldEnd();
  }
  if (this.queryEndCreateTimestamp !== null && this.queryEndCreateTimestamp !== undefined) {
    output.writeFieldBegin('queryEndCreateTimestamp', Thrift.Type.I64, 6);
    output.writeI64(this.queryEndCreateTimestamp);
    output.writeFieldEnd();
  }
  if (this.statusSet !== null && this.statusSet !== undefined) {
    output.writeFieldBegin('statusSet', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.I32, this.statusSet.length);
    for (var iter63 in this.statusSet)
    {
      if (this.statusSet.hasOwnProperty(iter63))
      {
        iter63 = this.statusSet[iter63];
        output.writeI32(iter63);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

