//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


MSendingPolicy = {
'MSP_NOW' : 0,
'MSP_FIXED_TIME' : 1,
'MSP_REPEAT' : 2
};
MSendingChannel = {
'MSC_MAIL' : 1,
'MSC_SMS' : 2,
'MSC_HOSTING' : 4
};
MStatus = {
'MS_VALID' : 0,
'MS_SENDING' : 1,
'MS_PAUSE' : 2,
'MS_COMPLETED' : 10
};
MJStatus = {
'MJS_SENDING' : 0,
'MJS_COMPLETED' : 1,
'MJS_EXCEPTION_STOP' : 2,
'MJS_NETWORK_ERROR_RETRY' : 3,
'MJS_NETWORK_ERROR_STOP' : 4
};
MSendingTimeRepeatUnit = {
'MSTRU_INFINITE' : 0,
'MSTRU_DAY' : 1,
'MSTRU_WEEK' : 2,
'MSTRU_MONTH' : 3
};
HostingUserRole = {
'TRADER' : 1,
'ADMIN' : 2
};
MSendingTimeRule = function(args) {
  this.mbmId = null;
  this.mbStartTime = null;
  this.repeatUnit = null;
  this.repeatCount = null;
  this.dayTimeList = null;
  this.unitTimeList = null;
  if (args) {
    if (args.mbmId !== undefined) {
      this.mbmId = args.mbmId;
    }
    if (args.mbStartTime !== undefined) {
      this.mbStartTime = args.mbStartTime;
    }
    if (args.repeatUnit !== undefined) {
      this.repeatUnit = args.repeatUnit;
    }
    if (args.repeatCount !== undefined) {
      this.repeatCount = args.repeatCount;
    }
    if (args.dayTimeList !== undefined) {
      this.dayTimeList = args.dayTimeList;
    }
    if (args.unitTimeList !== undefined) {
      this.unitTimeList = args.unitTimeList;
    }
  }
};
MSendingTimeRule.prototype = {};
MSendingTimeRule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mbmId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.mbStartTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.repeatUnit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.repeatCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.dayTimeList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64().value;
          this.dayTimeList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.unitTimeList = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI32().value;
          this.unitTimeList.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MSendingTimeRule.prototype.write = function(output) {
  output.writeStructBegin('MSendingTimeRule');
  if (this.mbmId !== null && this.mbmId !== undefined) {
    output.writeFieldBegin('mbmId', Thrift.Type.I64, 1);
    output.writeI64(this.mbmId);
    output.writeFieldEnd();
  }
  if (this.mbStartTime !== null && this.mbStartTime !== undefined) {
    output.writeFieldBegin('mbStartTime', Thrift.Type.I64, 2);
    output.writeI64(this.mbStartTime);
    output.writeFieldEnd();
  }
  if (this.repeatUnit !== null && this.repeatUnit !== undefined) {
    output.writeFieldBegin('repeatUnit', Thrift.Type.I32, 3);
    output.writeI32(this.repeatUnit);
    output.writeFieldEnd();
  }
  if (this.repeatCount !== null && this.repeatCount !== undefined) {
    output.writeFieldBegin('repeatCount', Thrift.Type.I32, 4);
    output.writeI32(this.repeatCount);
    output.writeFieldEnd();
  }
  if (this.dayTimeList !== null && this.dayTimeList !== undefined) {
    output.writeFieldBegin('dayTimeList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.dayTimeList.length);
    for (var iter14 in this.dayTimeList)
    {
      if (this.dayTimeList.hasOwnProperty(iter14))
      {
        iter14 = this.dayTimeList[iter14];
        output.writeI64(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unitTimeList !== null && this.unitTimeList !== undefined) {
    output.writeFieldBegin('unitTimeList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.unitTimeList.length);
    for (var iter15 in this.unitTimeList)
    {
      if (this.unitTimeList.hasOwnProperty(iter15))
      {
        iter15 = this.unitTimeList[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MReceiverSms = function(args) {
  this.mbmId = null;
  this.tel = null;
  if (args) {
    if (args.mbmId !== undefined) {
      this.mbmId = args.mbmId;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
  }
};
MReceiverSms.prototype = {};
MReceiverSms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mbmId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MReceiverSms.prototype.write = function(output) {
  output.writeStructBegin('MReceiverSms');
  if (this.mbmId !== null && this.mbmId !== undefined) {
    output.writeFieldBegin('mbmId', Thrift.Type.I64, 1);
    output.writeI64(this.mbmId);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 2);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MReceiverMail = function(args) {
  this.mbmId = null;
  this.mail = null;
  if (args) {
    if (args.mbmId !== undefined) {
      this.mbmId = args.mbmId;
    }
    if (args.mail !== undefined) {
      this.mail = args.mail;
    }
  }
};
MReceiverMail.prototype = {};
MReceiverMail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mbmId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MReceiverMail.prototype.write = function(output) {
  output.writeStructBegin('MReceiverMail');
  if (this.mbmId !== null && this.mbmId !== undefined) {
    output.writeFieldBegin('mbmId', Thrift.Type.I64, 1);
    output.writeI64(this.mbmId);
    output.writeFieldEnd();
  }
  if (this.mail !== null && this.mail !== undefined) {
    output.writeFieldBegin('mail', Thrift.Type.STRING, 2);
    output.writeString(this.mail);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MReceiverHosting = function(args) {
  this.mbmId = null;
  this.companyId = null;
  this.groupId = null;
  this.roleList = null;
  if (args) {
    if (args.mbmId !== undefined) {
      this.mbmId = args.mbmId;
    }
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
    if (args.roleList !== undefined) {
      this.roleList = args.roleList;
    }
  }
};
MReceiverHosting.prototype = {};
MReceiverHosting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mbmId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.companyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.groupId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.roleList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI32().value;
          this.roleList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MReceiverHosting.prototype.write = function(output) {
  output.writeStructBegin('MReceiverHosting');
  if (this.mbmId !== null && this.mbmId !== undefined) {
    output.writeFieldBegin('mbmId', Thrift.Type.I64, 1);
    output.writeI64(this.mbmId);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I64, 2);
    output.writeI64(this.companyId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I64, 3);
    output.writeI64(this.groupId);
    output.writeFieldEnd();
  }
  if (this.roleList !== null && this.roleList !== undefined) {
    output.writeFieldBegin('roleList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.roleList.length);
    for (var iter23 in this.roleList)
    {
      if (this.roleList.hasOwnProperty(iter23))
      {
        iter23 = this.roleList[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MBMessage = function(args) {
  this.mbmId = null;
  this.policy = null;
  this.channelList = null;
  this.smsList = null;
  this.mailList = null;
  this.hostingList = null;
  this.timeRule = null;
  this.content = null;
  this.status = null;
  this.operator = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  if (args) {
    if (args.mbmId !== undefined) {
      this.mbmId = args.mbmId;
    }
    if (args.policy !== undefined) {
      this.policy = args.policy;
    }
    if (args.channelList !== undefined) {
      this.channelList = args.channelList;
    }
    if (args.smsList !== undefined) {
      this.smsList = args.smsList;
    }
    if (args.mailList !== undefined) {
      this.mailList = args.mailList;
    }
    if (args.hostingList !== undefined) {
      this.hostingList = args.hostingList;
    }
    if (args.timeRule !== undefined) {
      this.timeRule = args.timeRule;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.operator !== undefined) {
      this.operator = args.operator;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
  }
};
MBMessage.prototype = {};
MBMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mbmId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.policy = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.channelList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32().value;
          this.channelList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.smsList = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new MReceiverSms();
          elem37.read(input);
          this.smsList.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.mailList = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = new MReceiverMail();
          elem44.read(input);
          this.mailList.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size45 = 0;
        var _rtmp349;
        this.hostingList = [];
        var _etype48 = 0;
        _rtmp349 = input.readListBegin();
        _etype48 = _rtmp349.etype;
        _size45 = _rtmp349.size;
        for (var _i50 = 0; _i50 < _size45; ++_i50)
        {
          var elem51 = null;
          elem51 = new MReceiverHosting();
          elem51.read(input);
          this.hostingList.push(elem51);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeRule = new MSendingTimeRule();
        this.timeRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.content = new MessageContent();
        this.content.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.operator = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MBMessage.prototype.write = function(output) {
  output.writeStructBegin('MBMessage');
  if (this.mbmId !== null && this.mbmId !== undefined) {
    output.writeFieldBegin('mbmId', Thrift.Type.I64, 1);
    output.writeI64(this.mbmId);
    output.writeFieldEnd();
  }
  if (this.policy !== null && this.policy !== undefined) {
    output.writeFieldBegin('policy', Thrift.Type.I32, 2);
    output.writeI32(this.policy);
    output.writeFieldEnd();
  }
  if (this.channelList !== null && this.channelList !== undefined) {
    output.writeFieldBegin('channelList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.channelList.length);
    for (var iter52 in this.channelList)
    {
      if (this.channelList.hasOwnProperty(iter52))
      {
        iter52 = this.channelList[iter52];
        output.writeI32(iter52);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.smsList !== null && this.smsList !== undefined) {
    output.writeFieldBegin('smsList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.smsList.length);
    for (var iter53 in this.smsList)
    {
      if (this.smsList.hasOwnProperty(iter53))
      {
        iter53 = this.smsList[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mailList !== null && this.mailList !== undefined) {
    output.writeFieldBegin('mailList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.mailList.length);
    for (var iter54 in this.mailList)
    {
      if (this.mailList.hasOwnProperty(iter54))
      {
        iter54 = this.mailList[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hostingList !== null && this.hostingList !== undefined) {
    output.writeFieldBegin('hostingList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.hostingList.length);
    for (var iter55 in this.hostingList)
    {
      if (this.hostingList.hasOwnProperty(iter55))
      {
        iter55 = this.hostingList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeRule !== null && this.timeRule !== undefined) {
    output.writeFieldBegin('timeRule', Thrift.Type.STRUCT, 7);
    this.timeRule.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRUCT, 8);
    this.content.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 9);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.STRING, 10);
    output.writeString(this.operator);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 40);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 41);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MBMessageTemplate = function(args) {
  this.templateId = null;
  this.policy = null;
  this.channelList = null;
  this.smsList = null;
  this.mailList = null;
  this.hostingList = null;
  this.timeRule = null;
  this.content = null;
  this.templateName = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  if (args) {
    if (args.templateId !== undefined) {
      this.templateId = args.templateId;
    }
    if (args.policy !== undefined) {
      this.policy = args.policy;
    }
    if (args.channelList !== undefined) {
      this.channelList = args.channelList;
    }
    if (args.smsList !== undefined) {
      this.smsList = args.smsList;
    }
    if (args.mailList !== undefined) {
      this.mailList = args.mailList;
    }
    if (args.hostingList !== undefined) {
      this.hostingList = args.hostingList;
    }
    if (args.timeRule !== undefined) {
      this.timeRule = args.timeRule;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.templateName !== undefined) {
      this.templateName = args.templateName;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
  }
};
MBMessageTemplate.prototype = {};
MBMessageTemplate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.templateId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.policy = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.channelList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readI32().value;
          this.channelList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.smsList = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new MReceiverSms();
          elem69.read(input);
          this.smsList.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.mailList = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new MReceiverMail();
          elem76.read(input);
          this.mailList.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size77 = 0;
        var _rtmp381;
        this.hostingList = [];
        var _etype80 = 0;
        _rtmp381 = input.readListBegin();
        _etype80 = _rtmp381.etype;
        _size77 = _rtmp381.size;
        for (var _i82 = 0; _i82 < _size77; ++_i82)
        {
          var elem83 = null;
          elem83 = new MReceiverHosting();
          elem83.read(input);
          this.hostingList.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeRule = new MSendingTimeRule();
        this.timeRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.content = new MessageContent();
        this.content.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.templateName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MBMessageTemplate.prototype.write = function(output) {
  output.writeStructBegin('MBMessageTemplate');
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.I64, 1);
    output.writeI64(this.templateId);
    output.writeFieldEnd();
  }
  if (this.policy !== null && this.policy !== undefined) {
    output.writeFieldBegin('policy', Thrift.Type.I32, 2);
    output.writeI32(this.policy);
    output.writeFieldEnd();
  }
  if (this.channelList !== null && this.channelList !== undefined) {
    output.writeFieldBegin('channelList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.channelList.length);
    for (var iter84 in this.channelList)
    {
      if (this.channelList.hasOwnProperty(iter84))
      {
        iter84 = this.channelList[iter84];
        output.writeI32(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.smsList !== null && this.smsList !== undefined) {
    output.writeFieldBegin('smsList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.smsList.length);
    for (var iter85 in this.smsList)
    {
      if (this.smsList.hasOwnProperty(iter85))
      {
        iter85 = this.smsList[iter85];
        iter85.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mailList !== null && this.mailList !== undefined) {
    output.writeFieldBegin('mailList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.mailList.length);
    for (var iter86 in this.mailList)
    {
      if (this.mailList.hasOwnProperty(iter86))
      {
        iter86 = this.mailList[iter86];
        iter86.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hostingList !== null && this.hostingList !== undefined) {
    output.writeFieldBegin('hostingList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.hostingList.length);
    for (var iter87 in this.hostingList)
    {
      if (this.hostingList.hasOwnProperty(iter87))
      {
        iter87 = this.hostingList[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeRule !== null && this.timeRule !== undefined) {
    output.writeFieldBegin('timeRule', Thrift.Type.STRUCT, 7);
    this.timeRule.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRUCT, 8);
    this.content.write(output);
    output.writeFieldEnd();
  }
  if (this.templateName !== null && this.templateName !== undefined) {
    output.writeFieldBegin('templateName', Thrift.Type.STRING, 9);
    output.writeString(this.templateName);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 40);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 41);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MBMessageJob = function(args) {
  this.jobId = null;
  this.mbmId = null;
  this.channelList = null;
  this.smsList = null;
  this.mailList = null;
  this.hostingList = null;
  this.content = null;
  this.status = null;
  this.errorDescription = null;
  this.operator = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  if (args) {
    if (args.jobId !== undefined) {
      this.jobId = args.jobId;
    }
    if (args.mbmId !== undefined) {
      this.mbmId = args.mbmId;
    }
    if (args.channelList !== undefined) {
      this.channelList = args.channelList;
    }
    if (args.smsList !== undefined) {
      this.smsList = args.smsList;
    }
    if (args.mailList !== undefined) {
      this.mailList = args.mailList;
    }
    if (args.hostingList !== undefined) {
      this.hostingList = args.hostingList;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.errorDescription !== undefined) {
      this.errorDescription = args.errorDescription;
    }
    if (args.operator !== undefined) {
      this.operator = args.operator;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
  }
};
MBMessageJob.prototype = {};
MBMessageJob.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.jobId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.mbmId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.channelList = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readI32().value;
          this.channelList.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.smsList = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = new MReceiverSms();
          elem101.read(input);
          this.smsList.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.mailList = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = new MReceiverMail();
          elem108.read(input);
          this.mailList.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size109 = 0;
        var _rtmp3113;
        this.hostingList = [];
        var _etype112 = 0;
        _rtmp3113 = input.readListBegin();
        _etype112 = _rtmp3113.etype;
        _size109 = _rtmp3113.size;
        for (var _i114 = 0; _i114 < _size109; ++_i114)
        {
          var elem115 = null;
          elem115 = new MReceiverHosting();
          elem115.read(input);
          this.hostingList.push(elem115);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.content = new MessageContent();
        this.content.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.errorDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.operator = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MBMessageJob.prototype.write = function(output) {
  output.writeStructBegin('MBMessageJob');
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.I64, 1);
    output.writeI64(this.jobId);
    output.writeFieldEnd();
  }
  if (this.mbmId !== null && this.mbmId !== undefined) {
    output.writeFieldBegin('mbmId', Thrift.Type.I64, 2);
    output.writeI64(this.mbmId);
    output.writeFieldEnd();
  }
  if (this.channelList !== null && this.channelList !== undefined) {
    output.writeFieldBegin('channelList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.channelList.length);
    for (var iter116 in this.channelList)
    {
      if (this.channelList.hasOwnProperty(iter116))
      {
        iter116 = this.channelList[iter116];
        output.writeI32(iter116);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.smsList !== null && this.smsList !== undefined) {
    output.writeFieldBegin('smsList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.smsList.length);
    for (var iter117 in this.smsList)
    {
      if (this.smsList.hasOwnProperty(iter117))
      {
        iter117 = this.smsList[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mailList !== null && this.mailList !== undefined) {
    output.writeFieldBegin('mailList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.mailList.length);
    for (var iter118 in this.mailList)
    {
      if (this.mailList.hasOwnProperty(iter118))
      {
        iter118 = this.mailList[iter118];
        iter118.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hostingList !== null && this.hostingList !== undefined) {
    output.writeFieldBegin('hostingList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.hostingList.length);
    for (var iter119 in this.hostingList)
    {
      if (this.hostingList.hasOwnProperty(iter119))
      {
        iter119 = this.hostingList[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRUCT, 8);
    this.content.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 9);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.errorDescription !== null && this.errorDescription !== undefined) {
    output.writeFieldBegin('errorDescription', Thrift.Type.STRING, 10);
    output.writeString(this.errorDescription);
    output.writeFieldEnd();
  }
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.STRING, 11);
    output.writeString(this.operator);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 40);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 41);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

