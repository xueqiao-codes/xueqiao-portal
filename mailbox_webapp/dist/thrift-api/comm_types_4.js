//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


EClientActionType = {
'CLIENT_HANDLE' : 1,
'LOG' : 2,
'TIPS' : 4,
'TIPS_ABORT' : 5,
'NO_MAPPING' : 6
};
EClientLang = {
'CN' : 1,
'EN' : 2
};
ErrorInfo = function(args) {
  this.errorCode = null;
  this.errorMsg = null;
  this.clientMsg = null;
  this.clientActionType = null;
  if (args) {
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMsg !== undefined) {
      this.errorMsg = args.errorMsg;
    }
    if (args.clientMsg !== undefined) {
      this.clientMsg = args.clientMsg;
    }
    if (args.clientActionType !== undefined) {
      this.clientActionType = args.clientActionType;
    }
  }
};
Thrift.inherits(ErrorInfo, Thrift.TException);
ErrorInfo.prototype.name = 'ErrorInfo';
ErrorInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorMsg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.clientMsg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.clientActionType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ErrorInfo.prototype.write = function(output) {
  output.writeStructBegin('ErrorInfo');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMsg !== null && this.errorMsg !== undefined) {
    output.writeFieldBegin('errorMsg', Thrift.Type.STRING, 2);
    output.writeString(this.errorMsg);
    output.writeFieldEnd();
  }
  if (this.clientMsg !== null && this.clientMsg !== undefined) {
    output.writeFieldBegin('clientMsg', Thrift.Type.STRING, 3);
    output.writeString(this.clientMsg);
    output.writeFieldEnd();
  }
  if (this.clientActionType !== null && this.clientActionType !== undefined) {
    output.writeFieldBegin('clientActionType', Thrift.Type.I32, 4);
    output.writeI32(this.clientActionType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlatformArgs = function(args) {
  this.sourceDesc = null;
  this.sourceIpV4 = null;
  this.remoteAddress = null;
  this.remotePort = null;
  this.xForwardAddress = null;
  this.sourceIp = null;
  this.timeoutMs = null;
  this.clientLang = 1;
  this.extraParams = null;
  if (args) {
    if (args.sourceDesc !== undefined) {
      this.sourceDesc = args.sourceDesc;
    }
    if (args.sourceIpV4 !== undefined) {
      this.sourceIpV4 = args.sourceIpV4;
    }
    if (args.remoteAddress !== undefined) {
      this.remoteAddress = args.remoteAddress;
    }
    if (args.remotePort !== undefined) {
      this.remotePort = args.remotePort;
    }
    if (args.xForwardAddress !== undefined) {
      this.xForwardAddress = args.xForwardAddress;
    }
    if (args.sourceIp !== undefined) {
      this.sourceIp = args.sourceIp;
    }
    if (args.timeoutMs !== undefined) {
      this.timeoutMs = args.timeoutMs;
    }
    if (args.clientLang !== undefined) {
      this.clientLang = args.clientLang;
    }
    if (args.extraParams !== undefined) {
      this.extraParams = args.extraParams;
    }
  }
};
PlatformArgs.prototype = {};
PlatformArgs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceDesc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sourceIpV4 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.remoteAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.remotePort = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.xForwardAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sourceIp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.timeoutMs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.clientLang = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.extraParams = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.extraParams[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlatformArgs.prototype.write = function(output) {
  output.writeStructBegin('PlatformArgs');
  if (this.sourceDesc !== null && this.sourceDesc !== undefined) {
    output.writeFieldBegin('sourceDesc', Thrift.Type.STRING, 1);
    output.writeString(this.sourceDesc);
    output.writeFieldEnd();
  }
  if (this.sourceIpV4 !== null && this.sourceIpV4 !== undefined) {
    output.writeFieldBegin('sourceIpV4', Thrift.Type.I32, 2);
    output.writeI32(this.sourceIpV4);
    output.writeFieldEnd();
  }
  if (this.remoteAddress !== null && this.remoteAddress !== undefined) {
    output.writeFieldBegin('remoteAddress', Thrift.Type.STRING, 3);
    output.writeString(this.remoteAddress);
    output.writeFieldEnd();
  }
  if (this.remotePort !== null && this.remotePort !== undefined) {
    output.writeFieldBegin('remotePort', Thrift.Type.I32, 4);
    output.writeI32(this.remotePort);
    output.writeFieldEnd();
  }
  if (this.xForwardAddress !== null && this.xForwardAddress !== undefined) {
    output.writeFieldBegin('xForwardAddress', Thrift.Type.STRING, 5);
    output.writeString(this.xForwardAddress);
    output.writeFieldEnd();
  }
  if (this.sourceIp !== null && this.sourceIp !== undefined) {
    output.writeFieldBegin('sourceIp', Thrift.Type.STRING, 6);
    output.writeString(this.sourceIp);
    output.writeFieldEnd();
  }
  if (this.timeoutMs !== null && this.timeoutMs !== undefined) {
    output.writeFieldBegin('timeoutMs', Thrift.Type.I32, 7);
    output.writeI32(this.timeoutMs);
    output.writeFieldEnd();
  }
  if (this.clientLang !== null && this.clientLang !== undefined) {
    output.writeFieldBegin('clientLang', Thrift.Type.I32, 8);
    output.writeI32(this.clientLang);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraParams));
    for (var kiter8 in this.extraParams)
    {
      if (this.extraParams.hasOwnProperty(kiter8))
      {
        var viter9 = this.extraParams[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

