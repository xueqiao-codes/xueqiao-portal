/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.mailbox.thriftdata.req;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 信箱消息模板页
 */
public class MBMessageTemplatePage implements org.apache.thrift.TBase<MBMessageTemplatePage, MBMessageTemplatePage._Fields>, java.io.Serializable, Cloneable, Comparable<MBMessageTemplatePage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MBMessageTemplatePage");

  private static final org.apache.thrift.protocol.TField TOTAL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("templateList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MBMessageTemplatePageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MBMessageTemplatePageTupleSchemeFactory());
  }

  public int totalNum; // optional
  public List<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate> templateList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_NUM((short)1, "totalNum"),
    TEMPLATE_LIST((short)2, "templateList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_NUM
          return TOTAL_NUM;
        case 2: // TEMPLATE_LIST
          return TEMPLATE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TOTAL_NUM,_Fields.TEMPLATE_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_LIST, new org.apache.thrift.meta_data.FieldMetaData("templateList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.mailbox.thriftdata.mb.MBMessageTemplate.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MBMessageTemplatePage.class, metaDataMap);
  }

  public MBMessageTemplatePage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MBMessageTemplatePage(MBMessageTemplatePage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalNum = other.totalNum;
    if (other.isSetTemplateList()) {
      List<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate> __this__templateList = new ArrayList<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate>(other.templateList.size());
      for (xueqiao.mailbox.thriftdata.mb.MBMessageTemplate other_element : other.templateList) {
        __this__templateList.add(new xueqiao.mailbox.thriftdata.mb.MBMessageTemplate(other_element));
      }
      this.templateList = __this__templateList;
    }
  }

  public MBMessageTemplatePage deepCopy() {
    return new MBMessageTemplatePage(this);
  }

  @Override
  public void clear() {
    setTotalNumIsSet(false);
    this.totalNum = 0;
    this.templateList = null;
  }

  public int getTotalNum() {
    return this.totalNum;
  }

  public MBMessageTemplatePage setTotalNum(int totalNum) {
    this.totalNum = totalNum;
    setTotalNumIsSet(true);
    return this;
  }

  public void unsetTotalNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALNUM_ISSET_ID);
  }

  /** Returns true if field totalNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALNUM_ISSET_ID);
  }

  public void setTotalNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALNUM_ISSET_ID, value);
  }

  public int getTemplateListSize() {
    return (this.templateList == null) ? 0 : this.templateList.size();
  }

  public java.util.Iterator<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate> getTemplateListIterator() {
    return (this.templateList == null) ? null : this.templateList.iterator();
  }

  public void addToTemplateList(xueqiao.mailbox.thriftdata.mb.MBMessageTemplate elem) {
    if (this.templateList == null) {
      this.templateList = new ArrayList<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate>();
    }
    this.templateList.add(elem);
  }

  public List<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate> getTemplateList() {
    return this.templateList;
  }

  public MBMessageTemplatePage setTemplateList(List<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate> templateList) {
    this.templateList = templateList;
    return this;
  }

  public void unsetTemplateList() {
    this.templateList = null;
  }

  /** Returns true if field templateList is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateList() {
    return this.templateList != null;
  }

  public void setTemplateListIsSet(boolean value) {
    if (!value) {
      this.templateList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_NUM:
      if (value == null) {
        unsetTotalNum();
      } else {
        setTotalNum((Integer)value);
      }
      break;

    case TEMPLATE_LIST:
      if (value == null) {
        unsetTemplateList();
      } else {
        setTemplateList((List<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_NUM:
      return Integer.valueOf(getTotalNum());

    case TEMPLATE_LIST:
      return getTemplateList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_NUM:
      return isSetTotalNum();
    case TEMPLATE_LIST:
      return isSetTemplateList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MBMessageTemplatePage)
      return this.equals((MBMessageTemplatePage)that);
    return false;
  }

  public boolean equals(MBMessageTemplatePage that) {
    if (that == null)
      return false;

    boolean this_present_totalNum = true && this.isSetTotalNum();
    boolean that_present_totalNum = true && that.isSetTotalNum();
    if (this_present_totalNum || that_present_totalNum) {
      if (!(this_present_totalNum && that_present_totalNum))
        return false;
      if (this.totalNum != that.totalNum)
        return false;
    }

    boolean this_present_templateList = true && this.isSetTemplateList();
    boolean that_present_templateList = true && that.isSetTemplateList();
    if (this_present_templateList || that_present_templateList) {
      if (!(this_present_templateList && that_present_templateList))
        return false;
      if (!this.templateList.equals(that.templateList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MBMessageTemplatePage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalNum()).compareTo(other.isSetTotalNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNum, other.totalNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateList()).compareTo(other.isSetTemplateList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateList, other.templateList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MBMessageTemplatePage(");
    boolean first = true;

    if (isSetTotalNum()) {
      sb.append("totalNum:");
      sb.append(this.totalNum);
      first = false;
    }
    if (isSetTemplateList()) {
      if (!first) sb.append(", ");
      sb.append("templateList:");
      if (this.templateList == null) {
        sb.append("null");
      } else {
        sb.append(this.templateList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MBMessageTemplatePageStandardSchemeFactory implements SchemeFactory {
    public MBMessageTemplatePageStandardScheme getScheme() {
      return new MBMessageTemplatePageStandardScheme();
    }
  }

  private static class MBMessageTemplatePageStandardScheme extends StandardScheme<MBMessageTemplatePage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MBMessageTemplatePage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalNum = iprot.readI32();
              struct.setTotalNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.templateList = new ArrayList<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate>(_list56.size);
                for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                {
                  xueqiao.mailbox.thriftdata.mb.MBMessageTemplate _elem58;
                  _elem58 = new xueqiao.mailbox.thriftdata.mb.MBMessageTemplate();
                  _elem58.read(iprot);
                  struct.templateList.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setTemplateListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MBMessageTemplatePage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTotalNum()) {
        oprot.writeFieldBegin(TOTAL_NUM_FIELD_DESC);
        oprot.writeI32(struct.totalNum);
        oprot.writeFieldEnd();
      }
      if (struct.templateList != null) {
        if (struct.isSetTemplateList()) {
          oprot.writeFieldBegin(TEMPLATE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templateList.size()));
            for (xueqiao.mailbox.thriftdata.mb.MBMessageTemplate _iter59 : struct.templateList)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MBMessageTemplatePageTupleSchemeFactory implements SchemeFactory {
    public MBMessageTemplatePageTupleScheme getScheme() {
      return new MBMessageTemplatePageTupleScheme();
    }
  }

  private static class MBMessageTemplatePageTupleScheme extends TupleScheme<MBMessageTemplatePage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MBMessageTemplatePage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalNum()) {
        optionals.set(0);
      }
      if (struct.isSetTemplateList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTotalNum()) {
        oprot.writeI32(struct.totalNum);
      }
      if (struct.isSetTemplateList()) {
        {
          oprot.writeI32(struct.templateList.size());
          for (xueqiao.mailbox.thriftdata.mb.MBMessageTemplate _iter60 : struct.templateList)
          {
            _iter60.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MBMessageTemplatePage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.totalNum = iprot.readI32();
        struct.setTotalNumIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.templateList = new ArrayList<xueqiao.mailbox.thriftdata.mb.MBMessageTemplate>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            xueqiao.mailbox.thriftdata.mb.MBMessageTemplate _elem63;
            _elem63 = new xueqiao.mailbox.thriftdata.mb.MBMessageTemplate();
            _elem63.read(iprot);
            struct.templateList.add(_elem63);
          }
        }
        struct.setTemplateListIsSet(true);
      }
    }
  }

}

