/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.mailbox.thriftdata.mb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 信箱消息模板
 */
public class MBMessageTemplate implements org.apache.thrift.TBase<MBMessageTemplate, MBMessageTemplate._Fields>, java.io.Serializable, Cloneable, Comparable<MBMessageTemplate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MBMessageTemplate");

  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("policy", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("channelList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SMS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("smsList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MAIL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mailList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField HOSTING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("hostingList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TIME_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeRule", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField TEMPLATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("templateName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MBMessageTemplateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MBMessageTemplateTupleSchemeFactory());
  }

  public long templateId; // optional
  /**
   * 
   * @see MSendingPolicy
   */
  public MSendingPolicy policy; // optional
  public List<MSendingChannel> channelList; // optional
  public List<MReceiverSms> smsList; // optional
  public List<MReceiverMail> mailList; // optional
  public List<MReceiverHosting> hostingList; // optional
  public MSendingTimeRule timeRule; // optional
  public xueqiao.mailbox.thriftdata.message.MessageContent content; // optional
  public String templateName; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEMPLATE_ID((short)1, "templateId"),
    /**
     * 
     * @see MSendingPolicy
     */
    POLICY((short)2, "policy"),
    CHANNEL_LIST((short)3, "channelList"),
    SMS_LIST((short)4, "smsList"),
    MAIL_LIST((short)5, "mailList"),
    HOSTING_LIST((short)6, "hostingList"),
    TIME_RULE((short)7, "timeRule"),
    CONTENT((short)8, "content"),
    TEMPLATE_NAME((short)9, "templateName"),
    CREATE_TIMESTAMP((short)40, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)41, "lastModityTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 2: // POLICY
          return POLICY;
        case 3: // CHANNEL_LIST
          return CHANNEL_LIST;
        case 4: // SMS_LIST
          return SMS_LIST;
        case 5: // MAIL_LIST
          return MAIL_LIST;
        case 6: // HOSTING_LIST
          return HOSTING_LIST;
        case 7: // TIME_RULE
          return TIME_RULE;
        case 8: // CONTENT
          return CONTENT;
        case 9: // TEMPLATE_NAME
          return TEMPLATE_NAME;
        case 40: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 41: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEMPLATEID_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TEMPLATE_ID,_Fields.POLICY,_Fields.CHANNEL_LIST,_Fields.SMS_LIST,_Fields.MAIL_LIST,_Fields.HOSTING_LIST,_Fields.TIME_RULE,_Fields.CONTENT,_Fields.TEMPLATE_NAME,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POLICY, new org.apache.thrift.meta_data.FieldMetaData("policy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MSendingPolicy.class)));
    tmpMap.put(_Fields.CHANNEL_LIST, new org.apache.thrift.meta_data.FieldMetaData("channelList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MSendingChannel.class))));
    tmpMap.put(_Fields.SMS_LIST, new org.apache.thrift.meta_data.FieldMetaData("smsList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MReceiverSms.class))));
    tmpMap.put(_Fields.MAIL_LIST, new org.apache.thrift.meta_data.FieldMetaData("mailList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MReceiverMail.class))));
    tmpMap.put(_Fields.HOSTING_LIST, new org.apache.thrift.meta_data.FieldMetaData("hostingList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MReceiverHosting.class))));
    tmpMap.put(_Fields.TIME_RULE, new org.apache.thrift.meta_data.FieldMetaData("timeRule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MSendingTimeRule.class)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.mailbox.thriftdata.message.MessageContent.class)));
    tmpMap.put(_Fields.TEMPLATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("templateName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MBMessageTemplate.class, metaDataMap);
  }

  public MBMessageTemplate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MBMessageTemplate(MBMessageTemplate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.templateId = other.templateId;
    if (other.isSetPolicy()) {
      this.policy = other.policy;
    }
    if (other.isSetChannelList()) {
      List<MSendingChannel> __this__channelList = new ArrayList<MSendingChannel>(other.channelList.size());
      for (MSendingChannel other_element : other.channelList) {
        __this__channelList.add(other_element);
      }
      this.channelList = __this__channelList;
    }
    if (other.isSetSmsList()) {
      List<MReceiverSms> __this__smsList = new ArrayList<MReceiverSms>(other.smsList.size());
      for (MReceiverSms other_element : other.smsList) {
        __this__smsList.add(new MReceiverSms(other_element));
      }
      this.smsList = __this__smsList;
    }
    if (other.isSetMailList()) {
      List<MReceiverMail> __this__mailList = new ArrayList<MReceiverMail>(other.mailList.size());
      for (MReceiverMail other_element : other.mailList) {
        __this__mailList.add(new MReceiverMail(other_element));
      }
      this.mailList = __this__mailList;
    }
    if (other.isSetHostingList()) {
      List<MReceiverHosting> __this__hostingList = new ArrayList<MReceiverHosting>(other.hostingList.size());
      for (MReceiverHosting other_element : other.hostingList) {
        __this__hostingList.add(new MReceiverHosting(other_element));
      }
      this.hostingList = __this__hostingList;
    }
    if (other.isSetTimeRule()) {
      this.timeRule = new MSendingTimeRule(other.timeRule);
    }
    if (other.isSetContent()) {
      this.content = new xueqiao.mailbox.thriftdata.message.MessageContent(other.content);
    }
    if (other.isSetTemplateName()) {
      this.templateName = other.templateName;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
  }

  public MBMessageTemplate deepCopy() {
    return new MBMessageTemplate(this);
  }

  @Override
  public void clear() {
    setTemplateIdIsSet(false);
    this.templateId = 0;
    this.policy = null;
    this.channelList = null;
    this.smsList = null;
    this.mailList = null;
    this.hostingList = null;
    this.timeRule = null;
    this.content = null;
    this.templateName = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
  }

  public long getTemplateId() {
    return this.templateId;
  }

  public MBMessageTemplate setTemplateId(long templateId) {
    this.templateId = templateId;
    setTemplateIdIsSet(true);
    return this;
  }

  public void unsetTemplateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  public void setTemplateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEID_ISSET_ID, value);
  }

  /**
   * 
   * @see MSendingPolicy
   */
  public MSendingPolicy getPolicy() {
    return this.policy;
  }

  /**
   * 
   * @see MSendingPolicy
   */
  public MBMessageTemplate setPolicy(MSendingPolicy policy) {
    this.policy = policy;
    return this;
  }

  public void unsetPolicy() {
    this.policy = null;
  }

  /** Returns true if field policy is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicy() {
    return this.policy != null;
  }

  public void setPolicyIsSet(boolean value) {
    if (!value) {
      this.policy = null;
    }
  }

  public int getChannelListSize() {
    return (this.channelList == null) ? 0 : this.channelList.size();
  }

  public java.util.Iterator<MSendingChannel> getChannelListIterator() {
    return (this.channelList == null) ? null : this.channelList.iterator();
  }

  public void addToChannelList(MSendingChannel elem) {
    if (this.channelList == null) {
      this.channelList = new ArrayList<MSendingChannel>();
    }
    this.channelList.add(elem);
  }

  public List<MSendingChannel> getChannelList() {
    return this.channelList;
  }

  public MBMessageTemplate setChannelList(List<MSendingChannel> channelList) {
    this.channelList = channelList;
    return this;
  }

  public void unsetChannelList() {
    this.channelList = null;
  }

  /** Returns true if field channelList is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelList() {
    return this.channelList != null;
  }

  public void setChannelListIsSet(boolean value) {
    if (!value) {
      this.channelList = null;
    }
  }

  public int getSmsListSize() {
    return (this.smsList == null) ? 0 : this.smsList.size();
  }

  public java.util.Iterator<MReceiverSms> getSmsListIterator() {
    return (this.smsList == null) ? null : this.smsList.iterator();
  }

  public void addToSmsList(MReceiverSms elem) {
    if (this.smsList == null) {
      this.smsList = new ArrayList<MReceiverSms>();
    }
    this.smsList.add(elem);
  }

  public List<MReceiverSms> getSmsList() {
    return this.smsList;
  }

  public MBMessageTemplate setSmsList(List<MReceiverSms> smsList) {
    this.smsList = smsList;
    return this;
  }

  public void unsetSmsList() {
    this.smsList = null;
  }

  /** Returns true if field smsList is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsList() {
    return this.smsList != null;
  }

  public void setSmsListIsSet(boolean value) {
    if (!value) {
      this.smsList = null;
    }
  }

  public int getMailListSize() {
    return (this.mailList == null) ? 0 : this.mailList.size();
  }

  public java.util.Iterator<MReceiverMail> getMailListIterator() {
    return (this.mailList == null) ? null : this.mailList.iterator();
  }

  public void addToMailList(MReceiverMail elem) {
    if (this.mailList == null) {
      this.mailList = new ArrayList<MReceiverMail>();
    }
    this.mailList.add(elem);
  }

  public List<MReceiverMail> getMailList() {
    return this.mailList;
  }

  public MBMessageTemplate setMailList(List<MReceiverMail> mailList) {
    this.mailList = mailList;
    return this;
  }

  public void unsetMailList() {
    this.mailList = null;
  }

  /** Returns true if field mailList is set (has been assigned a value) and false otherwise */
  public boolean isSetMailList() {
    return this.mailList != null;
  }

  public void setMailListIsSet(boolean value) {
    if (!value) {
      this.mailList = null;
    }
  }

  public int getHostingListSize() {
    return (this.hostingList == null) ? 0 : this.hostingList.size();
  }

  public java.util.Iterator<MReceiverHosting> getHostingListIterator() {
    return (this.hostingList == null) ? null : this.hostingList.iterator();
  }

  public void addToHostingList(MReceiverHosting elem) {
    if (this.hostingList == null) {
      this.hostingList = new ArrayList<MReceiverHosting>();
    }
    this.hostingList.add(elem);
  }

  public List<MReceiverHosting> getHostingList() {
    return this.hostingList;
  }

  public MBMessageTemplate setHostingList(List<MReceiverHosting> hostingList) {
    this.hostingList = hostingList;
    return this;
  }

  public void unsetHostingList() {
    this.hostingList = null;
  }

  /** Returns true if field hostingList is set (has been assigned a value) and false otherwise */
  public boolean isSetHostingList() {
    return this.hostingList != null;
  }

  public void setHostingListIsSet(boolean value) {
    if (!value) {
      this.hostingList = null;
    }
  }

  public MSendingTimeRule getTimeRule() {
    return this.timeRule;
  }

  public MBMessageTemplate setTimeRule(MSendingTimeRule timeRule) {
    this.timeRule = timeRule;
    return this;
  }

  public void unsetTimeRule() {
    this.timeRule = null;
  }

  /** Returns true if field timeRule is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRule() {
    return this.timeRule != null;
  }

  public void setTimeRuleIsSet(boolean value) {
    if (!value) {
      this.timeRule = null;
    }
  }

  public xueqiao.mailbox.thriftdata.message.MessageContent getContent() {
    return this.content;
  }

  public MBMessageTemplate setContent(xueqiao.mailbox.thriftdata.message.MessageContent content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getTemplateName() {
    return this.templateName;
  }

  public MBMessageTemplate setTemplateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  public void unsetTemplateName() {
    this.templateName = null;
  }

  /** Returns true if field templateName is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateName() {
    return this.templateName != null;
  }

  public void setTemplateNameIsSet(boolean value) {
    if (!value) {
      this.templateName = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public MBMessageTemplate setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public MBMessageTemplate setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((Long)value);
      }
      break;

    case POLICY:
      if (value == null) {
        unsetPolicy();
      } else {
        setPolicy((MSendingPolicy)value);
      }
      break;

    case CHANNEL_LIST:
      if (value == null) {
        unsetChannelList();
      } else {
        setChannelList((List<MSendingChannel>)value);
      }
      break;

    case SMS_LIST:
      if (value == null) {
        unsetSmsList();
      } else {
        setSmsList((List<MReceiverSms>)value);
      }
      break;

    case MAIL_LIST:
      if (value == null) {
        unsetMailList();
      } else {
        setMailList((List<MReceiverMail>)value);
      }
      break;

    case HOSTING_LIST:
      if (value == null) {
        unsetHostingList();
      } else {
        setHostingList((List<MReceiverHosting>)value);
      }
      break;

    case TIME_RULE:
      if (value == null) {
        unsetTimeRule();
      } else {
        setTimeRule((MSendingTimeRule)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((xueqiao.mailbox.thriftdata.message.MessageContent)value);
      }
      break;

    case TEMPLATE_NAME:
      if (value == null) {
        unsetTemplateName();
      } else {
        setTemplateName((String)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEMPLATE_ID:
      return Long.valueOf(getTemplateId());

    case POLICY:
      return getPolicy();

    case CHANNEL_LIST:
      return getChannelList();

    case SMS_LIST:
      return getSmsList();

    case MAIL_LIST:
      return getMailList();

    case HOSTING_LIST:
      return getHostingList();

    case TIME_RULE:
      return getTimeRule();

    case CONTENT:
      return getContent();

    case TEMPLATE_NAME:
      return getTemplateName();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEMPLATE_ID:
      return isSetTemplateId();
    case POLICY:
      return isSetPolicy();
    case CHANNEL_LIST:
      return isSetChannelList();
    case SMS_LIST:
      return isSetSmsList();
    case MAIL_LIST:
      return isSetMailList();
    case HOSTING_LIST:
      return isSetHostingList();
    case TIME_RULE:
      return isSetTimeRule();
    case CONTENT:
      return isSetContent();
    case TEMPLATE_NAME:
      return isSetTemplateName();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MBMessageTemplate)
      return this.equals((MBMessageTemplate)that);
    return false;
  }

  public boolean equals(MBMessageTemplate that) {
    if (that == null)
      return false;

    boolean this_present_templateId = true && this.isSetTemplateId();
    boolean that_present_templateId = true && that.isSetTemplateId();
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (this.templateId != that.templateId)
        return false;
    }

    boolean this_present_policy = true && this.isSetPolicy();
    boolean that_present_policy = true && that.isSetPolicy();
    if (this_present_policy || that_present_policy) {
      if (!(this_present_policy && that_present_policy))
        return false;
      if (!this.policy.equals(that.policy))
        return false;
    }

    boolean this_present_channelList = true && this.isSetChannelList();
    boolean that_present_channelList = true && that.isSetChannelList();
    if (this_present_channelList || that_present_channelList) {
      if (!(this_present_channelList && that_present_channelList))
        return false;
      if (!this.channelList.equals(that.channelList))
        return false;
    }

    boolean this_present_smsList = true && this.isSetSmsList();
    boolean that_present_smsList = true && that.isSetSmsList();
    if (this_present_smsList || that_present_smsList) {
      if (!(this_present_smsList && that_present_smsList))
        return false;
      if (!this.smsList.equals(that.smsList))
        return false;
    }

    boolean this_present_mailList = true && this.isSetMailList();
    boolean that_present_mailList = true && that.isSetMailList();
    if (this_present_mailList || that_present_mailList) {
      if (!(this_present_mailList && that_present_mailList))
        return false;
      if (!this.mailList.equals(that.mailList))
        return false;
    }

    boolean this_present_hostingList = true && this.isSetHostingList();
    boolean that_present_hostingList = true && that.isSetHostingList();
    if (this_present_hostingList || that_present_hostingList) {
      if (!(this_present_hostingList && that_present_hostingList))
        return false;
      if (!this.hostingList.equals(that.hostingList))
        return false;
    }

    boolean this_present_timeRule = true && this.isSetTimeRule();
    boolean that_present_timeRule = true && that.isSetTimeRule();
    if (this_present_timeRule || that_present_timeRule) {
      if (!(this_present_timeRule && that_present_timeRule))
        return false;
      if (!this.timeRule.equals(that.timeRule))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_templateName = true && this.isSetTemplateName();
    boolean that_present_templateName = true && that.isSetTemplateName();
    if (this_present_templateName || that_present_templateName) {
      if (!(this_present_templateName && that_present_templateName))
        return false;
      if (!this.templateName.equals(that.templateName))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MBMessageTemplate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicy()).compareTo(other.isSetPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policy, other.policy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelList()).compareTo(other.isSetChannelList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelList, other.channelList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsList()).compareTo(other.isSetSmsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsList, other.smsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMailList()).compareTo(other.isSetMailList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMailList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mailList, other.mailList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostingList()).compareTo(other.isSetHostingList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostingList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostingList, other.hostingList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeRule()).compareTo(other.isSetTimeRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRule, other.timeRule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateName()).compareTo(other.isSetTemplateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateName, other.templateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MBMessageTemplate(");
    boolean first = true;

    if (isSetTemplateId()) {
      sb.append("templateId:");
      sb.append(this.templateId);
      first = false;
    }
    if (isSetPolicy()) {
      if (!first) sb.append(", ");
      sb.append("policy:");
      if (this.policy == null) {
        sb.append("null");
      } else {
        sb.append(this.policy);
      }
      first = false;
    }
    if (isSetChannelList()) {
      if (!first) sb.append(", ");
      sb.append("channelList:");
      if (this.channelList == null) {
        sb.append("null");
      } else {
        sb.append(this.channelList);
      }
      first = false;
    }
    if (isSetSmsList()) {
      if (!first) sb.append(", ");
      sb.append("smsList:");
      if (this.smsList == null) {
        sb.append("null");
      } else {
        sb.append(this.smsList);
      }
      first = false;
    }
    if (isSetMailList()) {
      if (!first) sb.append(", ");
      sb.append("mailList:");
      if (this.mailList == null) {
        sb.append("null");
      } else {
        sb.append(this.mailList);
      }
      first = false;
    }
    if (isSetHostingList()) {
      if (!first) sb.append(", ");
      sb.append("hostingList:");
      if (this.hostingList == null) {
        sb.append("null");
      } else {
        sb.append(this.hostingList);
      }
      first = false;
    }
    if (isSetTimeRule()) {
      if (!first) sb.append(", ");
      sb.append("timeRule:");
      if (this.timeRule == null) {
        sb.append("null");
      } else {
        sb.append(this.timeRule);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetTemplateName()) {
      if (!first) sb.append(", ");
      sb.append("templateName:");
      if (this.templateName == null) {
        sb.append("null");
      } else {
        sb.append(this.templateName);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (timeRule != null) {
      timeRule.validate();
    }
    if (content != null) {
      content.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MBMessageTemplateStandardSchemeFactory implements SchemeFactory {
    public MBMessageTemplateStandardScheme getScheme() {
      return new MBMessageTemplateStandardScheme();
    }
  }

  private static class MBMessageTemplateStandardScheme extends StandardScheme<MBMessageTemplate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MBMessageTemplate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.templateId = iprot.readI64();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.policy = MSendingPolicy.findByValue(iprot.readI32());
              struct.setPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                struct.channelList = new ArrayList<MSendingChannel>(_list144.size);
                for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                {
                  MSendingChannel _elem146;
                  _elem146 = MSendingChannel.findByValue(iprot.readI32());
                  struct.channelList.add(_elem146);
                }
                iprot.readListEnd();
              }
              struct.setChannelListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SMS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list147 = iprot.readListBegin();
                struct.smsList = new ArrayList<MReceiverSms>(_list147.size);
                for (int _i148 = 0; _i148 < _list147.size; ++_i148)
                {
                  MReceiverSms _elem149;
                  _elem149 = new MReceiverSms();
                  _elem149.read(iprot);
                  struct.smsList.add(_elem149);
                }
                iprot.readListEnd();
              }
              struct.setSmsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAIL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.mailList = new ArrayList<MReceiverMail>(_list150.size);
                for (int _i151 = 0; _i151 < _list150.size; ++_i151)
                {
                  MReceiverMail _elem152;
                  _elem152 = new MReceiverMail();
                  _elem152.read(iprot);
                  struct.mailList.add(_elem152);
                }
                iprot.readListEnd();
              }
              struct.setMailListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOSTING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list153 = iprot.readListBegin();
                struct.hostingList = new ArrayList<MReceiverHosting>(_list153.size);
                for (int _i154 = 0; _i154 < _list153.size; ++_i154)
                {
                  MReceiverHosting _elem155;
                  _elem155 = new MReceiverHosting();
                  _elem155.read(iprot);
                  struct.hostingList.add(_elem155);
                }
                iprot.readListEnd();
              }
              struct.setHostingListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIME_RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timeRule = new MSendingTimeRule();
              struct.timeRule.read(iprot);
              struct.setTimeRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.content = new xueqiao.mailbox.thriftdata.message.MessageContent();
              struct.content.read(iprot);
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEMPLATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateName = iprot.readString();
              struct.setTemplateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MBMessageTemplate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTemplateId()) {
        oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
        oprot.writeI64(struct.templateId);
        oprot.writeFieldEnd();
      }
      if (struct.policy != null) {
        if (struct.isSetPolicy()) {
          oprot.writeFieldBegin(POLICY_FIELD_DESC);
          oprot.writeI32(struct.policy.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.channelList != null) {
        if (struct.isSetChannelList()) {
          oprot.writeFieldBegin(CHANNEL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.channelList.size()));
            for (MSendingChannel _iter156 : struct.channelList)
            {
              oprot.writeI32(_iter156.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.smsList != null) {
        if (struct.isSetSmsList()) {
          oprot.writeFieldBegin(SMS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.smsList.size()));
            for (MReceiverSms _iter157 : struct.smsList)
            {
              _iter157.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mailList != null) {
        if (struct.isSetMailList()) {
          oprot.writeFieldBegin(MAIL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mailList.size()));
            for (MReceiverMail _iter158 : struct.mailList)
            {
              _iter158.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostingList != null) {
        if (struct.isSetHostingList()) {
          oprot.writeFieldBegin(HOSTING_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hostingList.size()));
            for (MReceiverHosting _iter159 : struct.hostingList)
            {
              _iter159.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeRule != null) {
        if (struct.isSetTimeRule()) {
          oprot.writeFieldBegin(TIME_RULE_FIELD_DESC);
          struct.timeRule.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          struct.content.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.templateName != null) {
        if (struct.isSetTemplateName()) {
          oprot.writeFieldBegin(TEMPLATE_NAME_FIELD_DESC);
          oprot.writeString(struct.templateName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MBMessageTemplateTupleSchemeFactory implements SchemeFactory {
    public MBMessageTemplateTupleScheme getScheme() {
      return new MBMessageTemplateTupleScheme();
    }
  }

  private static class MBMessageTemplateTupleScheme extends TupleScheme<MBMessageTemplate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MBMessageTemplate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTemplateId()) {
        optionals.set(0);
      }
      if (struct.isSetPolicy()) {
        optionals.set(1);
      }
      if (struct.isSetChannelList()) {
        optionals.set(2);
      }
      if (struct.isSetSmsList()) {
        optionals.set(3);
      }
      if (struct.isSetMailList()) {
        optionals.set(4);
      }
      if (struct.isSetHostingList()) {
        optionals.set(5);
      }
      if (struct.isSetTimeRule()) {
        optionals.set(6);
      }
      if (struct.isSetContent()) {
        optionals.set(7);
      }
      if (struct.isSetTemplateName()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(9);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetTemplateId()) {
        oprot.writeI64(struct.templateId);
      }
      if (struct.isSetPolicy()) {
        oprot.writeI32(struct.policy.getValue());
      }
      if (struct.isSetChannelList()) {
        {
          oprot.writeI32(struct.channelList.size());
          for (MSendingChannel _iter160 : struct.channelList)
          {
            oprot.writeI32(_iter160.getValue());
          }
        }
      }
      if (struct.isSetSmsList()) {
        {
          oprot.writeI32(struct.smsList.size());
          for (MReceiverSms _iter161 : struct.smsList)
          {
            _iter161.write(oprot);
          }
        }
      }
      if (struct.isSetMailList()) {
        {
          oprot.writeI32(struct.mailList.size());
          for (MReceiverMail _iter162 : struct.mailList)
          {
            _iter162.write(oprot);
          }
        }
      }
      if (struct.isSetHostingList()) {
        {
          oprot.writeI32(struct.hostingList.size());
          for (MReceiverHosting _iter163 : struct.hostingList)
          {
            _iter163.write(oprot);
          }
        }
      }
      if (struct.isSetTimeRule()) {
        struct.timeRule.write(oprot);
      }
      if (struct.isSetContent()) {
        struct.content.write(oprot);
      }
      if (struct.isSetTemplateName()) {
        oprot.writeString(struct.templateName);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MBMessageTemplate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.templateId = iprot.readI64();
        struct.setTemplateIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.policy = MSendingPolicy.findByValue(iprot.readI32());
        struct.setPolicyIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list164 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.channelList = new ArrayList<MSendingChannel>(_list164.size);
          for (int _i165 = 0; _i165 < _list164.size; ++_i165)
          {
            MSendingChannel _elem166;
            _elem166 = MSendingChannel.findByValue(iprot.readI32());
            struct.channelList.add(_elem166);
          }
        }
        struct.setChannelListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.smsList = new ArrayList<MReceiverSms>(_list167.size);
          for (int _i168 = 0; _i168 < _list167.size; ++_i168)
          {
            MReceiverSms _elem169;
            _elem169 = new MReceiverSms();
            _elem169.read(iprot);
            struct.smsList.add(_elem169);
          }
        }
        struct.setSmsListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list170 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mailList = new ArrayList<MReceiverMail>(_list170.size);
          for (int _i171 = 0; _i171 < _list170.size; ++_i171)
          {
            MReceiverMail _elem172;
            _elem172 = new MReceiverMail();
            _elem172.read(iprot);
            struct.mailList.add(_elem172);
          }
        }
        struct.setMailListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hostingList = new ArrayList<MReceiverHosting>(_list173.size);
          for (int _i174 = 0; _i174 < _list173.size; ++_i174)
          {
            MReceiverHosting _elem175;
            _elem175 = new MReceiverHosting();
            _elem175.read(iprot);
            struct.hostingList.add(_elem175);
          }
        }
        struct.setHostingListIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timeRule = new MSendingTimeRule();
        struct.timeRule.read(iprot);
        struct.setTimeRuleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.content = new xueqiao.mailbox.thriftdata.message.MessageContent();
        struct.content.read(iprot);
        struct.setContentIsSet(true);
      }
      if (incoming.get(8)) {
        struct.templateName = iprot.readString();
        struct.setTemplateNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
    }
  }

}

