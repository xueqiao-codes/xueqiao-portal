/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.mailbox.thriftdata.mb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 信箱消息托管机接收者
 */
public class MReceiverHosting implements org.apache.thrift.TBase<MReceiverHosting, MReceiverHosting._Fields>, java.io.Serializable, Cloneable, Comparable<MReceiverHosting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MReceiverHosting");

  private static final org.apache.thrift.protocol.TField MBM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mbmId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ROLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("roleList", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MReceiverHostingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MReceiverHostingTupleSchemeFactory());
  }

  public long mbmId; // optional
  public long companyId; // optional
  public long groupId; // optional
  public List<HostingUserRole> roleList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MBM_ID((short)1, "mbmId"),
    COMPANY_ID((short)2, "companyId"),
    GROUP_ID((short)3, "groupId"),
    ROLE_LIST((short)4, "roleList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MBM_ID
          return MBM_ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // GROUP_ID
          return GROUP_ID;
        case 4: // ROLE_LIST
          return ROLE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MBMID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __GROUPID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MBM_ID,_Fields.COMPANY_ID,_Fields.GROUP_ID,_Fields.ROLE_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MBM_ID, new org.apache.thrift.meta_data.FieldMetaData("mbmId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("roleList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingUserRole.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MReceiverHosting.class, metaDataMap);
  }

  public MReceiverHosting() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MReceiverHosting(MReceiverHosting other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mbmId = other.mbmId;
    this.companyId = other.companyId;
    this.groupId = other.groupId;
    if (other.isSetRoleList()) {
      List<HostingUserRole> __this__roleList = new ArrayList<HostingUserRole>(other.roleList.size());
      for (HostingUserRole other_element : other.roleList) {
        __this__roleList.add(other_element);
      }
      this.roleList = __this__roleList;
    }
  }

  public MReceiverHosting deepCopy() {
    return new MReceiverHosting(this);
  }

  @Override
  public void clear() {
    setMbmIdIsSet(false);
    this.mbmId = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setGroupIdIsSet(false);
    this.groupId = 0;
    this.roleList = null;
  }

  public long getMbmId() {
    return this.mbmId;
  }

  public MReceiverHosting setMbmId(long mbmId) {
    this.mbmId = mbmId;
    setMbmIdIsSet(true);
    return this;
  }

  public void unsetMbmId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBMID_ISSET_ID);
  }

  /** Returns true if field mbmId is set (has been assigned a value) and false otherwise */
  public boolean isSetMbmId() {
    return EncodingUtils.testBit(__isset_bitfield, __MBMID_ISSET_ID);
  }

  public void setMbmIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBMID_ISSET_ID, value);
  }

  public long getCompanyId() {
    return this.companyId;
  }

  public MReceiverHosting setCompanyId(long companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public long getGroupId() {
    return this.groupId;
  }

  public MReceiverHosting setGroupId(long groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public int getRoleListSize() {
    return (this.roleList == null) ? 0 : this.roleList.size();
  }

  public java.util.Iterator<HostingUserRole> getRoleListIterator() {
    return (this.roleList == null) ? null : this.roleList.iterator();
  }

  public void addToRoleList(HostingUserRole elem) {
    if (this.roleList == null) {
      this.roleList = new ArrayList<HostingUserRole>();
    }
    this.roleList.add(elem);
  }

  public List<HostingUserRole> getRoleList() {
    return this.roleList;
  }

  public MReceiverHosting setRoleList(List<HostingUserRole> roleList) {
    this.roleList = roleList;
    return this;
  }

  public void unsetRoleList() {
    this.roleList = null;
  }

  /** Returns true if field roleList is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleList() {
    return this.roleList != null;
  }

  public void setRoleListIsSet(boolean value) {
    if (!value) {
      this.roleList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MBM_ID:
      if (value == null) {
        unsetMbmId();
      } else {
        setMbmId((Long)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Long)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((Long)value);
      }
      break;

    case ROLE_LIST:
      if (value == null) {
        unsetRoleList();
      } else {
        setRoleList((List<HostingUserRole>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MBM_ID:
      return Long.valueOf(getMbmId());

    case COMPANY_ID:
      return Long.valueOf(getCompanyId());

    case GROUP_ID:
      return Long.valueOf(getGroupId());

    case ROLE_LIST:
      return getRoleList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MBM_ID:
      return isSetMbmId();
    case COMPANY_ID:
      return isSetCompanyId();
    case GROUP_ID:
      return isSetGroupId();
    case ROLE_LIST:
      return isSetRoleList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MReceiverHosting)
      return this.equals((MReceiverHosting)that);
    return false;
  }

  public boolean equals(MReceiverHosting that) {
    if (that == null)
      return false;

    boolean this_present_mbmId = true && this.isSetMbmId();
    boolean that_present_mbmId = true && that.isSetMbmId();
    if (this_present_mbmId || that_present_mbmId) {
      if (!(this_present_mbmId && that_present_mbmId))
        return false;
      if (this.mbmId != that.mbmId)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_groupId = true && this.isSetGroupId();
    boolean that_present_groupId = true && that.isSetGroupId();
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_roleList = true && this.isSetRoleList();
    boolean that_present_roleList = true && that.isSetRoleList();
    if (this_present_roleList || that_present_roleList) {
      if (!(this_present_roleList && that_present_roleList))
        return false;
      if (!this.roleList.equals(that.roleList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MReceiverHosting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMbmId()).compareTo(other.isSetMbmId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMbmId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbmId, other.mbmId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleList()).compareTo(other.isSetRoleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleList, other.roleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MReceiverHosting(");
    boolean first = true;

    if (isSetMbmId()) {
      sb.append("mbmId:");
      sb.append(this.mbmId);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetGroupId()) {
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
    }
    if (isSetRoleList()) {
      if (!first) sb.append(", ");
      sb.append("roleList:");
      if (this.roleList == null) {
        sb.append("null");
      } else {
        sb.append(this.roleList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MReceiverHostingStandardSchemeFactory implements SchemeFactory {
    public MReceiverHostingStandardScheme getScheme() {
      return new MReceiverHostingStandardScheme();
    }
  }

  private static class MReceiverHostingStandardScheme extends StandardScheme<MReceiverHosting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MReceiverHosting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MBM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mbmId = iprot.readI64();
              struct.setMbmIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.companyId = iprot.readI64();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.groupId = iprot.readI64();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.roleList = new ArrayList<HostingUserRole>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  HostingUserRole _elem42;
                  _elem42 = HostingUserRole.findByValue(iprot.readI32());
                  struct.roleList.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setRoleListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MReceiverHosting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMbmId()) {
        oprot.writeFieldBegin(MBM_ID_FIELD_DESC);
        oprot.writeI64(struct.mbmId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI64(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGroupId()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
      }
      if (struct.roleList != null) {
        if (struct.isSetRoleList()) {
          oprot.writeFieldBegin(ROLE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.roleList.size()));
            for (HostingUserRole _iter43 : struct.roleList)
            {
              oprot.writeI32(_iter43.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MReceiverHostingTupleSchemeFactory implements SchemeFactory {
    public MReceiverHostingTupleScheme getScheme() {
      return new MReceiverHostingTupleScheme();
    }
  }

  private static class MReceiverHostingTupleScheme extends TupleScheme<MReceiverHosting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MReceiverHosting struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMbmId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetGroupId()) {
        optionals.set(2);
      }
      if (struct.isSetRoleList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMbmId()) {
        oprot.writeI64(struct.mbmId);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI64(struct.companyId);
      }
      if (struct.isSetGroupId()) {
        oprot.writeI64(struct.groupId);
      }
      if (struct.isSetRoleList()) {
        {
          oprot.writeI32(struct.roleList.size());
          for (HostingUserRole _iter44 : struct.roleList)
          {
            oprot.writeI32(_iter44.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MReceiverHosting struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.mbmId = iprot.readI64();
        struct.setMbmIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI64();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.groupId = iprot.readI64();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.roleList = new ArrayList<HostingUserRole>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            HostingUserRole _elem47;
            _elem47 = HostingUserRole.findByValue(iprot.readI32());
            struct.roleList.add(_elem47);
          }
        }
        struct.setRoleListIsSet(true);
      }
    }
  }

}

