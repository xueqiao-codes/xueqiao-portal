/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.broker.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqBrokerEntryOption implements org.apache.thrift.TBase<ReqBrokerEntryOption, ReqBrokerEntryOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqBrokerEntryOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqBrokerEntryOption");

  private static final org.apache.thrift.protocol.TField BROKER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ENG_NAME_WHOLE_FIELD_DESC = new org.apache.thrift.protocol.TField("engNameWhole", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENG_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("engNamePartical", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CN_NAME_WHOLE_FIELD_DESC = new org.apache.thrift.protocol.TField("cnNameWhole", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CN_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cnNamePartical", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqBrokerEntryOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqBrokerEntryOptionTupleSchemeFactory());
  }

  public List<Integer> brokerIds; // optional
  public String engNameWhole; // optional
  public String engNamePartical; // optional
  public String cnNameWhole; // optional
  public String cnNamePartical; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_IDS((short)1, "brokerIds"),
    ENG_NAME_WHOLE((short)2, "engNameWhole"),
    ENG_NAME_PARTICAL((short)3, "engNamePartical"),
    CN_NAME_WHOLE((short)4, "cnNameWhole"),
    CN_NAME_PARTICAL((short)5, "cnNamePartical");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_IDS
          return BROKER_IDS;
        case 2: // ENG_NAME_WHOLE
          return ENG_NAME_WHOLE;
        case 3: // ENG_NAME_PARTICAL
          return ENG_NAME_PARTICAL;
        case 4: // CN_NAME_WHOLE
          return CN_NAME_WHOLE;
        case 5: // CN_NAME_PARTICAL
          return CN_NAME_PARTICAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.BROKER_IDS,_Fields.ENG_NAME_WHOLE,_Fields.ENG_NAME_PARTICAL,_Fields.CN_NAME_WHOLE,_Fields.CN_NAME_PARTICAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_IDS, new org.apache.thrift.meta_data.FieldMetaData("brokerIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ENG_NAME_WHOLE, new org.apache.thrift.meta_data.FieldMetaData("engNameWhole", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENG_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("engNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME_WHOLE, new org.apache.thrift.meta_data.FieldMetaData("cnNameWhole", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("cnNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqBrokerEntryOption.class, metaDataMap);
  }

  public ReqBrokerEntryOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqBrokerEntryOption(ReqBrokerEntryOption other) {
    if (other.isSetBrokerIds()) {
      List<Integer> __this__brokerIds = new ArrayList<Integer>(other.brokerIds);
      this.brokerIds = __this__brokerIds;
    }
    if (other.isSetEngNameWhole()) {
      this.engNameWhole = other.engNameWhole;
    }
    if (other.isSetEngNamePartical()) {
      this.engNamePartical = other.engNamePartical;
    }
    if (other.isSetCnNameWhole()) {
      this.cnNameWhole = other.cnNameWhole;
    }
    if (other.isSetCnNamePartical()) {
      this.cnNamePartical = other.cnNamePartical;
    }
  }

  public ReqBrokerEntryOption deepCopy() {
    return new ReqBrokerEntryOption(this);
  }

  @Override
  public void clear() {
    this.brokerIds = null;
    this.engNameWhole = null;
    this.engNamePartical = null;
    this.cnNameWhole = null;
    this.cnNamePartical = null;
  }

  public int getBrokerIdsSize() {
    return (this.brokerIds == null) ? 0 : this.brokerIds.size();
  }

  public java.util.Iterator<Integer> getBrokerIdsIterator() {
    return (this.brokerIds == null) ? null : this.brokerIds.iterator();
  }

  public void addToBrokerIds(int elem) {
    if (this.brokerIds == null) {
      this.brokerIds = new ArrayList<Integer>();
    }
    this.brokerIds.add(elem);
  }

  public List<Integer> getBrokerIds() {
    return this.brokerIds;
  }

  public ReqBrokerEntryOption setBrokerIds(List<Integer> brokerIds) {
    this.brokerIds = brokerIds;
    return this;
  }

  public void unsetBrokerIds() {
    this.brokerIds = null;
  }

  /** Returns true if field brokerIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerIds() {
    return this.brokerIds != null;
  }

  public void setBrokerIdsIsSet(boolean value) {
    if (!value) {
      this.brokerIds = null;
    }
  }

  public String getEngNameWhole() {
    return this.engNameWhole;
  }

  public ReqBrokerEntryOption setEngNameWhole(String engNameWhole) {
    this.engNameWhole = engNameWhole;
    return this;
  }

  public void unsetEngNameWhole() {
    this.engNameWhole = null;
  }

  /** Returns true if field engNameWhole is set (has been assigned a value) and false otherwise */
  public boolean isSetEngNameWhole() {
    return this.engNameWhole != null;
  }

  public void setEngNameWholeIsSet(boolean value) {
    if (!value) {
      this.engNameWhole = null;
    }
  }

  public String getEngNamePartical() {
    return this.engNamePartical;
  }

  public ReqBrokerEntryOption setEngNamePartical(String engNamePartical) {
    this.engNamePartical = engNamePartical;
    return this;
  }

  public void unsetEngNamePartical() {
    this.engNamePartical = null;
  }

  /** Returns true if field engNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetEngNamePartical() {
    return this.engNamePartical != null;
  }

  public void setEngNameParticalIsSet(boolean value) {
    if (!value) {
      this.engNamePartical = null;
    }
  }

  public String getCnNameWhole() {
    return this.cnNameWhole;
  }

  public ReqBrokerEntryOption setCnNameWhole(String cnNameWhole) {
    this.cnNameWhole = cnNameWhole;
    return this;
  }

  public void unsetCnNameWhole() {
    this.cnNameWhole = null;
  }

  /** Returns true if field cnNameWhole is set (has been assigned a value) and false otherwise */
  public boolean isSetCnNameWhole() {
    return this.cnNameWhole != null;
  }

  public void setCnNameWholeIsSet(boolean value) {
    if (!value) {
      this.cnNameWhole = null;
    }
  }

  public String getCnNamePartical() {
    return this.cnNamePartical;
  }

  public ReqBrokerEntryOption setCnNamePartical(String cnNamePartical) {
    this.cnNamePartical = cnNamePartical;
    return this;
  }

  public void unsetCnNamePartical() {
    this.cnNamePartical = null;
  }

  /** Returns true if field cnNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetCnNamePartical() {
    return this.cnNamePartical != null;
  }

  public void setCnNameParticalIsSet(boolean value) {
    if (!value) {
      this.cnNamePartical = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_IDS:
      if (value == null) {
        unsetBrokerIds();
      } else {
        setBrokerIds((List<Integer>)value);
      }
      break;

    case ENG_NAME_WHOLE:
      if (value == null) {
        unsetEngNameWhole();
      } else {
        setEngNameWhole((String)value);
      }
      break;

    case ENG_NAME_PARTICAL:
      if (value == null) {
        unsetEngNamePartical();
      } else {
        setEngNamePartical((String)value);
      }
      break;

    case CN_NAME_WHOLE:
      if (value == null) {
        unsetCnNameWhole();
      } else {
        setCnNameWhole((String)value);
      }
      break;

    case CN_NAME_PARTICAL:
      if (value == null) {
        unsetCnNamePartical();
      } else {
        setCnNamePartical((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_IDS:
      return getBrokerIds();

    case ENG_NAME_WHOLE:
      return getEngNameWhole();

    case ENG_NAME_PARTICAL:
      return getEngNamePartical();

    case CN_NAME_WHOLE:
      return getCnNameWhole();

    case CN_NAME_PARTICAL:
      return getCnNamePartical();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_IDS:
      return isSetBrokerIds();
    case ENG_NAME_WHOLE:
      return isSetEngNameWhole();
    case ENG_NAME_PARTICAL:
      return isSetEngNamePartical();
    case CN_NAME_WHOLE:
      return isSetCnNameWhole();
    case CN_NAME_PARTICAL:
      return isSetCnNamePartical();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqBrokerEntryOption)
      return this.equals((ReqBrokerEntryOption)that);
    return false;
  }

  public boolean equals(ReqBrokerEntryOption that) {
    if (that == null)
      return false;

    boolean this_present_brokerIds = true && this.isSetBrokerIds();
    boolean that_present_brokerIds = true && that.isSetBrokerIds();
    if (this_present_brokerIds || that_present_brokerIds) {
      if (!(this_present_brokerIds && that_present_brokerIds))
        return false;
      if (!this.brokerIds.equals(that.brokerIds))
        return false;
    }

    boolean this_present_engNameWhole = true && this.isSetEngNameWhole();
    boolean that_present_engNameWhole = true && that.isSetEngNameWhole();
    if (this_present_engNameWhole || that_present_engNameWhole) {
      if (!(this_present_engNameWhole && that_present_engNameWhole))
        return false;
      if (!this.engNameWhole.equals(that.engNameWhole))
        return false;
    }

    boolean this_present_engNamePartical = true && this.isSetEngNamePartical();
    boolean that_present_engNamePartical = true && that.isSetEngNamePartical();
    if (this_present_engNamePartical || that_present_engNamePartical) {
      if (!(this_present_engNamePartical && that_present_engNamePartical))
        return false;
      if (!this.engNamePartical.equals(that.engNamePartical))
        return false;
    }

    boolean this_present_cnNameWhole = true && this.isSetCnNameWhole();
    boolean that_present_cnNameWhole = true && that.isSetCnNameWhole();
    if (this_present_cnNameWhole || that_present_cnNameWhole) {
      if (!(this_present_cnNameWhole && that_present_cnNameWhole))
        return false;
      if (!this.cnNameWhole.equals(that.cnNameWhole))
        return false;
    }

    boolean this_present_cnNamePartical = true && this.isSetCnNamePartical();
    boolean that_present_cnNamePartical = true && that.isSetCnNamePartical();
    if (this_present_cnNamePartical || that_present_cnNamePartical) {
      if (!(this_present_cnNamePartical && that_present_cnNamePartical))
        return false;
      if (!this.cnNamePartical.equals(that.cnNamePartical))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqBrokerEntryOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerIds()).compareTo(other.isSetBrokerIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerIds, other.brokerIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngNameWhole()).compareTo(other.isSetEngNameWhole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngNameWhole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engNameWhole, other.engNameWhole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngNamePartical()).compareTo(other.isSetEngNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engNamePartical, other.engNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnNameWhole()).compareTo(other.isSetCnNameWhole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnNameWhole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnNameWhole, other.cnNameWhole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnNamePartical()).compareTo(other.isSetCnNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnNamePartical, other.cnNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqBrokerEntryOption(");
    boolean first = true;

    if (isSetBrokerIds()) {
      sb.append("brokerIds:");
      if (this.brokerIds == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerIds);
      }
      first = false;
    }
    if (isSetEngNameWhole()) {
      if (!first) sb.append(", ");
      sb.append("engNameWhole:");
      if (this.engNameWhole == null) {
        sb.append("null");
      } else {
        sb.append(this.engNameWhole);
      }
      first = false;
    }
    if (isSetEngNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("engNamePartical:");
      if (this.engNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.engNamePartical);
      }
      first = false;
    }
    if (isSetCnNameWhole()) {
      if (!first) sb.append(", ");
      sb.append("cnNameWhole:");
      if (this.cnNameWhole == null) {
        sb.append("null");
      } else {
        sb.append(this.cnNameWhole);
      }
      first = false;
    }
    if (isSetCnNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("cnNamePartical:");
      if (this.cnNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.cnNamePartical);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqBrokerEntryOptionStandardSchemeFactory implements SchemeFactory {
    public ReqBrokerEntryOptionStandardScheme getScheme() {
      return new ReqBrokerEntryOptionStandardScheme();
    }
  }

  private static class ReqBrokerEntryOptionStandardScheme extends StandardScheme<ReqBrokerEntryOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqBrokerEntryOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.brokerIds = new ArrayList<Integer>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  int _elem10;
                  _elem10 = iprot.readI32();
                  struct.brokerIds.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setBrokerIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENG_NAME_WHOLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engNameWhole = iprot.readString();
              struct.setEngNameWholeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENG_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engNamePartical = iprot.readString();
              struct.setEngNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CN_NAME_WHOLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnNameWhole = iprot.readString();
              struct.setCnNameWholeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CN_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnNamePartical = iprot.readString();
              struct.setCnNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqBrokerEntryOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerIds != null) {
        if (struct.isSetBrokerIds()) {
          oprot.writeFieldBegin(BROKER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.brokerIds.size()));
            for (int _iter11 : struct.brokerIds)
            {
              oprot.writeI32(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.engNameWhole != null) {
        if (struct.isSetEngNameWhole()) {
          oprot.writeFieldBegin(ENG_NAME_WHOLE_FIELD_DESC);
          oprot.writeString(struct.engNameWhole);
          oprot.writeFieldEnd();
        }
      }
      if (struct.engNamePartical != null) {
        if (struct.isSetEngNamePartical()) {
          oprot.writeFieldBegin(ENG_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.engNamePartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnNameWhole != null) {
        if (struct.isSetCnNameWhole()) {
          oprot.writeFieldBegin(CN_NAME_WHOLE_FIELD_DESC);
          oprot.writeString(struct.cnNameWhole);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnNamePartical != null) {
        if (struct.isSetCnNamePartical()) {
          oprot.writeFieldBegin(CN_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.cnNamePartical);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqBrokerEntryOptionTupleSchemeFactory implements SchemeFactory {
    public ReqBrokerEntryOptionTupleScheme getScheme() {
      return new ReqBrokerEntryOptionTupleScheme();
    }
  }

  private static class ReqBrokerEntryOptionTupleScheme extends TupleScheme<ReqBrokerEntryOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqBrokerEntryOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerIds()) {
        optionals.set(0);
      }
      if (struct.isSetEngNameWhole()) {
        optionals.set(1);
      }
      if (struct.isSetEngNamePartical()) {
        optionals.set(2);
      }
      if (struct.isSetCnNameWhole()) {
        optionals.set(3);
      }
      if (struct.isSetCnNamePartical()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetBrokerIds()) {
        {
          oprot.writeI32(struct.brokerIds.size());
          for (int _iter12 : struct.brokerIds)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
      if (struct.isSetEngNameWhole()) {
        oprot.writeString(struct.engNameWhole);
      }
      if (struct.isSetEngNamePartical()) {
        oprot.writeString(struct.engNamePartical);
      }
      if (struct.isSetCnNameWhole()) {
        oprot.writeString(struct.cnNameWhole);
      }
      if (struct.isSetCnNamePartical()) {
        oprot.writeString(struct.cnNamePartical);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqBrokerEntryOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.brokerIds = new ArrayList<Integer>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            int _elem15;
            _elem15 = iprot.readI32();
            struct.brokerIds.add(_elem15);
          }
        }
        struct.setBrokerIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.engNameWhole = iprot.readString();
        struct.setEngNameWholeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.engNamePartical = iprot.readString();
        struct.setEngNameParticalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cnNameWhole = iprot.readString();
        struct.setCnNameWholeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cnNamePartical = iprot.readString();
        struct.setCnNameParticalIsSet(true);
      }
    }
  }

}

