//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ContractTreeNodeType = {
'EXCHANGE' : 1,
'COMMODITY' : 2,
'CONTRACT' : 3
};
PreviewState = {
'EMPTY' : 0,
'GEN_TASK_RUNNING' : 1,
'FINISH' : 2,
'GEN_FAIL' : 3
};
CommodityActiveConfig = function(args) {
  this.sledCommodityId = null;
  this.exchangeName = null;
  this.commodityName = null;
  this.activeMonths = null;
  this.activeType = null;
  this.fixedCode = null;
  if (args) {
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.exchangeName !== undefined) {
      this.exchangeName = args.exchangeName;
    }
    if (args.commodityName !== undefined) {
      this.commodityName = args.commodityName;
    }
    if (args.activeMonths !== undefined) {
      this.activeMonths = args.activeMonths;
    }
    if (args.activeType !== undefined) {
      this.activeType = args.activeType;
    }
    if (args.fixedCode !== undefined) {
      this.fixedCode = args.fixedCode;
    }
  }
};
CommodityActiveConfig.prototype = {};
CommodityActiveConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.commodityName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.activeMonths = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.activeMonths.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.activeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.fixedCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommodityActiveConfig.prototype.write = function(output) {
  output.writeStructBegin('CommodityActiveConfig');
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 1);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.exchangeName !== null && this.exchangeName !== undefined) {
    output.writeFieldBegin('exchangeName', Thrift.Type.STRING, 2);
    output.writeString(this.exchangeName);
    output.writeFieldEnd();
  }
  if (this.commodityName !== null && this.commodityName !== undefined) {
    output.writeFieldBegin('commodityName', Thrift.Type.STRING, 3);
    output.writeString(this.commodityName);
    output.writeFieldEnd();
  }
  if (this.activeMonths !== null && this.activeMonths !== undefined) {
    output.writeFieldBegin('activeMonths', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.activeMonths.length);
    for (var iter7 in this.activeMonths)
    {
      if (this.activeMonths.hasOwnProperty(iter7))
      {
        iter7 = this.activeMonths[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.activeType !== null && this.activeType !== undefined) {
    output.writeFieldBegin('activeType', Thrift.Type.I32, 5);
    output.writeI32(this.activeType);
    output.writeFieldEnd();
  }
  if (this.fixedCode !== null && this.fixedCode !== undefined) {
    output.writeFieldBegin('fixedCode', Thrift.Type.STRING, 6);
    output.writeString(this.fixedCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommodityActiveConfigPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
CommodityActiveConfigPage.prototype = {};
CommodityActiveConfigPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.page = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new CommodityActiveConfig();
          elem14.read(input);
          this.page.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommodityActiveConfigPage.prototype.write = function(output) {
  output.writeStructBegin('CommodityActiveConfigPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter15 in this.page)
    {
      if (this.page.hasOwnProperty(iter15))
      {
        iter15 = this.page[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqCommodityActiveConfigOption = function(args) {
  this.commodityNamePartical = null;
  this.commodityId = null;
  this.activeType = null;
  if (args) {
    if (args.commodityNamePartical !== undefined) {
      this.commodityNamePartical = args.commodityNamePartical;
    }
    if (args.commodityId !== undefined) {
      this.commodityId = args.commodityId;
    }
    if (args.activeType !== undefined) {
      this.activeType = args.activeType;
    }
  }
};
ReqCommodityActiveConfigOption.prototype = {};
ReqCommodityActiveConfigOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.commodityNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.commodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.activeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqCommodityActiveConfigOption.prototype.write = function(output) {
  output.writeStructBegin('ReqCommodityActiveConfigOption');
  if (this.commodityNamePartical !== null && this.commodityNamePartical !== undefined) {
    output.writeFieldBegin('commodityNamePartical', Thrift.Type.STRING, 1);
    output.writeString(this.commodityNamePartical);
    output.writeFieldEnd();
  }
  if (this.commodityId !== null && this.commodityId !== undefined) {
    output.writeFieldBegin('commodityId', Thrift.Type.I32, 2);
    output.writeI32(this.commodityId);
    output.writeFieldEnd();
  }
  if (this.activeType !== null && this.activeType !== undefined) {
    output.writeFieldBegin('activeType', Thrift.Type.I32, 3);
    output.writeI32(this.activeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommodityRegister = function(args) {
  this.sledCommodityId = null;
  this.exchangeName = null;
  this.commodityName = null;
  this.registerPriority = null;
  this.activeShowCount = null;
  this.inactiveShowCount = null;
  this.platformEnv = null;
  this.orderIndex = null;
  this.activeType = null;
  this.fixedCode = null;
  if (args) {
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.exchangeName !== undefined) {
      this.exchangeName = args.exchangeName;
    }
    if (args.commodityName !== undefined) {
      this.commodityName = args.commodityName;
    }
    if (args.registerPriority !== undefined) {
      this.registerPriority = args.registerPriority;
    }
    if (args.activeShowCount !== undefined) {
      this.activeShowCount = args.activeShowCount;
    }
    if (args.inactiveShowCount !== undefined) {
      this.inactiveShowCount = args.inactiveShowCount;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.orderIndex !== undefined) {
      this.orderIndex = args.orderIndex;
    }
    if (args.activeType !== undefined) {
      this.activeType = args.activeType;
    }
    if (args.fixedCode !== undefined) {
      this.fixedCode = args.fixedCode;
    }
  }
};
CommodityRegister.prototype = {};
CommodityRegister.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.commodityName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.registerPriority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.activeShowCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.inactiveShowCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.orderIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.activeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.fixedCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommodityRegister.prototype.write = function(output) {
  output.writeStructBegin('CommodityRegister');
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 1);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.exchangeName !== null && this.exchangeName !== undefined) {
    output.writeFieldBegin('exchangeName', Thrift.Type.STRING, 2);
    output.writeString(this.exchangeName);
    output.writeFieldEnd();
  }
  if (this.commodityName !== null && this.commodityName !== undefined) {
    output.writeFieldBegin('commodityName', Thrift.Type.STRING, 3);
    output.writeString(this.commodityName);
    output.writeFieldEnd();
  }
  if (this.registerPriority !== null && this.registerPriority !== undefined) {
    output.writeFieldBegin('registerPriority', Thrift.Type.I32, 4);
    output.writeI32(this.registerPriority);
    output.writeFieldEnd();
  }
  if (this.activeShowCount !== null && this.activeShowCount !== undefined) {
    output.writeFieldBegin('activeShowCount', Thrift.Type.I32, 5);
    output.writeI32(this.activeShowCount);
    output.writeFieldEnd();
  }
  if (this.inactiveShowCount !== null && this.inactiveShowCount !== undefined) {
    output.writeFieldBegin('inactiveShowCount', Thrift.Type.I32, 6);
    output.writeI32(this.inactiveShowCount);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 7);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.orderIndex !== null && this.orderIndex !== undefined) {
    output.writeFieldBegin('orderIndex', Thrift.Type.I32, 8);
    output.writeI32(this.orderIndex);
    output.writeFieldEnd();
  }
  if (this.activeType !== null && this.activeType !== undefined) {
    output.writeFieldBegin('activeType', Thrift.Type.I32, 9);
    output.writeI32(this.activeType);
    output.writeFieldEnd();
  }
  if (this.fixedCode !== null && this.fixedCode !== undefined) {
    output.writeFieldBegin('fixedCode', Thrift.Type.STRING, 10);
    output.writeString(this.fixedCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommodityRegisterPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
CommodityRegisterPage.prototype = {};
CommodityRegisterPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.page = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new CommodityRegister();
          elem22.read(input);
          this.page.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommodityRegisterPage.prototype.write = function(output) {
  output.writeStructBegin('CommodityRegisterPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter23 in this.page)
    {
      if (this.page.hasOwnProperty(iter23))
      {
        iter23 = this.page[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqCommodityRegisterOption = function(args) {
  this.commodityNamePartical = null;
  this.platformEnv = null;
  if (args) {
    if (args.commodityNamePartical !== undefined) {
      this.commodityNamePartical = args.commodityNamePartical;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
  }
};
ReqCommodityRegisterOption.prototype = {};
ReqCommodityRegisterOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.commodityNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqCommodityRegisterOption.prototype.write = function(output) {
  output.writeStructBegin('ReqCommodityRegisterOption');
  if (this.commodityNamePartical !== null && this.commodityNamePartical !== undefined) {
    output.writeFieldBegin('commodityNamePartical', Thrift.Type.STRING, 1);
    output.writeString(this.commodityNamePartical);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 2);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuotationAccountInfo = function(args) {
  this.accountId = null;
  this.accountName = null;
  this.accountpwd = null;
  this.nickName = null;
  this.platform = null;
  this.brokerId = null;
  this.brokerAccessId = null;
  this.accountProperties = null;
  this.accountState = null;
  this.accessState = null;
  this.invalidReason = null;
  this.invalidErrorCode = null;
  this.apiRetCode = null;
  this.maxRegisterCount = null;
  this.createTimestamp = null;
  this.lastModifyTimestamp = null;
  this.platformEnv = null;
  this.brokerName = null;
  this.brokerAccessName = null;
  this.deploySet = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.accountName !== undefined) {
      this.accountName = args.accountName;
    }
    if (args.accountpwd !== undefined) {
      this.accountpwd = args.accountpwd;
    }
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    }
    if (args.brokerId !== undefined) {
      this.brokerId = args.brokerId;
    }
    if (args.brokerAccessId !== undefined) {
      this.brokerAccessId = args.brokerAccessId;
    }
    if (args.accountProperties !== undefined) {
      this.accountProperties = args.accountProperties;
    }
    if (args.accountState !== undefined) {
      this.accountState = args.accountState;
    }
    if (args.accessState !== undefined) {
      this.accessState = args.accessState;
    }
    if (args.invalidReason !== undefined) {
      this.invalidReason = args.invalidReason;
    }
    if (args.invalidErrorCode !== undefined) {
      this.invalidErrorCode = args.invalidErrorCode;
    }
    if (args.apiRetCode !== undefined) {
      this.apiRetCode = args.apiRetCode;
    }
    if (args.maxRegisterCount !== undefined) {
      this.maxRegisterCount = args.maxRegisterCount;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModifyTimestamp !== undefined) {
      this.lastModifyTimestamp = args.lastModifyTimestamp;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.brokerName !== undefined) {
      this.brokerName = args.brokerName;
    }
    if (args.brokerAccessName !== undefined) {
      this.brokerAccessName = args.brokerAccessName;
    }
    if (args.deploySet !== undefined) {
      this.deploySet = args.deploySet;
    }
  }
};
QuotationAccountInfo.prototype = {};
QuotationAccountInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountpwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.brokerId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.brokerAccessId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.accountProperties = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          if (_i29 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key30 = null;
          var val31 = null;
          key30 = input.readString().value;
          val31 = input.readString().value;
          this.accountProperties[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.accountState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.accessState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.invalidReason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.invalidErrorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.apiRetCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.maxRegisterCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.lastModifyTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.brokerName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.brokerAccessName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.deploySet = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuotationAccountInfo.prototype.write = function(output) {
  output.writeStructBegin('QuotationAccountInfo');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 1);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.accountName !== null && this.accountName !== undefined) {
    output.writeFieldBegin('accountName', Thrift.Type.STRING, 2);
    output.writeString(this.accountName);
    output.writeFieldEnd();
  }
  if (this.accountpwd !== null && this.accountpwd !== undefined) {
    output.writeFieldBegin('accountpwd', Thrift.Type.STRING, 3);
    output.writeString(this.accountpwd);
    output.writeFieldEnd();
  }
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 4);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 5);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.brokerId !== null && this.brokerId !== undefined) {
    output.writeFieldBegin('brokerId', Thrift.Type.I32, 6);
    output.writeI32(this.brokerId);
    output.writeFieldEnd();
  }
  if (this.brokerAccessId !== null && this.brokerAccessId !== undefined) {
    output.writeFieldBegin('brokerAccessId', Thrift.Type.I32, 7);
    output.writeI32(this.brokerAccessId);
    output.writeFieldEnd();
  }
  if (this.accountProperties !== null && this.accountProperties !== undefined) {
    output.writeFieldBegin('accountProperties', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.accountProperties));
    for (var kiter32 in this.accountProperties)
    {
      if (this.accountProperties.hasOwnProperty(kiter32))
      {
        var viter33 = this.accountProperties[kiter32];
        output.writeString(kiter32);
        output.writeString(viter33);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.accountState !== null && this.accountState !== undefined) {
    output.writeFieldBegin('accountState', Thrift.Type.I32, 9);
    output.writeI32(this.accountState);
    output.writeFieldEnd();
  }
  if (this.accessState !== null && this.accessState !== undefined) {
    output.writeFieldBegin('accessState', Thrift.Type.I32, 10);
    output.writeI32(this.accessState);
    output.writeFieldEnd();
  }
  if (this.invalidReason !== null && this.invalidReason !== undefined) {
    output.writeFieldBegin('invalidReason', Thrift.Type.STRING, 11);
    output.writeString(this.invalidReason);
    output.writeFieldEnd();
  }
  if (this.invalidErrorCode !== null && this.invalidErrorCode !== undefined) {
    output.writeFieldBegin('invalidErrorCode', Thrift.Type.I32, 12);
    output.writeI32(this.invalidErrorCode);
    output.writeFieldEnd();
  }
  if (this.apiRetCode !== null && this.apiRetCode !== undefined) {
    output.writeFieldBegin('apiRetCode', Thrift.Type.I32, 13);
    output.writeI32(this.apiRetCode);
    output.writeFieldEnd();
  }
  if (this.maxRegisterCount !== null && this.maxRegisterCount !== undefined) {
    output.writeFieldBegin('maxRegisterCount', Thrift.Type.I32, 14);
    output.writeI32(this.maxRegisterCount);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 15);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifyTimestamp !== null && this.lastModifyTimestamp !== undefined) {
    output.writeFieldBegin('lastModifyTimestamp', Thrift.Type.I64, 16);
    output.writeI64(this.lastModifyTimestamp);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 17);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.brokerName !== null && this.brokerName !== undefined) {
    output.writeFieldBegin('brokerName', Thrift.Type.STRING, 18);
    output.writeString(this.brokerName);
    output.writeFieldEnd();
  }
  if (this.brokerAccessName !== null && this.brokerAccessName !== undefined) {
    output.writeFieldBegin('brokerAccessName', Thrift.Type.STRING, 19);
    output.writeString(this.brokerAccessName);
    output.writeFieldEnd();
  }
  if (this.deploySet !== null && this.deploySet !== undefined) {
    output.writeFieldBegin('deploySet', Thrift.Type.I32, 20);
    output.writeI32(this.deploySet);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuotationAccountInfoPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
QuotationAccountInfoPage.prototype = {};
QuotationAccountInfoPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.page = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new QuotationAccountInfo();
          elem40.read(input);
          this.page.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuotationAccountInfoPage.prototype.write = function(output) {
  output.writeStructBegin('QuotationAccountInfoPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter41 in this.page)
    {
      if (this.page.hasOwnProperty(iter41))
      {
        iter41 = this.page[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqQuotationAccountInfoOption = function(args) {
  this.accountId = null;
  this.platformEnv = null;
  this.accountNamePartical = null;
  this.accountNickNamePartical = null;
  this.brokerNamePartical = null;
  this.commodityNamePartical = null;
  this.platform = null;
  this.deploySet = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.accountNamePartical !== undefined) {
      this.accountNamePartical = args.accountNamePartical;
    }
    if (args.accountNickNamePartical !== undefined) {
      this.accountNickNamePartical = args.accountNickNamePartical;
    }
    if (args.brokerNamePartical !== undefined) {
      this.brokerNamePartical = args.brokerNamePartical;
    }
    if (args.commodityNamePartical !== undefined) {
      this.commodityNamePartical = args.commodityNamePartical;
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    }
    if (args.deploySet !== undefined) {
      this.deploySet = args.deploySet;
    }
  }
};
ReqQuotationAccountInfoOption.prototype = {};
ReqQuotationAccountInfoOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.accountNickNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.brokerNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.commodityNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.deploySet = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqQuotationAccountInfoOption.prototype.write = function(output) {
  output.writeStructBegin('ReqQuotationAccountInfoOption');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 1);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 2);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.accountNamePartical !== null && this.accountNamePartical !== undefined) {
    output.writeFieldBegin('accountNamePartical', Thrift.Type.STRING, 3);
    output.writeString(this.accountNamePartical);
    output.writeFieldEnd();
  }
  if (this.accountNickNamePartical !== null && this.accountNickNamePartical !== undefined) {
    output.writeFieldBegin('accountNickNamePartical', Thrift.Type.STRING, 4);
    output.writeString(this.accountNickNamePartical);
    output.writeFieldEnd();
  }
  if (this.brokerNamePartical !== null && this.brokerNamePartical !== undefined) {
    output.writeFieldBegin('brokerNamePartical', Thrift.Type.STRING, 5);
    output.writeString(this.brokerNamePartical);
    output.writeFieldEnd();
  }
  if (this.commodityNamePartical !== null && this.commodityNamePartical !== undefined) {
    output.writeFieldBegin('commodityNamePartical', Thrift.Type.STRING, 6);
    output.writeString(this.commodityNamePartical);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 7);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.deploySet !== null && this.deploySet !== undefined) {
    output.writeFieldBegin('deploySet', Thrift.Type.I32, 8);
    output.writeI32(this.deploySet);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccountRegisterAbility = function(args) {
  this.registerAbilityId = null;
  this.accountId = null;
  this.sledCommodityId = null;
  this.sledExchangeId = null;
  this.supportType = null;
  this.commodityName = null;
  this.exchangeName = null;
  if (args) {
    if (args.registerAbilityId !== undefined) {
      this.registerAbilityId = args.registerAbilityId;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.sledExchangeId !== undefined) {
      this.sledExchangeId = args.sledExchangeId;
    }
    if (args.supportType !== undefined) {
      this.supportType = args.supportType;
    }
    if (args.commodityName !== undefined) {
      this.commodityName = args.commodityName;
    }
    if (args.exchangeName !== undefined) {
      this.exchangeName = args.exchangeName;
    }
  }
};
AccountRegisterAbility.prototype = {};
AccountRegisterAbility.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.registerAbilityId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sledExchangeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.supportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.commodityName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountRegisterAbility.prototype.write = function(output) {
  output.writeStructBegin('AccountRegisterAbility');
  if (this.registerAbilityId !== null && this.registerAbilityId !== undefined) {
    output.writeFieldBegin('registerAbilityId', Thrift.Type.I64, 1);
    output.writeI64(this.registerAbilityId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 2);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 3);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.sledExchangeId !== null && this.sledExchangeId !== undefined) {
    output.writeFieldBegin('sledExchangeId', Thrift.Type.I32, 4);
    output.writeI32(this.sledExchangeId);
    output.writeFieldEnd();
  }
  if (this.supportType !== null && this.supportType !== undefined) {
    output.writeFieldBegin('supportType', Thrift.Type.I32, 5);
    output.writeI32(this.supportType);
    output.writeFieldEnd();
  }
  if (this.commodityName !== null && this.commodityName !== undefined) {
    output.writeFieldBegin('commodityName', Thrift.Type.STRING, 6);
    output.writeString(this.commodityName);
    output.writeFieldEnd();
  }
  if (this.exchangeName !== null && this.exchangeName !== undefined) {
    output.writeFieldBegin('exchangeName', Thrift.Type.STRING, 7);
    output.writeString(this.exchangeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommodityRegisterAbility = function(args) {
  this.registerAbilityId = null;
  this.accountId = null;
  this.sledCommodityId = null;
  this.sledExchangeId = null;
  this.commodityName = null;
  if (args) {
    if (args.registerAbilityId !== undefined) {
      this.registerAbilityId = args.registerAbilityId;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.sledExchangeId !== undefined) {
      this.sledExchangeId = args.sledExchangeId;
    }
    if (args.commodityName !== undefined) {
      this.commodityName = args.commodityName;
    }
  }
};
CommodityRegisterAbility.prototype = {};
CommodityRegisterAbility.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.registerAbilityId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sledExchangeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.commodityName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommodityRegisterAbility.prototype.write = function(output) {
  output.writeStructBegin('CommodityRegisterAbility');
  if (this.registerAbilityId !== null && this.registerAbilityId !== undefined) {
    output.writeFieldBegin('registerAbilityId', Thrift.Type.I64, 1);
    output.writeI64(this.registerAbilityId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 2);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 3);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.sledExchangeId !== null && this.sledExchangeId !== undefined) {
    output.writeFieldBegin('sledExchangeId', Thrift.Type.I32, 4);
    output.writeI32(this.sledExchangeId);
    output.writeFieldEnd();
  }
  if (this.commodityName !== null && this.commodityName !== undefined) {
    output.writeFieldBegin('commodityName', Thrift.Type.STRING, 6);
    output.writeString(this.commodityName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExchangeRegisterAbility = function(args) {
  this.accountId = null;
  this.sledExchangeId = null;
  this.supportType = null;
  this.exchangeName = null;
  this.commodityAbilities = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.sledExchangeId !== undefined) {
      this.sledExchangeId = args.sledExchangeId;
    }
    if (args.supportType !== undefined) {
      this.supportType = args.supportType;
    }
    if (args.exchangeName !== undefined) {
      this.exchangeName = args.exchangeName;
    }
    if (args.commodityAbilities !== undefined) {
      this.commodityAbilities = args.commodityAbilities;
    }
  }
};
ExchangeRegisterAbility.prototype = {};
ExchangeRegisterAbility.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sledExchangeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.supportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.commodityAbilities = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new CommodityRegisterAbility();
          elem48.read(input);
          this.commodityAbilities.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeRegisterAbility.prototype.write = function(output) {
  output.writeStructBegin('ExchangeRegisterAbility');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 1);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.sledExchangeId !== null && this.sledExchangeId !== undefined) {
    output.writeFieldBegin('sledExchangeId', Thrift.Type.I32, 2);
    output.writeI32(this.sledExchangeId);
    output.writeFieldEnd();
  }
  if (this.supportType !== null && this.supportType !== undefined) {
    output.writeFieldBegin('supportType', Thrift.Type.I32, 4);
    output.writeI32(this.supportType);
    output.writeFieldEnd();
  }
  if (this.exchangeName !== null && this.exchangeName !== undefined) {
    output.writeFieldBegin('exchangeName', Thrift.Type.STRING, 5);
    output.writeString(this.exchangeName);
    output.writeFieldEnd();
  }
  if (this.commodityAbilities !== null && this.commodityAbilities !== undefined) {
    output.writeFieldBegin('commodityAbilities', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.commodityAbilities.length);
    for (var iter49 in this.commodityAbilities)
    {
      if (this.commodityAbilities.hasOwnProperty(iter49))
      {
        iter49 = this.commodityAbilities[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqAccountRegisterAbilityOption = function(args) {
  this.accountId = null;
  this.sledCommodityId = null;
  this.sledExchangeId = null;
  this.exchangeNamePartical = null;
  this.commodityNamePartical = null;
  this.registerAbilityId = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.sledExchangeId !== undefined) {
      this.sledExchangeId = args.sledExchangeId;
    }
    if (args.exchangeNamePartical !== undefined) {
      this.exchangeNamePartical = args.exchangeNamePartical;
    }
    if (args.commodityNamePartical !== undefined) {
      this.commodityNamePartical = args.commodityNamePartical;
    }
    if (args.registerAbilityId !== undefined) {
      this.registerAbilityId = args.registerAbilityId;
    }
  }
};
ReqAccountRegisterAbilityOption.prototype = {};
ReqAccountRegisterAbilityOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledExchangeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.commodityNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.registerAbilityId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqAccountRegisterAbilityOption.prototype.write = function(output) {
  output.writeStructBegin('ReqAccountRegisterAbilityOption');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 1);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 2);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.sledExchangeId !== null && this.sledExchangeId !== undefined) {
    output.writeFieldBegin('sledExchangeId', Thrift.Type.I32, 3);
    output.writeI32(this.sledExchangeId);
    output.writeFieldEnd();
  }
  if (this.exchangeNamePartical !== null && this.exchangeNamePartical !== undefined) {
    output.writeFieldBegin('exchangeNamePartical', Thrift.Type.STRING, 4);
    output.writeString(this.exchangeNamePartical);
    output.writeFieldEnd();
  }
  if (this.commodityNamePartical !== null && this.commodityNamePartical !== undefined) {
    output.writeFieldBegin('commodityNamePartical', Thrift.Type.STRING, 5);
    output.writeString(this.commodityNamePartical);
    output.writeFieldEnd();
  }
  if (this.registerAbilityId !== null && this.registerAbilityId !== undefined) {
    output.writeFieldBegin('registerAbilityId', Thrift.Type.I64, 6);
    output.writeI64(this.registerAbilityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tree = function(args) {
  this.name = null;
  this.treeJson = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.treeJson !== undefined) {
      this.treeJson = args.treeJson;
    }
  }
};
Tree.prototype = {};
Tree.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.treeJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tree.prototype.write = function(output) {
  output.writeStructBegin('Tree');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.treeJson !== null && this.treeJson !== undefined) {
    output.writeFieldBegin('treeJson', Thrift.Type.STRING, 2);
    output.writeString(this.treeJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Item = function(args) {
  this.value = null;
  this.label = null;
  if (args) {
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.label !== undefined) {
      this.label = args.label;
    }
  }
};
Item.prototype = {};
Item.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Item.prototype.write = function(output) {
  output.writeStructBegin('Item');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 2);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscribedContract = function(args) {
  this.accountId = null;
  this.sledCommodityId = null;
  this.sledContractId = null;
  this.isActiveMonth = null;
  this.platformEnv = null;
  this.sledExchangeId = null;
  this.exchangeName = null;
  this.commodityName = null;
  this.accountName = null;
  this.contractName = null;
  this.sledExchangeMic = null;
  this.deploySet = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.sledContractId !== undefined) {
      this.sledContractId = args.sledContractId;
    }
    if (args.isActiveMonth !== undefined) {
      this.isActiveMonth = args.isActiveMonth;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.sledExchangeId !== undefined) {
      this.sledExchangeId = args.sledExchangeId;
    }
    if (args.exchangeName !== undefined) {
      this.exchangeName = args.exchangeName;
    }
    if (args.commodityName !== undefined) {
      this.commodityName = args.commodityName;
    }
    if (args.accountName !== undefined) {
      this.accountName = args.accountName;
    }
    if (args.contractName !== undefined) {
      this.contractName = args.contractName;
    }
    if (args.sledExchangeMic !== undefined) {
      this.sledExchangeMic = args.sledExchangeMic;
    }
    if (args.deploySet !== undefined) {
      this.deploySet = args.deploySet;
    }
  }
};
SubscribedContract.prototype = {};
SubscribedContract.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledContractId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isActiveMonth = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.sledExchangeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.commodityName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.accountName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.contractName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.sledExchangeMic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.deploySet = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscribedContract.prototype.write = function(output) {
  output.writeStructBegin('SubscribedContract');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 1);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 2);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.sledContractId !== null && this.sledContractId !== undefined) {
    output.writeFieldBegin('sledContractId', Thrift.Type.I32, 3);
    output.writeI32(this.sledContractId);
    output.writeFieldEnd();
  }
  if (this.isActiveMonth !== null && this.isActiveMonth !== undefined) {
    output.writeFieldBegin('isActiveMonth', Thrift.Type.BOOL, 4);
    output.writeBool(this.isActiveMonth);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 5);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.sledExchangeId !== null && this.sledExchangeId !== undefined) {
    output.writeFieldBegin('sledExchangeId', Thrift.Type.I32, 8);
    output.writeI32(this.sledExchangeId);
    output.writeFieldEnd();
  }
  if (this.exchangeName !== null && this.exchangeName !== undefined) {
    output.writeFieldBegin('exchangeName', Thrift.Type.STRING, 9);
    output.writeString(this.exchangeName);
    output.writeFieldEnd();
  }
  if (this.commodityName !== null && this.commodityName !== undefined) {
    output.writeFieldBegin('commodityName', Thrift.Type.STRING, 10);
    output.writeString(this.commodityName);
    output.writeFieldEnd();
  }
  if (this.accountName !== null && this.accountName !== undefined) {
    output.writeFieldBegin('accountName', Thrift.Type.STRING, 11);
    output.writeString(this.accountName);
    output.writeFieldEnd();
  }
  if (this.contractName !== null && this.contractName !== undefined) {
    output.writeFieldBegin('contractName', Thrift.Type.STRING, 12);
    output.writeString(this.contractName);
    output.writeFieldEnd();
  }
  if (this.sledExchangeMic !== null && this.sledExchangeMic !== undefined) {
    output.writeFieldBegin('sledExchangeMic', Thrift.Type.STRING, 13);
    output.writeString(this.sledExchangeMic);
    output.writeFieldEnd();
  }
  if (this.deploySet !== null && this.deploySet !== undefined) {
    output.writeFieldBegin('deploySet', Thrift.Type.I32, 14);
    output.writeI32(this.deploySet);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscribedContractPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SubscribedContractPage.prototype = {};
SubscribedContractPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.page = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = new SubscribedContract();
          elem56.read(input);
          this.page.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscribedContractPage.prototype.write = function(output) {
  output.writeStructBegin('SubscribedContractPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter57 in this.page)
    {
      if (this.page.hasOwnProperty(iter57))
      {
        iter57 = this.page[iter57];
        iter57.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqSubscribedContractOption = function(args) {
  this.accountNamePartical = null;
  this.commodityNamePartical = null;
  this.platformEnv = null;
  this.deploySet = null;
  if (args) {
    if (args.accountNamePartical !== undefined) {
      this.accountNamePartical = args.accountNamePartical;
    }
    if (args.commodityNamePartical !== undefined) {
      this.commodityNamePartical = args.commodityNamePartical;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.deploySet !== undefined) {
      this.deploySet = args.deploySet;
    }
  }
};
ReqSubscribedContractOption.prototype = {};
ReqSubscribedContractOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.commodityNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.deploySet = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqSubscribedContractOption.prototype.write = function(output) {
  output.writeStructBegin('ReqSubscribedContractOption');
  if (this.accountNamePartical !== null && this.accountNamePartical !== undefined) {
    output.writeFieldBegin('accountNamePartical', Thrift.Type.STRING, 1);
    output.writeString(this.accountNamePartical);
    output.writeFieldEnd();
  }
  if (this.commodityNamePartical !== null && this.commodityNamePartical !== undefined) {
    output.writeFieldBegin('commodityNamePartical', Thrift.Type.STRING, 2);
    output.writeString(this.commodityNamePartical);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 3);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.deploySet !== null && this.deploySet !== undefined) {
    output.writeFieldBegin('deploySet', Thrift.Type.I32, 4);
    output.writeI32(this.deploySet);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractTreeNode = function(args) {
  this.id = null;
  this.code = null;
  this.name = null;
  this.nodeType = null;
  this.platformEnv = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.nodeType !== undefined) {
      this.nodeType = args.nodeType;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
  }
};
ContractTreeNode.prototype = {};
ContractTreeNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.nodeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTreeNode.prototype.write = function(output) {
  output.writeStructBegin('ContractTreeNode');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.nodeType !== null && this.nodeType !== undefined) {
    output.writeFieldBegin('nodeType', Thrift.Type.I32, 4);
    output.writeI32(this.nodeType);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 5);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PreviewFields = function(args) {
  this.activeMonths = null;
  this.inactiveMonths = null;
  this.activeSubscribeNum = null;
  this.inActiveSubscribeNum = null;
  this.backupCounts = null;
  this.fixedCode = null;
  if (args) {
    if (args.activeMonths !== undefined) {
      this.activeMonths = args.activeMonths;
    }
    if (args.inactiveMonths !== undefined) {
      this.inactiveMonths = args.inactiveMonths;
    }
    if (args.activeSubscribeNum !== undefined) {
      this.activeSubscribeNum = args.activeSubscribeNum;
    }
    if (args.inActiveSubscribeNum !== undefined) {
      this.inActiveSubscribeNum = args.inActiveSubscribeNum;
    }
    if (args.backupCounts !== undefined) {
      this.backupCounts = args.backupCounts;
    }
    if (args.fixedCode !== undefined) {
      this.fixedCode = args.fixedCode;
    }
  }
};
PreviewFields.prototype = {};
PreviewFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activeMonths = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.inactiveMonths = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.activeSubscribeNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.inActiveSubscribeNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.backupCounts = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.fixedCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PreviewFields.prototype.write = function(output) {
  output.writeStructBegin('PreviewFields');
  if (this.activeMonths !== null && this.activeMonths !== undefined) {
    output.writeFieldBegin('activeMonths', Thrift.Type.STRING, 1);
    output.writeString(this.activeMonths);
    output.writeFieldEnd();
  }
  if (this.inactiveMonths !== null && this.inactiveMonths !== undefined) {
    output.writeFieldBegin('inactiveMonths', Thrift.Type.STRING, 2);
    output.writeString(this.inactiveMonths);
    output.writeFieldEnd();
  }
  if (this.activeSubscribeNum !== null && this.activeSubscribeNum !== undefined) {
    output.writeFieldBegin('activeSubscribeNum', Thrift.Type.I32, 3);
    output.writeI32(this.activeSubscribeNum);
    output.writeFieldEnd();
  }
  if (this.inActiveSubscribeNum !== null && this.inActiveSubscribeNum !== undefined) {
    output.writeFieldBegin('inActiveSubscribeNum', Thrift.Type.I32, 4);
    output.writeI32(this.inActiveSubscribeNum);
    output.writeFieldEnd();
  }
  if (this.backupCounts !== null && this.backupCounts !== undefined) {
    output.writeFieldBegin('backupCounts', Thrift.Type.I32, 5);
    output.writeI32(this.backupCounts);
    output.writeFieldEnd();
  }
  if (this.fixedCode !== null && this.fixedCode !== undefined) {
    output.writeFieldBegin('fixedCode', Thrift.Type.STRING, 6);
    output.writeString(this.fixedCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlanningSubscribedInfo = function(args) {
  this.platformEnv = null;
  this.sledExchangeId = null;
  this.sledCommodityId = null;
  this.exchangeName = null;
  this.commodityName = null;
  this.fields = null;
  if (args) {
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.sledExchangeId !== undefined) {
      this.sledExchangeId = args.sledExchangeId;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.exchangeName !== undefined) {
      this.exchangeName = args.exchangeName;
    }
    if (args.commodityName !== undefined) {
      this.commodityName = args.commodityName;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
PlanningSubscribedInfo.prototype = {};
PlanningSubscribedInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sledExchangeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.commodityName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new PreviewFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlanningSubscribedInfo.prototype.write = function(output) {
  output.writeStructBegin('PlanningSubscribedInfo');
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 1);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.sledExchangeId !== null && this.sledExchangeId !== undefined) {
    output.writeFieldBegin('sledExchangeId', Thrift.Type.I32, 2);
    output.writeI32(this.sledExchangeId);
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 3);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.exchangeName !== null && this.exchangeName !== undefined) {
    output.writeFieldBegin('exchangeName', Thrift.Type.STRING, 4);
    output.writeString(this.exchangeName);
    output.writeFieldEnd();
  }
  if (this.commodityName !== null && this.commodityName !== undefined) {
    output.writeFieldBegin('commodityName', Thrift.Type.STRING, 5);
    output.writeString(this.commodityName);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 6);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RePlanSubscribedInfoPreview = function(args) {
  this.platformEnv = null;
  this.sledExchangeId = null;
  this.sledCommodityId = null;
  this.exchangeName = null;
  this.commodityName = null;
  this.isCurrentSubcribe = null;
  this.isReplanSubcribe = null;
  this.rePlanFields = null;
  this.currentFields = null;
  this.isFieldsDifferent = null;
  if (args) {
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.sledExchangeId !== undefined) {
      this.sledExchangeId = args.sledExchangeId;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.exchangeName !== undefined) {
      this.exchangeName = args.exchangeName;
    }
    if (args.commodityName !== undefined) {
      this.commodityName = args.commodityName;
    }
    if (args.isCurrentSubcribe !== undefined) {
      this.isCurrentSubcribe = args.isCurrentSubcribe;
    }
    if (args.isReplanSubcribe !== undefined) {
      this.isReplanSubcribe = args.isReplanSubcribe;
    }
    if (args.rePlanFields !== undefined) {
      this.rePlanFields = args.rePlanFields;
    }
    if (args.currentFields !== undefined) {
      this.currentFields = args.currentFields;
    }
    if (args.isFieldsDifferent !== undefined) {
      this.isFieldsDifferent = args.isFieldsDifferent;
    }
  }
};
RePlanSubscribedInfoPreview.prototype = {};
RePlanSubscribedInfoPreview.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sledExchangeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.commodityName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isCurrentSubcribe = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isReplanSubcribe = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.rePlanFields = new PreviewFields();
        this.rePlanFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.currentFields = new PreviewFields();
        this.currentFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.isFieldsDifferent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RePlanSubscribedInfoPreview.prototype.write = function(output) {
  output.writeStructBegin('RePlanSubscribedInfoPreview');
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 1);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.sledExchangeId !== null && this.sledExchangeId !== undefined) {
    output.writeFieldBegin('sledExchangeId', Thrift.Type.I32, 2);
    output.writeI32(this.sledExchangeId);
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 3);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.exchangeName !== null && this.exchangeName !== undefined) {
    output.writeFieldBegin('exchangeName', Thrift.Type.STRING, 4);
    output.writeString(this.exchangeName);
    output.writeFieldEnd();
  }
  if (this.commodityName !== null && this.commodityName !== undefined) {
    output.writeFieldBegin('commodityName', Thrift.Type.STRING, 5);
    output.writeString(this.commodityName);
    output.writeFieldEnd();
  }
  if (this.isCurrentSubcribe !== null && this.isCurrentSubcribe !== undefined) {
    output.writeFieldBegin('isCurrentSubcribe', Thrift.Type.BOOL, 6);
    output.writeBool(this.isCurrentSubcribe);
    output.writeFieldEnd();
  }
  if (this.isReplanSubcribe !== null && this.isReplanSubcribe !== undefined) {
    output.writeFieldBegin('isReplanSubcribe', Thrift.Type.BOOL, 7);
    output.writeBool(this.isReplanSubcribe);
    output.writeFieldEnd();
  }
  if (this.rePlanFields !== null && this.rePlanFields !== undefined) {
    output.writeFieldBegin('rePlanFields', Thrift.Type.STRUCT, 8);
    this.rePlanFields.write(output);
    output.writeFieldEnd();
  }
  if (this.currentFields !== null && this.currentFields !== undefined) {
    output.writeFieldBegin('currentFields', Thrift.Type.STRUCT, 9);
    this.currentFields.write(output);
    output.writeFieldEnd();
  }
  if (this.isFieldsDifferent !== null && this.isFieldsDifferent !== undefined) {
    output.writeFieldBegin('isFieldsDifferent', Thrift.Type.BOOL, 10);
    output.writeBool(this.isFieldsDifferent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RePlanSubscribedInfoPreviewPage = function(args) {
  this.total = null;
  this.page = null;
  this.state = null;
  this.stateMsg = null;
  this.lastUpdateTimestampMs = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.stateMsg !== undefined) {
      this.stateMsg = args.stateMsg;
    }
    if (args.lastUpdateTimestampMs !== undefined) {
      this.lastUpdateTimestampMs = args.lastUpdateTimestampMs;
    }
  }
};
RePlanSubscribedInfoPreviewPage.prototype = {};
RePlanSubscribedInfoPreviewPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.page = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = new RePlanSubscribedInfoPreview();
          elem64.read(input);
          this.page.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stateMsg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastUpdateTimestampMs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RePlanSubscribedInfoPreviewPage.prototype.write = function(output) {
  output.writeStructBegin('RePlanSubscribedInfoPreviewPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter65 in this.page)
    {
      if (this.page.hasOwnProperty(iter65))
      {
        iter65 = this.page[iter65];
        iter65.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.stateMsg !== null && this.stateMsg !== undefined) {
    output.writeFieldBegin('stateMsg', Thrift.Type.STRING, 4);
    output.writeString(this.stateMsg);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTimestampMs !== null && this.lastUpdateTimestampMs !== undefined) {
    output.writeFieldBegin('lastUpdateTimestampMs', Thrift.Type.I64, 5);
    output.writeI64(this.lastUpdateTimestampMs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqRePlanSubscribedInfoPreviewOption = function(args) {
  this.platformEnv = null;
  this.commodityNamePartical = null;
  if (args) {
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.commodityNamePartical !== undefined) {
      this.commodityNamePartical = args.commodityNamePartical;
    }
  }
};
ReqRePlanSubscribedInfoPreviewOption.prototype = {};
ReqRePlanSubscribedInfoPreviewOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.commodityNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqRePlanSubscribedInfoPreviewOption.prototype.write = function(output) {
  output.writeStructBegin('ReqRePlanSubscribedInfoPreviewOption');
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 1);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.commodityNamePartical !== null && this.commodityNamePartical !== undefined) {
    output.writeFieldBegin('commodityNamePartical', Thrift.Type.STRING, 2);
    output.writeString(this.commodityNamePartical);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqPlanningSubscribedInfoOption = function(args) {
  this.platformEnv = null;
  this.commodityNamePartical = null;
  if (args) {
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.commodityNamePartical !== undefined) {
      this.commodityNamePartical = args.commodityNamePartical;
    }
  }
};
ReqPlanningSubscribedInfoOption.prototype = {};
ReqPlanningSubscribedInfoOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.commodityNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqPlanningSubscribedInfoOption.prototype.write = function(output) {
  output.writeStructBegin('ReqPlanningSubscribedInfoOption');
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 1);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.commodityNamePartical !== null && this.commodityNamePartical !== undefined) {
    output.writeFieldBegin('commodityNamePartical', Thrift.Type.STRING, 2);
    output.writeString(this.commodityNamePartical);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

