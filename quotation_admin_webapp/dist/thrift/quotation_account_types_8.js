//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


QuotationTechPlatform = {
'NONE' : 0,
'CTP' : 1,
'ESUNNY' : 2
};
QuotationPlatformEnv = {
'NONE' : 0,
'REAL' : 1,
'SIM' : 2
};
DeploySet = {
'MASTER' : 0,
'SLAVE' : 1
};
ContractActiveType = {
'ACTIVE_MONTH' : 0,
'FIXED_CODE' : 1
};
QuotationAccountState = {
'ACCOUNT_DISABLED' : 0,
'ACCOUNT_ENABLED' : 1
};
QuotationAccountAccessState = {
'ACCOUNT_NOT_ACCESS' : 0,
'ACCOUNT_ACTIVE' : 1,
'ACCOUNT_INVALID' : 2
};
SupportType = {
'SET' : 0,
'ALL' : 1
};
QuotationAccountOrderBy = {
'ACCOUNT_ID' : 0,
'CREATE_TIMESTAMP' : 1
};
QueryOrderType = {
'ASC' : 0,
'DESC' : 1
};
ContractActiveRule = function(args) {
  this.sledCommodityId = null;
  this.activeMonthMap = null;
  this.activeType = null;
  this.fixedCode = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  if (args) {
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.activeMonthMap !== undefined) {
      this.activeMonthMap = args.activeMonthMap;
    }
    if (args.activeType !== undefined) {
      this.activeType = args.activeType;
    }
    if (args.fixedCode !== undefined) {
      this.fixedCode = args.fixedCode;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
  }
};
ContractActiveRule.prototype = {};
ContractActiveRule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.activeMonthMap = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readI32().value;
          val7 = input.readBool().value;
          this.activeMonthMap[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.activeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fixedCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractActiveRule.prototype.write = function(output) {
  output.writeStructBegin('ContractActiveRule');
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 1);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.activeMonthMap !== null && this.activeMonthMap !== undefined) {
    output.writeFieldBegin('activeMonthMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.BOOL, Thrift.objectLength(this.activeMonthMap));
    for (var kiter8 in this.activeMonthMap)
    {
      if (this.activeMonthMap.hasOwnProperty(kiter8))
      {
        var viter9 = this.activeMonthMap[kiter8];
        output.writeI32(kiter8);
        output.writeBool(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.activeType !== null && this.activeType !== undefined) {
    output.writeFieldBegin('activeType', Thrift.Type.I32, 3);
    output.writeI32(this.activeType);
    output.writeFieldEnd();
  }
  if (this.fixedCode !== null && this.fixedCode !== undefined) {
    output.writeFieldBegin('fixedCode', Thrift.Type.STRING, 4);
    output.writeString(this.fixedCode);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 6);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 7);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractRegisterRule = function(args) {
  this.sledCommodityId = null;
  this.registerPriority = null;
  this.activeShowCount = null;
  this.inactiveShowCount = null;
  this.platformEnv = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  this.orderIndex = null;
  this.activeType = null;
  this.fixedCode = null;
  if (args) {
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.registerPriority !== undefined) {
      this.registerPriority = args.registerPriority;
    }
    if (args.activeShowCount !== undefined) {
      this.activeShowCount = args.activeShowCount;
    }
    if (args.inactiveShowCount !== undefined) {
      this.inactiveShowCount = args.inactiveShowCount;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
    if (args.orderIndex !== undefined) {
      this.orderIndex = args.orderIndex;
    }
    if (args.activeType !== undefined) {
      this.activeType = args.activeType;
    }
    if (args.fixedCode !== undefined) {
      this.fixedCode = args.fixedCode;
    }
  }
};
ContractRegisterRule.prototype = {};
ContractRegisterRule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.registerPriority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.activeShowCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.inactiveShowCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.orderIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.activeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.fixedCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractRegisterRule.prototype.write = function(output) {
  output.writeStructBegin('ContractRegisterRule');
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 1);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.registerPriority !== null && this.registerPriority !== undefined) {
    output.writeFieldBegin('registerPriority', Thrift.Type.I32, 2);
    output.writeI32(this.registerPriority);
    output.writeFieldEnd();
  }
  if (this.activeShowCount !== null && this.activeShowCount !== undefined) {
    output.writeFieldBegin('activeShowCount', Thrift.Type.I32, 3);
    output.writeI32(this.activeShowCount);
    output.writeFieldEnd();
  }
  if (this.inactiveShowCount !== null && this.inactiveShowCount !== undefined) {
    output.writeFieldBegin('inactiveShowCount', Thrift.Type.I32, 4);
    output.writeI32(this.inactiveShowCount);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 5);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 6);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 7);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  if (this.orderIndex !== null && this.orderIndex !== undefined) {
    output.writeFieldBegin('orderIndex', Thrift.Type.I32, 8);
    output.writeI32(this.orderIndex);
    output.writeFieldEnd();
  }
  if (this.activeType !== null && this.activeType !== undefined) {
    output.writeFieldBegin('activeType', Thrift.Type.I32, 9);
    output.writeI32(this.activeType);
    output.writeFieldEnd();
  }
  if (this.fixedCode !== null && this.fixedCode !== undefined) {
    output.writeFieldBegin('fixedCode', Thrift.Type.STRING, 10);
    output.writeString(this.fixedCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommodityRegisterOrder = function(args) {
  this.sledCommodityId = null;
  this.platformEnv = null;
  this.orderIndex = null;
  if (args) {
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.orderIndex !== undefined) {
      this.orderIndex = args.orderIndex;
    }
  }
};
CommodityRegisterOrder.prototype = {};
CommodityRegisterOrder.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.orderIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommodityRegisterOrder.prototype.write = function(output) {
  output.writeStructBegin('CommodityRegisterOrder');
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 1);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 2);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.orderIndex !== null && this.orderIndex !== undefined) {
    output.writeFieldBegin('orderIndex', Thrift.Type.I32, 3);
    output.writeI32(this.orderIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuotationAccount = function(args) {
  this.accountId = null;
  this.accountName = null;
  this.accountpwd = null;
  this.nickName = null;
  this.platform = null;
  this.brokerId = null;
  this.brokerAccessId = null;
  this.accountProperties = null;
  this.accountState = null;
  this.accessState = null;
  this.invalidReason = null;
  this.invalidErrorCode = null;
  this.apiRetCode = null;
  this.maxRegisterCount = null;
  this.createTimestamp = null;
  this.lastModifyTimestamp = null;
  this.platformEnv = null;
  this.deploySet = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.accountName !== undefined) {
      this.accountName = args.accountName;
    }
    if (args.accountpwd !== undefined) {
      this.accountpwd = args.accountpwd;
    }
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    }
    if (args.brokerId !== undefined) {
      this.brokerId = args.brokerId;
    }
    if (args.brokerAccessId !== undefined) {
      this.brokerAccessId = args.brokerAccessId;
    }
    if (args.accountProperties !== undefined) {
      this.accountProperties = args.accountProperties;
    }
    if (args.accountState !== undefined) {
      this.accountState = args.accountState;
    }
    if (args.accessState !== undefined) {
      this.accessState = args.accessState;
    }
    if (args.invalidReason !== undefined) {
      this.invalidReason = args.invalidReason;
    }
    if (args.invalidErrorCode !== undefined) {
      this.invalidErrorCode = args.invalidErrorCode;
    }
    if (args.apiRetCode !== undefined) {
      this.apiRetCode = args.apiRetCode;
    }
    if (args.maxRegisterCount !== undefined) {
      this.maxRegisterCount = args.maxRegisterCount;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModifyTimestamp !== undefined) {
      this.lastModifyTimestamp = args.lastModifyTimestamp;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.deploySet !== undefined) {
      this.deploySet = args.deploySet;
    }
  }
};
QuotationAccount.prototype = {};
QuotationAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountpwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.brokerId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.brokerAccessId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.accountProperties = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          if (_i15 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key16 = null;
          var val17 = null;
          key16 = input.readString().value;
          val17 = input.readString().value;
          this.accountProperties[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.accountState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.accessState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.invalidReason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.invalidErrorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.apiRetCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.maxRegisterCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.lastModifyTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.deploySet = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuotationAccount.prototype.write = function(output) {
  output.writeStructBegin('QuotationAccount');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 1);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.accountName !== null && this.accountName !== undefined) {
    output.writeFieldBegin('accountName', Thrift.Type.STRING, 2);
    output.writeString(this.accountName);
    output.writeFieldEnd();
  }
  if (this.accountpwd !== null && this.accountpwd !== undefined) {
    output.writeFieldBegin('accountpwd', Thrift.Type.STRING, 3);
    output.writeString(this.accountpwd);
    output.writeFieldEnd();
  }
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 4);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 5);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.brokerId !== null && this.brokerId !== undefined) {
    output.writeFieldBegin('brokerId', Thrift.Type.I32, 6);
    output.writeI32(this.brokerId);
    output.writeFieldEnd();
  }
  if (this.brokerAccessId !== null && this.brokerAccessId !== undefined) {
    output.writeFieldBegin('brokerAccessId', Thrift.Type.I32, 7);
    output.writeI32(this.brokerAccessId);
    output.writeFieldEnd();
  }
  if (this.accountProperties !== null && this.accountProperties !== undefined) {
    output.writeFieldBegin('accountProperties', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.accountProperties));
    for (var kiter18 in this.accountProperties)
    {
      if (this.accountProperties.hasOwnProperty(kiter18))
      {
        var viter19 = this.accountProperties[kiter18];
        output.writeString(kiter18);
        output.writeString(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.accountState !== null && this.accountState !== undefined) {
    output.writeFieldBegin('accountState', Thrift.Type.I32, 9);
    output.writeI32(this.accountState);
    output.writeFieldEnd();
  }
  if (this.accessState !== null && this.accessState !== undefined) {
    output.writeFieldBegin('accessState', Thrift.Type.I32, 10);
    output.writeI32(this.accessState);
    output.writeFieldEnd();
  }
  if (this.invalidReason !== null && this.invalidReason !== undefined) {
    output.writeFieldBegin('invalidReason', Thrift.Type.STRING, 11);
    output.writeString(this.invalidReason);
    output.writeFieldEnd();
  }
  if (this.invalidErrorCode !== null && this.invalidErrorCode !== undefined) {
    output.writeFieldBegin('invalidErrorCode', Thrift.Type.I32, 12);
    output.writeI32(this.invalidErrorCode);
    output.writeFieldEnd();
  }
  if (this.apiRetCode !== null && this.apiRetCode !== undefined) {
    output.writeFieldBegin('apiRetCode', Thrift.Type.I32, 13);
    output.writeI32(this.apiRetCode);
    output.writeFieldEnd();
  }
  if (this.maxRegisterCount !== null && this.maxRegisterCount !== undefined) {
    output.writeFieldBegin('maxRegisterCount', Thrift.Type.I32, 14);
    output.writeI32(this.maxRegisterCount);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 15);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifyTimestamp !== null && this.lastModifyTimestamp !== undefined) {
    output.writeFieldBegin('lastModifyTimestamp', Thrift.Type.I64, 16);
    output.writeI64(this.lastModifyTimestamp);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 17);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.deploySet !== null && this.deploySet !== undefined) {
    output.writeFieldBegin('deploySet', Thrift.Type.I32, 18);
    output.writeI32(this.deploySet);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MicSupportCommodity = function(args) {
  this.supportType = null;
  this.supportCommodityIds = null;
  if (args) {
    if (args.supportType !== undefined) {
      this.supportType = args.supportType;
    }
    if (args.supportCommodityIds !== undefined) {
      this.supportCommodityIds = args.supportCommodityIds;
    }
  }
};
MicSupportCommodity.prototype = {};
MicSupportCommodity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.supportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size20 = 0;
        var _rtmp324;
        this.supportCommodityIds = [];
        var _etype23 = 0;
        _rtmp324 = input.readSetBegin();
        _etype23 = _rtmp324.etype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var elem26 = null;
          elem26 = input.readI32().value;
          this.supportCommodityIds.push(elem26);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MicSupportCommodity.prototype.write = function(output) {
  output.writeStructBegin('MicSupportCommodity');
  if (this.supportType !== null && this.supportType !== undefined) {
    output.writeFieldBegin('supportType', Thrift.Type.I32, 1);
    output.writeI32(this.supportType);
    output.writeFieldEnd();
  }
  if (this.supportCommodityIds !== null && this.supportCommodityIds !== undefined) {
    output.writeFieldBegin('supportCommodityIds', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.supportCommodityIds.length);
    for (var iter27 in this.supportCommodityIds)
    {
      if (this.supportCommodityIds.hasOwnProperty(iter27))
      {
        iter27 = this.supportCommodityIds[iter27];
        output.writeI32(iter27);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuotationAccountSupport = function(args) {
  this.accountId = null;
  this.micSupport = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.micSupport !== undefined) {
      this.micSupport = args.micSupport;
    }
  }
};
QuotationAccountSupport.prototype = {};
QuotationAccountSupport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size28 = 0;
        var _rtmp332;
        this.micSupport = {};
        var _ktype29 = 0;
        var _vtype30 = 0;
        _rtmp332 = input.readMapBegin();
        _ktype29 = _rtmp332.ktype;
        _vtype30 = _rtmp332.vtype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          if (_i33 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key34 = null;
          var val35 = null;
          key34 = input.readString().value;
          val35 = new MicSupportCommodity();
          val35.read(input);
          this.micSupport[key34] = val35;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuotationAccountSupport.prototype.write = function(output) {
  output.writeStructBegin('QuotationAccountSupport');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 1);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.micSupport !== null && this.micSupport !== undefined) {
    output.writeFieldBegin('micSupport', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.micSupport));
    for (var kiter36 in this.micSupport)
    {
      if (this.micSupport.hasOwnProperty(kiter36))
      {
        var viter37 = this.micSupport[kiter36];
        output.writeString(kiter36);
        viter37.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqQuotationAccountSupportOption = function(args) {
  this.accountIds = null;
  if (args) {
    if (args.accountIds !== undefined) {
      this.accountIds = args.accountIds;
    }
  }
};
ReqQuotationAccountSupportOption.prototype = {};
ReqQuotationAccountSupportOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size38 = 0;
        var _rtmp342;
        this.accountIds = [];
        var _etype41 = 0;
        _rtmp342 = input.readSetBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = input.readI64().value;
          this.accountIds.push(elem44);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqQuotationAccountSupportOption.prototype.write = function(output) {
  output.writeStructBegin('ReqQuotationAccountSupportOption');
  if (this.accountIds !== null && this.accountIds !== undefined) {
    output.writeFieldBegin('accountIds', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I64, this.accountIds.length);
    for (var iter45 in this.accountIds)
    {
      if (this.accountIds.hasOwnProperty(iter45))
      {
        iter45 = this.accountIds[iter45];
        output.writeI64(iter45);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuotationAccountSupportPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
QuotationAccountSupportPage.prototype = {};
QuotationAccountSupportPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.page = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new QuotationAccountSupport();
          elem52.read(input);
          this.page.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuotationAccountSupportPage.prototype.write = function(output) {
  output.writeStructBegin('QuotationAccountSupportPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter53 in this.page)
    {
      if (this.page.hasOwnProperty(iter53))
      {
        iter53 = this.page[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccountCommodityRegisterAbility = function(args) {
  this.registerAbilityId = null;
  this.accountId = null;
  this.sledExchangeId = null;
  this.exchangeMic = null;
  this.supportType = null;
  this.sledCommodityId = null;
  this.createTimestamp = null;
  this.lastModifyTimestamp = null;
  if (args) {
    if (args.registerAbilityId !== undefined) {
      this.registerAbilityId = args.registerAbilityId;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.sledExchangeId !== undefined) {
      this.sledExchangeId = args.sledExchangeId;
    }
    if (args.exchangeMic !== undefined) {
      this.exchangeMic = args.exchangeMic;
    }
    if (args.supportType !== undefined) {
      this.supportType = args.supportType;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModifyTimestamp !== undefined) {
      this.lastModifyTimestamp = args.lastModifyTimestamp;
    }
  }
};
AccountCommodityRegisterAbility.prototype = {};
AccountCommodityRegisterAbility.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.registerAbilityId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledExchangeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeMic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.supportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.lastModifyTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountCommodityRegisterAbility.prototype.write = function(output) {
  output.writeStructBegin('AccountCommodityRegisterAbility');
  if (this.registerAbilityId !== null && this.registerAbilityId !== undefined) {
    output.writeFieldBegin('registerAbilityId', Thrift.Type.I64, 1);
    output.writeI64(this.registerAbilityId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 2);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.sledExchangeId !== null && this.sledExchangeId !== undefined) {
    output.writeFieldBegin('sledExchangeId', Thrift.Type.I32, 3);
    output.writeI32(this.sledExchangeId);
    output.writeFieldEnd();
  }
  if (this.exchangeMic !== null && this.exchangeMic !== undefined) {
    output.writeFieldBegin('exchangeMic', Thrift.Type.STRING, 4);
    output.writeString(this.exchangeMic);
    output.writeFieldEnd();
  }
  if (this.supportType !== null && this.supportType !== undefined) {
    output.writeFieldBegin('supportType', Thrift.Type.I32, 5);
    output.writeI32(this.supportType);
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 6);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 7);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifyTimestamp !== null && this.lastModifyTimestamp !== undefined) {
    output.writeFieldBegin('lastModifyTimestamp', Thrift.Type.I64, 8);
    output.writeI64(this.lastModifyTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccountCommodityRegisterAbilityPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
AccountCommodityRegisterAbilityPage.prototype = {};
AccountCommodityRegisterAbilityPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.page = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = new AccountCommodityRegisterAbility();
          elem60.read(input);
          this.page.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountCommodityRegisterAbilityPage.prototype.write = function(output) {
  output.writeStructBegin('AccountCommodityRegisterAbilityPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter61 in this.page)
    {
      if (this.page.hasOwnProperty(iter61))
      {
        iter61 = this.page[iter61];
        iter61.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqAccountCommodityRegisterAbilityOption = function(args) {
  this.registerAbilityId = null;
  this.accountId = null;
  this.sledCommodityIds = null;
  this.sledExchangeIds = null;
  this.supportType = null;
  this.exchangeMics = null;
  if (args) {
    if (args.registerAbilityId !== undefined) {
      this.registerAbilityId = args.registerAbilityId;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.sledCommodityIds !== undefined) {
      this.sledCommodityIds = args.sledCommodityIds;
    }
    if (args.sledExchangeIds !== undefined) {
      this.sledExchangeIds = args.sledExchangeIds;
    }
    if (args.supportType !== undefined) {
      this.supportType = args.supportType;
    }
    if (args.exchangeMics !== undefined) {
      this.exchangeMics = args.exchangeMics;
    }
  }
};
ReqAccountCommodityRegisterAbilityOption.prototype = {};
ReqAccountCommodityRegisterAbilityOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.registerAbilityId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.accountId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size62 = 0;
        var _rtmp366;
        this.sledCommodityIds = [];
        var _etype65 = 0;
        _rtmp366 = input.readSetBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = input.readI32().value;
          this.sledCommodityIds.push(elem68);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size69 = 0;
        var _rtmp373;
        this.sledExchangeIds = [];
        var _etype72 = 0;
        _rtmp373 = input.readSetBegin();
        _etype72 = _rtmp373.etype;
        _size69 = _rtmp373.size;
        for (var _i74 = 0; _i74 < _size69; ++_i74)
        {
          var elem75 = null;
          elem75 = input.readI32().value;
          this.sledExchangeIds.push(elem75);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.supportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size76 = 0;
        var _rtmp380;
        this.exchangeMics = [];
        var _etype79 = 0;
        _rtmp380 = input.readSetBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = input.readString().value;
          this.exchangeMics.push(elem82);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqAccountCommodityRegisterAbilityOption.prototype.write = function(output) {
  output.writeStructBegin('ReqAccountCommodityRegisterAbilityOption');
  if (this.registerAbilityId !== null && this.registerAbilityId !== undefined) {
    output.writeFieldBegin('registerAbilityId', Thrift.Type.I64, 1);
    output.writeI64(this.registerAbilityId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I64, 2);
    output.writeI64(this.accountId);
    output.writeFieldEnd();
  }
  if (this.sledCommodityIds !== null && this.sledCommodityIds !== undefined) {
    output.writeFieldBegin('sledCommodityIds', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I32, this.sledCommodityIds.length);
    for (var iter83 in this.sledCommodityIds)
    {
      if (this.sledCommodityIds.hasOwnProperty(iter83))
      {
        iter83 = this.sledCommodityIds[iter83];
        output.writeI32(iter83);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.sledExchangeIds !== null && this.sledExchangeIds !== undefined) {
    output.writeFieldBegin('sledExchangeIds', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.sledExchangeIds.length);
    for (var iter84 in this.sledExchangeIds)
    {
      if (this.sledExchangeIds.hasOwnProperty(iter84))
      {
        iter84 = this.sledExchangeIds[iter84];
        output.writeI32(iter84);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.supportType !== null && this.supportType !== undefined) {
    output.writeFieldBegin('supportType', Thrift.Type.I32, 5);
    output.writeI32(this.supportType);
    output.writeFieldEnd();
  }
  if (this.exchangeMics !== null && this.exchangeMics !== undefined) {
    output.writeFieldBegin('exchangeMics', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRING, this.exchangeMics.length);
    for (var iter85 in this.exchangeMics)
    {
      if (this.exchangeMics.hasOwnProperty(iter85))
      {
        iter85 = this.exchangeMics[iter85];
        output.writeString(iter85);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuotationAccountPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
QuotationAccountPage.prototype = {};
QuotationAccountPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.page = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new QuotationAccount();
          elem92.read(input);
          this.page.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuotationAccountPage.prototype.write = function(output) {
  output.writeStructBegin('QuotationAccountPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter93 in this.page)
    {
      if (this.page.hasOwnProperty(iter93))
      {
        iter93 = this.page[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractActiveRulePage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
ContractActiveRulePage.prototype = {};
ContractActiveRulePage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.page = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = new ContractActiveRule();
          elem100.read(input);
          this.page.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractActiveRulePage.prototype.write = function(output) {
  output.writeStructBegin('ContractActiveRulePage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter101 in this.page)
    {
      if (this.page.hasOwnProperty(iter101))
      {
        iter101 = this.page[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractRegisterRulePage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
ContractRegisterRulePage.prototype = {};
ContractRegisterRulePage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.page = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = new ContractRegisterRule();
          elem108.read(input);
          this.page.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractRegisterRulePage.prototype.write = function(output) {
  output.writeStructBegin('ContractRegisterRulePage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter109 in this.page)
    {
      if (this.page.hasOwnProperty(iter109))
      {
        iter109 = this.page[iter109];
        iter109.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqContractActiveRuleOption = function(args) {
  this.commodityIds = null;
  if (args) {
    if (args.commodityIds !== undefined) {
      this.commodityIds = args.commodityIds;
    }
  }
};
ReqContractActiveRuleOption.prototype = {};
ReqContractActiveRuleOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size110 = 0;
        var _rtmp3114;
        this.commodityIds = [];
        var _etype113 = 0;
        _rtmp3114 = input.readSetBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = input.readI32().value;
          this.commodityIds.push(elem116);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqContractActiveRuleOption.prototype.write = function(output) {
  output.writeStructBegin('ReqContractActiveRuleOption');
  if (this.commodityIds !== null && this.commodityIds !== undefined) {
    output.writeFieldBegin('commodityIds', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.commodityIds.length);
    for (var iter117 in this.commodityIds)
    {
      if (this.commodityIds.hasOwnProperty(iter117))
      {
        iter117 = this.commodityIds[iter117];
        output.writeI32(iter117);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqContractRegisterRuleOption = function(args) {
  this.commodityIds = null;
  this.platformEnv = null;
  if (args) {
    if (args.commodityIds !== undefined) {
      this.commodityIds = args.commodityIds;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
  }
};
ReqContractRegisterRuleOption.prototype = {};
ReqContractRegisterRuleOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size118 = 0;
        var _rtmp3122;
        this.commodityIds = [];
        var _etype121 = 0;
        _rtmp3122 = input.readSetBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = input.readI32().value;
          this.commodityIds.push(elem124);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqContractRegisterRuleOption.prototype.write = function(output) {
  output.writeStructBegin('ReqContractRegisterRuleOption');
  if (this.commodityIds !== null && this.commodityIds !== undefined) {
    output.writeFieldBegin('commodityIds', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.commodityIds.length);
    for (var iter125 in this.commodityIds)
    {
      if (this.commodityIds.hasOwnProperty(iter125))
      {
        iter125 = this.commodityIds[iter125];
        output.writeI32(iter125);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 2);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqQuotationAccountOption = function(args) {
  this.accountIds = null;
  this.platform = null;
  this.platformEnv = null;
  this.supportCommodityIds = null;
  this.brokerIds = null;
  this.accountNamePartical = null;
  this.nickNamePartical = null;
  this.orderBy = null;
  this.deploySet = null;
  this.orderType = null;
  if (args) {
    if (args.accountIds !== undefined) {
      this.accountIds = args.accountIds;
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.supportCommodityIds !== undefined) {
      this.supportCommodityIds = args.supportCommodityIds;
    }
    if (args.brokerIds !== undefined) {
      this.brokerIds = args.brokerIds;
    }
    if (args.accountNamePartical !== undefined) {
      this.accountNamePartical = args.accountNamePartical;
    }
    if (args.nickNamePartical !== undefined) {
      this.nickNamePartical = args.nickNamePartical;
    }
    if (args.orderBy !== undefined) {
      this.orderBy = args.orderBy;
    }
    if (args.deploySet !== undefined) {
      this.deploySet = args.deploySet;
    }
    if (args.orderType !== undefined) {
      this.orderType = args.orderType;
    }
  }
};
ReqQuotationAccountOption.prototype = {};
ReqQuotationAccountOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size126 = 0;
        var _rtmp3130;
        this.accountIds = [];
        var _etype129 = 0;
        _rtmp3130 = input.readSetBegin();
        _etype129 = _rtmp3130.etype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var elem132 = null;
          elem132 = input.readI64().value;
          this.accountIds.push(elem132);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size133 = 0;
        var _rtmp3137;
        this.supportCommodityIds = [];
        var _etype136 = 0;
        _rtmp3137 = input.readSetBegin();
        _etype136 = _rtmp3137.etype;
        _size133 = _rtmp3137.size;
        for (var _i138 = 0; _i138 < _size133; ++_i138)
        {
          var elem139 = null;
          elem139 = input.readI32().value;
          this.supportCommodityIds.push(elem139);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size140 = 0;
        var _rtmp3144;
        this.brokerIds = [];
        var _etype143 = 0;
        _rtmp3144 = input.readSetBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = input.readI32().value;
          this.brokerIds.push(elem146);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accountNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nickNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.orderBy = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.deploySet = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.orderType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqQuotationAccountOption.prototype.write = function(output) {
  output.writeStructBegin('ReqQuotationAccountOption');
  if (this.accountIds !== null && this.accountIds !== undefined) {
    output.writeFieldBegin('accountIds', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I64, this.accountIds.length);
    for (var iter147 in this.accountIds)
    {
      if (this.accountIds.hasOwnProperty(iter147))
      {
        iter147 = this.accountIds[iter147];
        output.writeI64(iter147);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 2);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 3);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.supportCommodityIds !== null && this.supportCommodityIds !== undefined) {
    output.writeFieldBegin('supportCommodityIds', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.supportCommodityIds.length);
    for (var iter148 in this.supportCommodityIds)
    {
      if (this.supportCommodityIds.hasOwnProperty(iter148))
      {
        iter148 = this.supportCommodityIds[iter148];
        output.writeI32(iter148);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.brokerIds !== null && this.brokerIds !== undefined) {
    output.writeFieldBegin('brokerIds', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.I32, this.brokerIds.length);
    for (var iter149 in this.brokerIds)
    {
      if (this.brokerIds.hasOwnProperty(iter149))
      {
        iter149 = this.brokerIds[iter149];
        output.writeI32(iter149);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.accountNamePartical !== null && this.accountNamePartical !== undefined) {
    output.writeFieldBegin('accountNamePartical', Thrift.Type.STRING, 6);
    output.writeString(this.accountNamePartical);
    output.writeFieldEnd();
  }
  if (this.nickNamePartical !== null && this.nickNamePartical !== undefined) {
    output.writeFieldBegin('nickNamePartical', Thrift.Type.STRING, 7);
    output.writeString(this.nickNamePartical);
    output.writeFieldEnd();
  }
  if (this.orderBy !== null && this.orderBy !== undefined) {
    output.writeFieldBegin('orderBy', Thrift.Type.I32, 8);
    output.writeI32(this.orderBy);
    output.writeFieldEnd();
  }
  if (this.deploySet !== null && this.deploySet !== undefined) {
    output.writeFieldBegin('deploySet', Thrift.Type.I32, 9);
    output.writeI32(this.deploySet);
    output.writeFieldEnd();
  }
  if (this.orderType !== null && this.orderType !== undefined) {
    output.writeFieldBegin('orderType', Thrift.Type.I32, 10);
    output.writeI32(this.orderType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

