//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SledCommodityType = {
'NONE' : 0,
'FUTURES' : 1,
'OPTION' : 2,
'SPOT' : 3,
'SPREAD_MONTH' : 4,
'SPREAD_COMMODITY' : 5,
'BUL' : 6,
'BER' : 7,
'STD' : 8,
'STG' : 9,
'PRT' : 10,
'DIRECTFOREX' : 11,
'INDIRECTFOREX' : 12,
'CROSSFOREX' : 13,
'INDEX' : 14,
'STOCK' : 15
};
CmbDirect = {
'NONE' : 0,
'FIRST' : 1,
'SECOND' : 2
};
DeliveryMode = {
'NONE' : 0,
'GOODS' : 1,
'CASH' : 2,
'EXECUTE' : 3,
'ABANDON' : 4,
'HKF' : 5
};
CommodityState = {
'NONE' : 0,
'TRADEABLE' : 1,
'NO_TRADEABLE' : 2,
'CLOSE_ONLY' : 3
};
ContractStatus = {
'NORMAL' : 0,
'EXPIRED' : 1,
'DISABLED' : 2
};
CalculateMode = {
'COMBINE' : 0,
'PERCENTAGE' : 1,
'QUOTA' : 2,
'CHAPERCENTAGE' : 3,
'CHAQUOTA' : 4,
'DISCOUNT' : 5
};
ExchangeOperatingMicType = {
'OPERATING_MIC' : 0,
'SEGMENT_MIC' : 1
};
TechPlatformEnv = {
'NONE' : 0,
'REAL' : 1,
'SIM' : 2
};
TechPlatform = {
'NONE' : 0,
'CTP' : 1,
'ESUNNY' : 2,
'SP' : 3,
'ESUNNY_3' : 4
};
SledContractErrorCode = {
'SLED_COMMODITY_NOT_FOUND' : 1000,
'COMMODITY_MAP_NOT_FOUND' : 1001,
'SLED_EXCHANGE_NOT_FOUND' : 1002,
'COMMODITY_MAP_UPDATE_FORBID' : 1003,
'SLED_COMMODITY_EXISTS' : 1004,
'SLED_EXCHANGE_EXISTS' : 1005,
'CONTRACT_VERSION_NOT_FOUND' : 1006,
'COMMODITY_MAP_EXISTS' : 1007,
'SLED_CONTRACT_NOT_FOUND' : 1008
};
SledExchange = function(args) {
  this.sledExchangeId = null;
  this.exchangeMic = null;
  this.country = null;
  this.countryCode = null;
  this.operatingMic = null;
  this.operatingMicType = null;
  this.nameInstitution = null;
  this.acronym = null;
  this.city = null;
  this.website = null;
  this.cnName = null;
  this.cnAcronym = null;
  this.zoneId = null;
  this.timeLagMs = null;
  this.activeStartTimestamp = null;
  this.activeEndTimestamp = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  if (args) {
    if (args.sledExchangeId !== undefined) {
      this.sledExchangeId = args.sledExchangeId;
    }
    if (args.exchangeMic !== undefined) {
      this.exchangeMic = args.exchangeMic;
    }
    if (args.country !== undefined) {
      this.country = args.country;
    }
    if (args.countryCode !== undefined) {
      this.countryCode = args.countryCode;
    }
    if (args.operatingMic !== undefined) {
      this.operatingMic = args.operatingMic;
    }
    if (args.operatingMicType !== undefined) {
      this.operatingMicType = args.operatingMicType;
    }
    if (args.nameInstitution !== undefined) {
      this.nameInstitution = args.nameInstitution;
    }
    if (args.acronym !== undefined) {
      this.acronym = args.acronym;
    }
    if (args.city !== undefined) {
      this.city = args.city;
    }
    if (args.website !== undefined) {
      this.website = args.website;
    }
    if (args.cnName !== undefined) {
      this.cnName = args.cnName;
    }
    if (args.cnAcronym !== undefined) {
      this.cnAcronym = args.cnAcronym;
    }
    if (args.zoneId !== undefined) {
      this.zoneId = args.zoneId;
    }
    if (args.timeLagMs !== undefined) {
      this.timeLagMs = args.timeLagMs;
    }
    if (args.activeStartTimestamp !== undefined) {
      this.activeStartTimestamp = args.activeStartTimestamp;
    }
    if (args.activeEndTimestamp !== undefined) {
      this.activeEndTimestamp = args.activeEndTimestamp;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
  }
};
SledExchange.prototype = {};
SledExchange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sledExchangeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeMic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.operatingMic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.operatingMicType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.nameInstitution = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.acronym = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.website = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.cnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.cnAcronym = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.zoneId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.timeLagMs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I64) {
        this.activeStartTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.I64) {
        this.activeEndTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SledExchange.prototype.write = function(output) {
  output.writeStructBegin('SledExchange');
  if (this.sledExchangeId !== null && this.sledExchangeId !== undefined) {
    output.writeFieldBegin('sledExchangeId', Thrift.Type.I32, 1);
    output.writeI32(this.sledExchangeId);
    output.writeFieldEnd();
  }
  if (this.exchangeMic !== null && this.exchangeMic !== undefined) {
    output.writeFieldBegin('exchangeMic', Thrift.Type.STRING, 2);
    output.writeString(this.exchangeMic);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 4);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.operatingMic !== null && this.operatingMic !== undefined) {
    output.writeFieldBegin('operatingMic', Thrift.Type.STRING, 5);
    output.writeString(this.operatingMic);
    output.writeFieldEnd();
  }
  if (this.operatingMicType !== null && this.operatingMicType !== undefined) {
    output.writeFieldBegin('operatingMicType', Thrift.Type.I32, 6);
    output.writeI32(this.operatingMicType);
    output.writeFieldEnd();
  }
  if (this.nameInstitution !== null && this.nameInstitution !== undefined) {
    output.writeFieldBegin('nameInstitution', Thrift.Type.STRING, 7);
    output.writeString(this.nameInstitution);
    output.writeFieldEnd();
  }
  if (this.acronym !== null && this.acronym !== undefined) {
    output.writeFieldBegin('acronym', Thrift.Type.STRING, 8);
    output.writeString(this.acronym);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 9);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.website !== null && this.website !== undefined) {
    output.writeFieldBegin('website', Thrift.Type.STRING, 10);
    output.writeString(this.website);
    output.writeFieldEnd();
  }
  if (this.cnName !== null && this.cnName !== undefined) {
    output.writeFieldBegin('cnName', Thrift.Type.STRING, 11);
    output.writeString(this.cnName);
    output.writeFieldEnd();
  }
  if (this.cnAcronym !== null && this.cnAcronym !== undefined) {
    output.writeFieldBegin('cnAcronym', Thrift.Type.STRING, 12);
    output.writeString(this.cnAcronym);
    output.writeFieldEnd();
  }
  if (this.zoneId !== null && this.zoneId !== undefined) {
    output.writeFieldBegin('zoneId', Thrift.Type.STRING, 13);
    output.writeString(this.zoneId);
    output.writeFieldEnd();
  }
  if (this.timeLagMs !== null && this.timeLagMs !== undefined) {
    output.writeFieldBegin('timeLagMs', Thrift.Type.I64, 14);
    output.writeI64(this.timeLagMs);
    output.writeFieldEnd();
  }
  if (this.activeStartTimestamp !== null && this.activeStartTimestamp !== undefined) {
    output.writeFieldBegin('activeStartTimestamp', Thrift.Type.I64, 32);
    output.writeI64(this.activeStartTimestamp);
    output.writeFieldEnd();
  }
  if (this.activeEndTimestamp !== null && this.activeEndTimestamp !== undefined) {
    output.writeFieldBegin('activeEndTimestamp', Thrift.Type.I64, 33);
    output.writeI64(this.activeEndTimestamp);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 40);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 41);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SledCommodityConfig = function(args) {
  this.configId = null;
  this.deliveryMode = null;
  this.deliveryDays = null;
  this.maxSingleOrderVol = null;
  this.maxHoldVol = null;
  this.commissionCalculateMode = null;
  this.openCloseFee = null;
  this.marginCalculateMode = null;
  this.initialMargin = null;
  this.maintenanceMargin = null;
  this.sellInitialMargin = null;
  this.sellMaintenanceMargin = null;
  this.lockMargin = null;
  this.activeStartTimestamp = null;
  this.activeEndTimestamp = null;
  this.measureUnit = null;
  this.chargeUnit = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  if (args) {
    if (args.configId !== undefined) {
      this.configId = args.configId;
    }
    if (args.deliveryMode !== undefined) {
      this.deliveryMode = args.deliveryMode;
    }
    if (args.deliveryDays !== undefined) {
      this.deliveryDays = args.deliveryDays;
    }
    if (args.maxSingleOrderVol !== undefined) {
      this.maxSingleOrderVol = args.maxSingleOrderVol;
    }
    if (args.maxHoldVol !== undefined) {
      this.maxHoldVol = args.maxHoldVol;
    }
    if (args.commissionCalculateMode !== undefined) {
      this.commissionCalculateMode = args.commissionCalculateMode;
    }
    if (args.openCloseFee !== undefined) {
      this.openCloseFee = args.openCloseFee;
    }
    if (args.marginCalculateMode !== undefined) {
      this.marginCalculateMode = args.marginCalculateMode;
    }
    if (args.initialMargin !== undefined) {
      this.initialMargin = args.initialMargin;
    }
    if (args.maintenanceMargin !== undefined) {
      this.maintenanceMargin = args.maintenanceMargin;
    }
    if (args.sellInitialMargin !== undefined) {
      this.sellInitialMargin = args.sellInitialMargin;
    }
    if (args.sellMaintenanceMargin !== undefined) {
      this.sellMaintenanceMargin = args.sellMaintenanceMargin;
    }
    if (args.lockMargin !== undefined) {
      this.lockMargin = args.lockMargin;
    }
    if (args.activeStartTimestamp !== undefined) {
      this.activeStartTimestamp = args.activeStartTimestamp;
    }
    if (args.activeEndTimestamp !== undefined) {
      this.activeEndTimestamp = args.activeEndTimestamp;
    }
    if (args.measureUnit !== undefined) {
      this.measureUnit = args.measureUnit;
    }
    if (args.chargeUnit !== undefined) {
      this.chargeUnit = args.chargeUnit;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
  }
};
SledCommodityConfig.prototype = {};
SledCommodityConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.configId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.deliveryMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.deliveryDays = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.maxSingleOrderVol = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.maxHoldVol = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.commissionCalculateMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.DOUBLE) {
        this.openCloseFee = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.I32) {
        this.marginCalculateMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.DOUBLE) {
        this.initialMargin = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.DOUBLE) {
        this.maintenanceMargin = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.DOUBLE) {
        this.sellInitialMargin = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.DOUBLE) {
        this.sellMaintenanceMargin = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lockMargin = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I64) {
        this.activeStartTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.I64) {
        this.activeEndTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.measureUnit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.DOUBLE) {
        this.chargeUnit = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SledCommodityConfig.prototype.write = function(output) {
  output.writeStructBegin('SledCommodityConfig');
  if (this.configId !== null && this.configId !== undefined) {
    output.writeFieldBegin('configId', Thrift.Type.I32, 1);
    output.writeI32(this.configId);
    output.writeFieldEnd();
  }
  if (this.deliveryMode !== null && this.deliveryMode !== undefined) {
    output.writeFieldBegin('deliveryMode', Thrift.Type.I32, 12);
    output.writeI32(this.deliveryMode);
    output.writeFieldEnd();
  }
  if (this.deliveryDays !== null && this.deliveryDays !== undefined) {
    output.writeFieldBegin('deliveryDays', Thrift.Type.I32, 13);
    output.writeI32(this.deliveryDays);
    output.writeFieldEnd();
  }
  if (this.maxSingleOrderVol !== null && this.maxSingleOrderVol !== undefined) {
    output.writeFieldBegin('maxSingleOrderVol', Thrift.Type.I32, 17);
    output.writeI32(this.maxSingleOrderVol);
    output.writeFieldEnd();
  }
  if (this.maxHoldVol !== null && this.maxHoldVol !== undefined) {
    output.writeFieldBegin('maxHoldVol', Thrift.Type.I32, 18);
    output.writeI32(this.maxHoldVol);
    output.writeFieldEnd();
  }
  if (this.commissionCalculateMode !== null && this.commissionCalculateMode !== undefined) {
    output.writeFieldBegin('commissionCalculateMode', Thrift.Type.I32, 20);
    output.writeI32(this.commissionCalculateMode);
    output.writeFieldEnd();
  }
  if (this.openCloseFee !== null && this.openCloseFee !== undefined) {
    output.writeFieldBegin('openCloseFee', Thrift.Type.DOUBLE, 21);
    output.writeDouble(this.openCloseFee);
    output.writeFieldEnd();
  }
  if (this.marginCalculateMode !== null && this.marginCalculateMode !== undefined) {
    output.writeFieldBegin('marginCalculateMode', Thrift.Type.I32, 26);
    output.writeI32(this.marginCalculateMode);
    output.writeFieldEnd();
  }
  if (this.initialMargin !== null && this.initialMargin !== undefined) {
    output.writeFieldBegin('initialMargin', Thrift.Type.DOUBLE, 27);
    output.writeDouble(this.initialMargin);
    output.writeFieldEnd();
  }
  if (this.maintenanceMargin !== null && this.maintenanceMargin !== undefined) {
    output.writeFieldBegin('maintenanceMargin', Thrift.Type.DOUBLE, 28);
    output.writeDouble(this.maintenanceMargin);
    output.writeFieldEnd();
  }
  if (this.sellInitialMargin !== null && this.sellInitialMargin !== undefined) {
    output.writeFieldBegin('sellInitialMargin', Thrift.Type.DOUBLE, 29);
    output.writeDouble(this.sellInitialMargin);
    output.writeFieldEnd();
  }
  if (this.sellMaintenanceMargin !== null && this.sellMaintenanceMargin !== undefined) {
    output.writeFieldBegin('sellMaintenanceMargin', Thrift.Type.DOUBLE, 30);
    output.writeDouble(this.sellMaintenanceMargin);
    output.writeFieldEnd();
  }
  if (this.lockMargin !== null && this.lockMargin !== undefined) {
    output.writeFieldBegin('lockMargin', Thrift.Type.DOUBLE, 31);
    output.writeDouble(this.lockMargin);
    output.writeFieldEnd();
  }
  if (this.activeStartTimestamp !== null && this.activeStartTimestamp !== undefined) {
    output.writeFieldBegin('activeStartTimestamp', Thrift.Type.I64, 32);
    output.writeI64(this.activeStartTimestamp);
    output.writeFieldEnd();
  }
  if (this.activeEndTimestamp !== null && this.activeEndTimestamp !== undefined) {
    output.writeFieldBegin('activeEndTimestamp', Thrift.Type.I64, 33);
    output.writeI64(this.activeEndTimestamp);
    output.writeFieldEnd();
  }
  if (this.measureUnit !== null && this.measureUnit !== undefined) {
    output.writeFieldBegin('measureUnit', Thrift.Type.STRING, 34);
    output.writeString(this.measureUnit);
    output.writeFieldEnd();
  }
  if (this.chargeUnit !== null && this.chargeUnit !== undefined) {
    output.writeFieldBegin('chargeUnit', Thrift.Type.DOUBLE, 35);
    output.writeDouble(this.chargeUnit);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 40);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 41);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SledCommodity = function(args) {
  this.sledCommodityId = null;
  this.exchangeMic = null;
  this.sledCommodityType = null;
  this.sledCommodityCode = null;
  this.relateCommodityIds = null;
  this.tradeCurrency = null;
  this.zoneId = null;
  this.contractSize = null;
  this.tickSize = null;
  this.denominator = null;
  this.cmbDirect = null;
  this.commodityState = null;
  this.sledCommodityConfig = null;
  this.engName = null;
  this.cnName = null;
  this.tcName = null;
  this.isAlsoSupportSim = null;
  this.engAcronym = null;
  this.cnAcronym = null;
  this.tcAcronym = null;
  this.activeStartTimestamp = null;
  this.activeEndTimestamp = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  if (args) {
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.exchangeMic !== undefined) {
      this.exchangeMic = args.exchangeMic;
    }
    if (args.sledCommodityType !== undefined) {
      this.sledCommodityType = args.sledCommodityType;
    }
    if (args.sledCommodityCode !== undefined) {
      this.sledCommodityCode = args.sledCommodityCode;
    }
    if (args.relateCommodityIds !== undefined) {
      this.relateCommodityIds = args.relateCommodityIds;
    }
    if (args.tradeCurrency !== undefined) {
      this.tradeCurrency = args.tradeCurrency;
    }
    if (args.zoneId !== undefined) {
      this.zoneId = args.zoneId;
    }
    if (args.contractSize !== undefined) {
      this.contractSize = args.contractSize;
    }
    if (args.tickSize !== undefined) {
      this.tickSize = args.tickSize;
    }
    if (args.denominator !== undefined) {
      this.denominator = args.denominator;
    }
    if (args.cmbDirect !== undefined) {
      this.cmbDirect = args.cmbDirect;
    }
    if (args.commodityState !== undefined) {
      this.commodityState = args.commodityState;
    }
    if (args.sledCommodityConfig !== undefined) {
      this.sledCommodityConfig = args.sledCommodityConfig;
    }
    if (args.engName !== undefined) {
      this.engName = args.engName;
    }
    if (args.cnName !== undefined) {
      this.cnName = args.cnName;
    }
    if (args.tcName !== undefined) {
      this.tcName = args.tcName;
    }
    if (args.isAlsoSupportSim !== undefined) {
      this.isAlsoSupportSim = args.isAlsoSupportSim;
    }
    if (args.engAcronym !== undefined) {
      this.engAcronym = args.engAcronym;
    }
    if (args.cnAcronym !== undefined) {
      this.cnAcronym = args.cnAcronym;
    }
    if (args.tcAcronym !== undefined) {
      this.tcAcronym = args.tcAcronym;
    }
    if (args.activeStartTimestamp !== undefined) {
      this.activeStartTimestamp = args.activeStartTimestamp;
    }
    if (args.activeEndTimestamp !== undefined) {
      this.activeEndTimestamp = args.activeEndTimestamp;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
  }
};
SledCommodity.prototype = {};
SledCommodity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeMic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sledCommodityCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.relateCommodityIds = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.relateCommodityIds.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.tradeCurrency = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.zoneId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.contractSize = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tickSize = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.denominator = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.cmbDirect = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.commodityState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.sledCommodityConfig = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new SledCommodityConfig();
          elem13.read(input);
          this.sledCommodityConfig.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.engName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.cnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.tcName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.BOOL) {
        this.isAlsoSupportSim = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.engAcronym = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.cnAcronym = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.tcAcronym = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I64) {
        this.activeStartTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.I64) {
        this.activeEndTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SledCommodity.prototype.write = function(output) {
  output.writeStructBegin('SledCommodity');
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 1);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.exchangeMic !== null && this.exchangeMic !== undefined) {
    output.writeFieldBegin('exchangeMic', Thrift.Type.STRING, 2);
    output.writeString(this.exchangeMic);
    output.writeFieldEnd();
  }
  if (this.sledCommodityType !== null && this.sledCommodityType !== undefined) {
    output.writeFieldBegin('sledCommodityType', Thrift.Type.I32, 3);
    output.writeI32(this.sledCommodityType);
    output.writeFieldEnd();
  }
  if (this.sledCommodityCode !== null && this.sledCommodityCode !== undefined) {
    output.writeFieldBegin('sledCommodityCode', Thrift.Type.STRING, 4);
    output.writeString(this.sledCommodityCode);
    output.writeFieldEnd();
  }
  if (this.relateCommodityIds !== null && this.relateCommodityIds !== undefined) {
    output.writeFieldBegin('relateCommodityIds', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.relateCommodityIds.length);
    for (var iter14 in this.relateCommodityIds)
    {
      if (this.relateCommodityIds.hasOwnProperty(iter14))
      {
        iter14 = this.relateCommodityIds[iter14];
        output.writeI32(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tradeCurrency !== null && this.tradeCurrency !== undefined) {
    output.writeFieldBegin('tradeCurrency', Thrift.Type.STRING, 6);
    output.writeString(this.tradeCurrency);
    output.writeFieldEnd();
  }
  if (this.zoneId !== null && this.zoneId !== undefined) {
    output.writeFieldBegin('zoneId', Thrift.Type.STRING, 7);
    output.writeString(this.zoneId);
    output.writeFieldEnd();
  }
  if (this.contractSize !== null && this.contractSize !== undefined) {
    output.writeFieldBegin('contractSize', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.contractSize);
    output.writeFieldEnd();
  }
  if (this.tickSize !== null && this.tickSize !== undefined) {
    output.writeFieldBegin('tickSize', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.tickSize);
    output.writeFieldEnd();
  }
  if (this.denominator !== null && this.denominator !== undefined) {
    output.writeFieldBegin('denominator', Thrift.Type.I32, 10);
    output.writeI32(this.denominator);
    output.writeFieldEnd();
  }
  if (this.cmbDirect !== null && this.cmbDirect !== undefined) {
    output.writeFieldBegin('cmbDirect', Thrift.Type.I32, 11);
    output.writeI32(this.cmbDirect);
    output.writeFieldEnd();
  }
  if (this.commodityState !== null && this.commodityState !== undefined) {
    output.writeFieldBegin('commodityState', Thrift.Type.I32, 15);
    output.writeI32(this.commodityState);
    output.writeFieldEnd();
  }
  if (this.sledCommodityConfig !== null && this.sledCommodityConfig !== undefined) {
    output.writeFieldBegin('sledCommodityConfig', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRUCT, this.sledCommodityConfig.length);
    for (var iter15 in this.sledCommodityConfig)
    {
      if (this.sledCommodityConfig.hasOwnProperty(iter15))
      {
        iter15 = this.sledCommodityConfig[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.engName !== null && this.engName !== undefined) {
    output.writeFieldBegin('engName', Thrift.Type.STRING, 22);
    output.writeString(this.engName);
    output.writeFieldEnd();
  }
  if (this.cnName !== null && this.cnName !== undefined) {
    output.writeFieldBegin('cnName', Thrift.Type.STRING, 23);
    output.writeString(this.cnName);
    output.writeFieldEnd();
  }
  if (this.tcName !== null && this.tcName !== undefined) {
    output.writeFieldBegin('tcName', Thrift.Type.STRING, 24);
    output.writeString(this.tcName);
    output.writeFieldEnd();
  }
  if (this.isAlsoSupportSim !== null && this.isAlsoSupportSim !== undefined) {
    output.writeFieldBegin('isAlsoSupportSim', Thrift.Type.BOOL, 25);
    output.writeBool(this.isAlsoSupportSim);
    output.writeFieldEnd();
  }
  if (this.engAcronym !== null && this.engAcronym !== undefined) {
    output.writeFieldBegin('engAcronym', Thrift.Type.STRING, 26);
    output.writeString(this.engAcronym);
    output.writeFieldEnd();
  }
  if (this.cnAcronym !== null && this.cnAcronym !== undefined) {
    output.writeFieldBegin('cnAcronym', Thrift.Type.STRING, 27);
    output.writeString(this.cnAcronym);
    output.writeFieldEnd();
  }
  if (this.tcAcronym !== null && this.tcAcronym !== undefined) {
    output.writeFieldBegin('tcAcronym', Thrift.Type.STRING, 28);
    output.writeString(this.tcAcronym);
    output.writeFieldEnd();
  }
  if (this.activeStartTimestamp !== null && this.activeStartTimestamp !== undefined) {
    output.writeFieldBegin('activeStartTimestamp', Thrift.Type.I64, 32);
    output.writeI64(this.activeStartTimestamp);
    output.writeFieldEnd();
  }
  if (this.activeEndTimestamp !== null && this.activeEndTimestamp !== undefined) {
    output.writeFieldBegin('activeEndTimestamp', Thrift.Type.I64, 33);
    output.writeI64(this.activeEndTimestamp);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 40);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 41);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SledContract = function(args) {
  this.sledContractId = null;
  this.sledCommodityId = null;
  this.sledContractCode = null;
  this.relateContractIds = null;
  this.sledTag = null;
  this.contractEngName = null;
  this.contractCnName = null;
  this.contractTcName = null;
  this.contractExpDate = null;
  this.lastTradeDate = null;
  this.firstNoticeDate = null;
  this.platformEnv = null;
  this.contractStatus = null;
  this.activeStartTimestamp = null;
  this.activeEndTimestamp = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  if (args) {
    if (args.sledContractId !== undefined) {
      this.sledContractId = args.sledContractId;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.sledContractCode !== undefined) {
      this.sledContractCode = args.sledContractCode;
    }
    if (args.relateContractIds !== undefined) {
      this.relateContractIds = args.relateContractIds;
    }
    if (args.sledTag !== undefined) {
      this.sledTag = args.sledTag;
    }
    if (args.contractEngName !== undefined) {
      this.contractEngName = args.contractEngName;
    }
    if (args.contractCnName !== undefined) {
      this.contractCnName = args.contractCnName;
    }
    if (args.contractTcName !== undefined) {
      this.contractTcName = args.contractTcName;
    }
    if (args.contractExpDate !== undefined) {
      this.contractExpDate = args.contractExpDate;
    }
    if (args.lastTradeDate !== undefined) {
      this.lastTradeDate = args.lastTradeDate;
    }
    if (args.firstNoticeDate !== undefined) {
      this.firstNoticeDate = args.firstNoticeDate;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.contractStatus !== undefined) {
      this.contractStatus = args.contractStatus;
    }
    if (args.activeStartTimestamp !== undefined) {
      this.activeStartTimestamp = args.activeStartTimestamp;
    }
    if (args.activeEndTimestamp !== undefined) {
      this.activeEndTimestamp = args.activeEndTimestamp;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
  }
};
SledContract.prototype = {};
SledContract.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sledContractId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sledContractCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.relateContractIds = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI32().value;
          this.relateContractIds.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sledTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.contractEngName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contractCnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.contractTcName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.contractExpDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.lastTradeDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.firstNoticeDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.contractStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I64) {
        this.activeStartTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.I64) {
        this.activeEndTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SledContract.prototype.write = function(output) {
  output.writeStructBegin('SledContract');
  if (this.sledContractId !== null && this.sledContractId !== undefined) {
    output.writeFieldBegin('sledContractId', Thrift.Type.I32, 1);
    output.writeI32(this.sledContractId);
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 2);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.sledContractCode !== null && this.sledContractCode !== undefined) {
    output.writeFieldBegin('sledContractCode', Thrift.Type.STRING, 3);
    output.writeString(this.sledContractCode);
    output.writeFieldEnd();
  }
  if (this.relateContractIds !== null && this.relateContractIds !== undefined) {
    output.writeFieldBegin('relateContractIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.relateContractIds.length);
    for (var iter23 in this.relateContractIds)
    {
      if (this.relateContractIds.hasOwnProperty(iter23))
      {
        iter23 = this.relateContractIds[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sledTag !== null && this.sledTag !== undefined) {
    output.writeFieldBegin('sledTag', Thrift.Type.STRING, 5);
    output.writeString(this.sledTag);
    output.writeFieldEnd();
  }
  if (this.contractEngName !== null && this.contractEngName !== undefined) {
    output.writeFieldBegin('contractEngName', Thrift.Type.STRING, 6);
    output.writeString(this.contractEngName);
    output.writeFieldEnd();
  }
  if (this.contractCnName !== null && this.contractCnName !== undefined) {
    output.writeFieldBegin('contractCnName', Thrift.Type.STRING, 7);
    output.writeString(this.contractCnName);
    output.writeFieldEnd();
  }
  if (this.contractTcName !== null && this.contractTcName !== undefined) {
    output.writeFieldBegin('contractTcName', Thrift.Type.STRING, 8);
    output.writeString(this.contractTcName);
    output.writeFieldEnd();
  }
  if (this.contractExpDate !== null && this.contractExpDate !== undefined) {
    output.writeFieldBegin('contractExpDate', Thrift.Type.I64, 9);
    output.writeI64(this.contractExpDate);
    output.writeFieldEnd();
  }
  if (this.lastTradeDate !== null && this.lastTradeDate !== undefined) {
    output.writeFieldBegin('lastTradeDate', Thrift.Type.I64, 10);
    output.writeI64(this.lastTradeDate);
    output.writeFieldEnd();
  }
  if (this.firstNoticeDate !== null && this.firstNoticeDate !== undefined) {
    output.writeFieldBegin('firstNoticeDate', Thrift.Type.I64, 11);
    output.writeI64(this.firstNoticeDate);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 20);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.contractStatus !== null && this.contractStatus !== undefined) {
    output.writeFieldBegin('contractStatus', Thrift.Type.I32, 21);
    output.writeI32(this.contractStatus);
    output.writeFieldEnd();
  }
  if (this.activeStartTimestamp !== null && this.activeStartTimestamp !== undefined) {
    output.writeFieldBegin('activeStartTimestamp', Thrift.Type.I64, 32);
    output.writeI64(this.activeStartTimestamp);
    output.writeFieldEnd();
  }
  if (this.activeEndTimestamp !== null && this.activeEndTimestamp !== undefined) {
    output.writeFieldBegin('activeEndTimestamp', Thrift.Type.I64, 33);
    output.writeI64(this.activeEndTimestamp);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 40);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 41);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SledContractDetails = function(args) {
  this.sledCommodity = null;
  this.sledContract = null;
  if (args) {
    if (args.sledCommodity !== undefined) {
      this.sledCommodity = args.sledCommodity;
    }
    if (args.sledContract !== undefined) {
      this.sledContract = args.sledContract;
    }
  }
};
SledContractDetails.prototype = {};
SledContractDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sledCommodity = new SledCommodity();
        this.sledCommodity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sledContract = new SledContract();
        this.sledContract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SledContractDetails.prototype.write = function(output) {
  output.writeStructBegin('SledContractDetails');
  if (this.sledCommodity !== null && this.sledCommodity !== undefined) {
    output.writeFieldBegin('sledCommodity', Thrift.Type.STRUCT, 1);
    this.sledCommodity.write(output);
    output.writeFieldEnd();
  }
  if (this.sledContract !== null && this.sledContract !== undefined) {
    output.writeFieldBegin('sledContract', Thrift.Type.STRUCT, 2);
    this.sledContract.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqSledContractDetailsOption = function(args) {
  this.sledContractIds = null;
  if (args) {
    if (args.sledContractIds !== undefined) {
      this.sledContractIds = args.sledContractIds;
    }
  }
};
ReqSledContractDetailsOption.prototype = {};
ReqSledContractDetailsOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size24 = 0;
        var _rtmp328;
        this.sledContractIds = [];
        var _etype27 = 0;
        _rtmp328 = input.readSetBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32().value;
          this.sledContractIds.push(elem30);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqSledContractDetailsOption.prototype.write = function(output) {
  output.writeStructBegin('ReqSledContractDetailsOption');
  if (this.sledContractIds !== null && this.sledContractIds !== undefined) {
    output.writeFieldBegin('sledContractIds', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.sledContractIds.length);
    for (var iter31 in this.sledContractIds)
    {
      if (this.sledContractIds.hasOwnProperty(iter31))
      {
        iter31 = this.sledContractIds[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SledContractDetailsPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SledContractDetailsPage.prototype = {};
SledContractDetailsPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.page = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new SledContractDetails();
          elem38.read(input);
          this.page.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SledContractDetailsPage.prototype.write = function(output) {
  output.writeStructBegin('SledContractDetailsPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter39 in this.page)
    {
      if (this.page.hasOwnProperty(iter39))
      {
        iter39 = this.page[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommodityMapping = function(args) {
  this.mappingId = null;
  this.sledCommodityId = null;
  this.techPlatform = null;
  this.exchange = null;
  this.commodityType = null;
  this.commodityCode = null;
  this.moneyRatio = null;
  this.brokerEntryId = null;
  this.activeStartTimestamp = null;
  this.activeEndTimestamp = null;
  this.createTimestamp = null;
  this.lastModityTimestamp = null;
  if (args) {
    if (args.mappingId !== undefined) {
      this.mappingId = args.mappingId;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.techPlatform !== undefined) {
      this.techPlatform = args.techPlatform;
    }
    if (args.exchange !== undefined) {
      this.exchange = args.exchange;
    }
    if (args.commodityType !== undefined) {
      this.commodityType = args.commodityType;
    }
    if (args.commodityCode !== undefined) {
      this.commodityCode = args.commodityCode;
    }
    if (args.moneyRatio !== undefined) {
      this.moneyRatio = args.moneyRatio;
    }
    if (args.brokerEntryId !== undefined) {
      this.brokerEntryId = args.brokerEntryId;
    }
    if (args.activeStartTimestamp !== undefined) {
      this.activeStartTimestamp = args.activeStartTimestamp;
    }
    if (args.activeEndTimestamp !== undefined) {
      this.activeEndTimestamp = args.activeEndTimestamp;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
  }
};
CommodityMapping.prototype = {};
CommodityMapping.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.mappingId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.techPlatform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.exchange = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.commodityType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.commodityCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.moneyRatio = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.brokerEntryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I64) {
        this.activeStartTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.I64) {
        this.activeEndTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommodityMapping.prototype.write = function(output) {
  output.writeStructBegin('CommodityMapping');
  if (this.mappingId !== null && this.mappingId !== undefined) {
    output.writeFieldBegin('mappingId', Thrift.Type.I32, 1);
    output.writeI32(this.mappingId);
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 3);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.techPlatform !== null && this.techPlatform !== undefined) {
    output.writeFieldBegin('techPlatform', Thrift.Type.I32, 4);
    output.writeI32(this.techPlatform);
    output.writeFieldEnd();
  }
  if (this.exchange !== null && this.exchange !== undefined) {
    output.writeFieldBegin('exchange', Thrift.Type.STRING, 5);
    output.writeString(this.exchange);
    output.writeFieldEnd();
  }
  if (this.commodityType !== null && this.commodityType !== undefined) {
    output.writeFieldBegin('commodityType', Thrift.Type.STRING, 6);
    output.writeString(this.commodityType);
    output.writeFieldEnd();
  }
  if (this.commodityCode !== null && this.commodityCode !== undefined) {
    output.writeFieldBegin('commodityCode', Thrift.Type.STRING, 7);
    output.writeString(this.commodityCode);
    output.writeFieldEnd();
  }
  if (this.moneyRatio !== null && this.moneyRatio !== undefined) {
    output.writeFieldBegin('moneyRatio', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.moneyRatio);
    output.writeFieldEnd();
  }
  if (this.brokerEntryId !== null && this.brokerEntryId !== undefined) {
    output.writeFieldBegin('brokerEntryId', Thrift.Type.I32, 10);
    output.writeI32(this.brokerEntryId);
    output.writeFieldEnd();
  }
  if (this.activeStartTimestamp !== null && this.activeStartTimestamp !== undefined) {
    output.writeFieldBegin('activeStartTimestamp', Thrift.Type.I64, 32);
    output.writeI64(this.activeStartTimestamp);
    output.writeFieldEnd();
  }
  if (this.activeEndTimestamp !== null && this.activeEndTimestamp !== undefined) {
    output.writeFieldBegin('activeEndTimestamp', Thrift.Type.I64, 33);
    output.writeI64(this.activeEndTimestamp);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 40);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 41);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqSledContractOption = function(args) {
  this.sledContractIdList = null;
  this.sledCommodityId = null;
  this.platformEnv = null;
  this.sledContractCode = null;
  this.contractStatus = null;
  this.needTotalCount = true;
  this.contractCodePartical = null;
  this.sledTagPartical = null;
  this.contractEngNamePartical = null;
  this.contractCnNamePartical = null;
  if (args) {
    if (args.sledContractIdList !== undefined) {
      this.sledContractIdList = args.sledContractIdList;
    }
    if (args.sledCommodityId !== undefined) {
      this.sledCommodityId = args.sledCommodityId;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.sledContractCode !== undefined) {
      this.sledContractCode = args.sledContractCode;
    }
    if (args.contractStatus !== undefined) {
      this.contractStatus = args.contractStatus;
    }
    if (args.needTotalCount !== undefined) {
      this.needTotalCount = args.needTotalCount;
    }
    if (args.contractCodePartical !== undefined) {
      this.contractCodePartical = args.contractCodePartical;
    }
    if (args.sledTagPartical !== undefined) {
      this.sledTagPartical = args.sledTagPartical;
    }
    if (args.contractEngNamePartical !== undefined) {
      this.contractEngNamePartical = args.contractEngNamePartical;
    }
    if (args.contractCnNamePartical !== undefined) {
      this.contractCnNamePartical = args.contractCnNamePartical;
    }
  }
};
ReqSledContractOption.prototype = {};
ReqSledContractOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.sledContractIdList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI32().value;
          this.sledContractIdList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sledContractCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contractStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.needTotalCount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.contractCodePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.sledTagPartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.contractEngNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.contractCnNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqSledContractOption.prototype.write = function(output) {
  output.writeStructBegin('ReqSledContractOption');
  if (this.sledContractIdList !== null && this.sledContractIdList !== undefined) {
    output.writeFieldBegin('sledContractIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.sledContractIdList.length);
    for (var iter47 in this.sledContractIdList)
    {
      if (this.sledContractIdList.hasOwnProperty(iter47))
      {
        iter47 = this.sledContractIdList[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sledCommodityId !== null && this.sledCommodityId !== undefined) {
    output.writeFieldBegin('sledCommodityId', Thrift.Type.I32, 2);
    output.writeI32(this.sledCommodityId);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 3);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.sledContractCode !== null && this.sledContractCode !== undefined) {
    output.writeFieldBegin('sledContractCode', Thrift.Type.STRING, 4);
    output.writeString(this.sledContractCode);
    output.writeFieldEnd();
  }
  if (this.contractStatus !== null && this.contractStatus !== undefined) {
    output.writeFieldBegin('contractStatus', Thrift.Type.I32, 5);
    output.writeI32(this.contractStatus);
    output.writeFieldEnd();
  }
  if (this.needTotalCount !== null && this.needTotalCount !== undefined) {
    output.writeFieldBegin('needTotalCount', Thrift.Type.BOOL, 6);
    output.writeBool(this.needTotalCount);
    output.writeFieldEnd();
  }
  if (this.contractCodePartical !== null && this.contractCodePartical !== undefined) {
    output.writeFieldBegin('contractCodePartical', Thrift.Type.STRING, 10);
    output.writeString(this.contractCodePartical);
    output.writeFieldEnd();
  }
  if (this.sledTagPartical !== null && this.sledTagPartical !== undefined) {
    output.writeFieldBegin('sledTagPartical', Thrift.Type.STRING, 11);
    output.writeString(this.sledTagPartical);
    output.writeFieldEnd();
  }
  if (this.contractEngNamePartical !== null && this.contractEngNamePartical !== undefined) {
    output.writeFieldBegin('contractEngNamePartical', Thrift.Type.STRING, 12);
    output.writeString(this.contractEngNamePartical);
    output.writeFieldEnd();
  }
  if (this.contractCnNamePartical !== null && this.contractCnNamePartical !== undefined) {
    output.writeFieldBegin('contractCnNamePartical', Thrift.Type.STRING, 13);
    output.writeString(this.contractCnNamePartical);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqSledCommodityOption = function(args) {
  this.sledCommodityIdList = null;
  this.exchangeMic = null;
  this.sledCommodityType = null;
  this.sledCommodityCode = null;
  this.platformEnv = null;
  this.needTotalCount = true;
  this.sledCommodityCodePartical = null;
  this.engNamePartical = null;
  this.cnNamePartical = null;
  if (args) {
    if (args.sledCommodityIdList !== undefined) {
      this.sledCommodityIdList = args.sledCommodityIdList;
    }
    if (args.exchangeMic !== undefined) {
      this.exchangeMic = args.exchangeMic;
    }
    if (args.sledCommodityType !== undefined) {
      this.sledCommodityType = args.sledCommodityType;
    }
    if (args.sledCommodityCode !== undefined) {
      this.sledCommodityCode = args.sledCommodityCode;
    }
    if (args.platformEnv !== undefined) {
      this.platformEnv = args.platformEnv;
    }
    if (args.needTotalCount !== undefined) {
      this.needTotalCount = args.needTotalCount;
    }
    if (args.sledCommodityCodePartical !== undefined) {
      this.sledCommodityCodePartical = args.sledCommodityCodePartical;
    }
    if (args.engNamePartical !== undefined) {
      this.engNamePartical = args.engNamePartical;
    }
    if (args.cnNamePartical !== undefined) {
      this.cnNamePartical = args.cnNamePartical;
    }
  }
};
ReqSledCommodityOption.prototype = {};
ReqSledCommodityOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.sledCommodityIdList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readI32().value;
          this.sledCommodityIdList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeMic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sledCommodityType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sledCommodityCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.platformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.needTotalCount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.sledCommodityCodePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.engNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.cnNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqSledCommodityOption.prototype.write = function(output) {
  output.writeStructBegin('ReqSledCommodityOption');
  if (this.sledCommodityIdList !== null && this.sledCommodityIdList !== undefined) {
    output.writeFieldBegin('sledCommodityIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.sledCommodityIdList.length);
    for (var iter55 in this.sledCommodityIdList)
    {
      if (this.sledCommodityIdList.hasOwnProperty(iter55))
      {
        iter55 = this.sledCommodityIdList[iter55];
        output.writeI32(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.exchangeMic !== null && this.exchangeMic !== undefined) {
    output.writeFieldBegin('exchangeMic', Thrift.Type.STRING, 2);
    output.writeString(this.exchangeMic);
    output.writeFieldEnd();
  }
  if (this.sledCommodityType !== null && this.sledCommodityType !== undefined) {
    output.writeFieldBegin('sledCommodityType', Thrift.Type.I32, 3);
    output.writeI32(this.sledCommodityType);
    output.writeFieldEnd();
  }
  if (this.sledCommodityCode !== null && this.sledCommodityCode !== undefined) {
    output.writeFieldBegin('sledCommodityCode', Thrift.Type.STRING, 4);
    output.writeString(this.sledCommodityCode);
    output.writeFieldEnd();
  }
  if (this.platformEnv !== null && this.platformEnv !== undefined) {
    output.writeFieldBegin('platformEnv', Thrift.Type.I32, 5);
    output.writeI32(this.platformEnv);
    output.writeFieldEnd();
  }
  if (this.needTotalCount !== null && this.needTotalCount !== undefined) {
    output.writeFieldBegin('needTotalCount', Thrift.Type.BOOL, 6);
    output.writeBool(this.needTotalCount);
    output.writeFieldEnd();
  }
  if (this.sledCommodityCodePartical !== null && this.sledCommodityCodePartical !== undefined) {
    output.writeFieldBegin('sledCommodityCodePartical', Thrift.Type.STRING, 10);
    output.writeString(this.sledCommodityCodePartical);
    output.writeFieldEnd();
  }
  if (this.engNamePartical !== null && this.engNamePartical !== undefined) {
    output.writeFieldBegin('engNamePartical', Thrift.Type.STRING, 12);
    output.writeString(this.engNamePartical);
    output.writeFieldEnd();
  }
  if (this.cnNamePartical !== null && this.cnNamePartical !== undefined) {
    output.writeFieldBegin('cnNamePartical', Thrift.Type.STRING, 13);
    output.writeString(this.cnNamePartical);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqSledExchangeOption = function(args) {
  this.sledExchangeIds = null;
  this.exchangeMic = null;
  this.needTotalCount = true;
  this.exchangeMicPartical = null;
  this.nameInstitutionPartical = null;
  this.acronymPartical = null;
  this.cnAcronymPartical = null;
  this.cnNamePartical = null;
  if (args) {
    if (args.sledExchangeIds !== undefined) {
      this.sledExchangeIds = args.sledExchangeIds;
    }
    if (args.exchangeMic !== undefined) {
      this.exchangeMic = args.exchangeMic;
    }
    if (args.needTotalCount !== undefined) {
      this.needTotalCount = args.needTotalCount;
    }
    if (args.exchangeMicPartical !== undefined) {
      this.exchangeMicPartical = args.exchangeMicPartical;
    }
    if (args.nameInstitutionPartical !== undefined) {
      this.nameInstitutionPartical = args.nameInstitutionPartical;
    }
    if (args.acronymPartical !== undefined) {
      this.acronymPartical = args.acronymPartical;
    }
    if (args.cnAcronymPartical !== undefined) {
      this.cnAcronymPartical = args.cnAcronymPartical;
    }
    if (args.cnNamePartical !== undefined) {
      this.cnNamePartical = args.cnNamePartical;
    }
  }
};
ReqSledExchangeOption.prototype = {};
ReqSledExchangeOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.sledExchangeIds = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readI32().value;
          this.sledExchangeIds.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeMic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.needTotalCount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.exchangeMicPartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.nameInstitutionPartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.acronymPartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.cnAcronymPartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.cnNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqSledExchangeOption.prototype.write = function(output) {
  output.writeStructBegin('ReqSledExchangeOption');
  if (this.sledExchangeIds !== null && this.sledExchangeIds !== undefined) {
    output.writeFieldBegin('sledExchangeIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.sledExchangeIds.length);
    for (var iter63 in this.sledExchangeIds)
    {
      if (this.sledExchangeIds.hasOwnProperty(iter63))
      {
        iter63 = this.sledExchangeIds[iter63];
        output.writeI32(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.exchangeMic !== null && this.exchangeMic !== undefined) {
    output.writeFieldBegin('exchangeMic', Thrift.Type.STRING, 2);
    output.writeString(this.exchangeMic);
    output.writeFieldEnd();
  }
  if (this.needTotalCount !== null && this.needTotalCount !== undefined) {
    output.writeFieldBegin('needTotalCount', Thrift.Type.BOOL, 6);
    output.writeBool(this.needTotalCount);
    output.writeFieldEnd();
  }
  if (this.exchangeMicPartical !== null && this.exchangeMicPartical !== undefined) {
    output.writeFieldBegin('exchangeMicPartical', Thrift.Type.STRING, 10);
    output.writeString(this.exchangeMicPartical);
    output.writeFieldEnd();
  }
  if (this.nameInstitutionPartical !== null && this.nameInstitutionPartical !== undefined) {
    output.writeFieldBegin('nameInstitutionPartical', Thrift.Type.STRING, 11);
    output.writeString(this.nameInstitutionPartical);
    output.writeFieldEnd();
  }
  if (this.acronymPartical !== null && this.acronymPartical !== undefined) {
    output.writeFieldBegin('acronymPartical', Thrift.Type.STRING, 12);
    output.writeString(this.acronymPartical);
    output.writeFieldEnd();
  }
  if (this.cnAcronymPartical !== null && this.cnAcronymPartical !== undefined) {
    output.writeFieldBegin('cnAcronymPartical', Thrift.Type.STRING, 13);
    output.writeString(this.cnAcronymPartical);
    output.writeFieldEnd();
  }
  if (this.cnNamePartical !== null && this.cnNamePartical !== undefined) {
    output.writeFieldBegin('cnNamePartical', Thrift.Type.STRING, 14);
    output.writeString(this.cnNamePartical);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SledExchangePage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SledExchangePage.prototype = {};
SledExchangePage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.page = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new SledExchange();
          elem70.read(input);
          this.page.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SledExchangePage.prototype.write = function(output) {
  output.writeStructBegin('SledExchangePage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter71 in this.page)
    {
      if (this.page.hasOwnProperty(iter71))
      {
        iter71 = this.page[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SledCommodityPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SledCommodityPage.prototype = {};
SledCommodityPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.page = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new SledCommodity();
          elem78.read(input);
          this.page.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SledCommodityPage.prototype.write = function(output) {
  output.writeStructBegin('SledCommodityPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter79 in this.page)
    {
      if (this.page.hasOwnProperty(iter79))
      {
        iter79 = this.page[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SledContractPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SledContractPage.prototype = {};
SledContractPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.page = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new SledContract();
          elem86.read(input);
          this.page.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SledContractPage.prototype.write = function(output) {
  output.writeStructBegin('SledContractPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter87 in this.page)
    {
      if (this.page.hasOwnProperty(iter87))
      {
        iter87 = this.page[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommodityMappingPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
CommodityMappingPage.prototype = {};
CommodityMappingPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.page = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new CommodityMapping();
          elem94.read(input);
          this.page.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommodityMappingPage.prototype.write = function(output) {
  output.writeStructBegin('CommodityMappingPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter95 in this.page)
    {
      if (this.page.hasOwnProperty(iter95))
      {
        iter95 = this.page[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqCommodityMappingOption = function(args) {
  this.sledCommodityIdList = null;
  this.exchange = null;
  this.commodityType = null;
  this.commodityCode = null;
  this.brokerEntryId = null;
  this.mapIds = null;
  this.techPlatform = null;
  this.needTotalCount = true;
  if (args) {
    if (args.sledCommodityIdList !== undefined) {
      this.sledCommodityIdList = args.sledCommodityIdList;
    }
    if (args.exchange !== undefined) {
      this.exchange = args.exchange;
    }
    if (args.commodityType !== undefined) {
      this.commodityType = args.commodityType;
    }
    if (args.commodityCode !== undefined) {
      this.commodityCode = args.commodityCode;
    }
    if (args.brokerEntryId !== undefined) {
      this.brokerEntryId = args.brokerEntryId;
    }
    if (args.mapIds !== undefined) {
      this.mapIds = args.mapIds;
    }
    if (args.techPlatform !== undefined) {
      this.techPlatform = args.techPlatform;
    }
    if (args.needTotalCount !== undefined) {
      this.needTotalCount = args.needTotalCount;
    }
  }
};
ReqCommodityMappingOption.prototype = {};
ReqCommodityMappingOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.sledCommodityIdList = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readI32().value;
          this.sledCommodityIdList.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.exchange = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.commodityType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.commodityCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.brokerEntryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size103 = 0;
        var _rtmp3107;
        this.mapIds = [];
        var _etype106 = 0;
        _rtmp3107 = input.readListBegin();
        _etype106 = _rtmp3107.etype;
        _size103 = _rtmp3107.size;
        for (var _i108 = 0; _i108 < _size103; ++_i108)
        {
          var elem109 = null;
          elem109 = input.readI32().value;
          this.mapIds.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.techPlatform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.needTotalCount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqCommodityMappingOption.prototype.write = function(output) {
  output.writeStructBegin('ReqCommodityMappingOption');
  if (this.sledCommodityIdList !== null && this.sledCommodityIdList !== undefined) {
    output.writeFieldBegin('sledCommodityIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.sledCommodityIdList.length);
    for (var iter110 in this.sledCommodityIdList)
    {
      if (this.sledCommodityIdList.hasOwnProperty(iter110))
      {
        iter110 = this.sledCommodityIdList[iter110];
        output.writeI32(iter110);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.exchange !== null && this.exchange !== undefined) {
    output.writeFieldBegin('exchange', Thrift.Type.STRING, 2);
    output.writeString(this.exchange);
    output.writeFieldEnd();
  }
  if (this.commodityType !== null && this.commodityType !== undefined) {
    output.writeFieldBegin('commodityType', Thrift.Type.STRING, 3);
    output.writeString(this.commodityType);
    output.writeFieldEnd();
  }
  if (this.commodityCode !== null && this.commodityCode !== undefined) {
    output.writeFieldBegin('commodityCode', Thrift.Type.STRING, 4);
    output.writeString(this.commodityCode);
    output.writeFieldEnd();
  }
  if (this.brokerEntryId !== null && this.brokerEntryId !== undefined) {
    output.writeFieldBegin('brokerEntryId', Thrift.Type.I32, 5);
    output.writeI32(this.brokerEntryId);
    output.writeFieldEnd();
  }
  if (this.mapIds !== null && this.mapIds !== undefined) {
    output.writeFieldBegin('mapIds', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.mapIds.length);
    for (var iter111 in this.mapIds)
    {
      if (this.mapIds.hasOwnProperty(iter111))
      {
        iter111 = this.mapIds[iter111];
        output.writeI32(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.techPlatform !== null && this.techPlatform !== undefined) {
    output.writeFieldBegin('techPlatform', Thrift.Type.I32, 7);
    output.writeI32(this.techPlatform);
    output.writeFieldEnd();
  }
  if (this.needTotalCount !== null && this.needTotalCount !== undefined) {
    output.writeFieldBegin('needTotalCount', Thrift.Type.BOOL, 8);
    output.writeBool(this.needTotalCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

