package com.longsheng.xueqiao.admin.web.controller;import java.io.IOException;import java.util.Iterator;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.codec.binary.StringUtils;import org.apache.commons.fileupload.FileItem;import org.apache.commons.fileupload.FileItemFactory;import org.apache.commons.fileupload.disk.DiskFileItemFactory;import org.apache.commons.fileupload.servlet.ServletFileUpload;import org.apache.commons.lang.math.RandomUtils;import org.apache.thrift.TException;import org.soldier.base.logger.AppLog;import org.soldier.platform.svr_platform.comm.ErrorInfo;import com.antiy.error_code.ErrorCodeOuter;import com.longsheng.xueqiao.contract.thriftapi.CommodityMapFileInfo;import com.longsheng.xueqiao.contract.thriftapi.ImportCommodityMapResp;import com.longsheng.xueqiao.contract.thriftapi.client.ContractServiceStub;public class UploadCommodityMappingFile extends HttpServlet {	private static final long serialVersionUID = 1L;	private static final int TIME_OUT = 30000;	protected void doGet(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException {		this.doPost(request, resp);	}	@Override	protected void doPost(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException {		ErrorInfo errorInfo = new ErrorInfo(ErrorCodeOuter.SUCCESS.getErrorCode(), "");		int brokerEntryId = 0;		int mappingVersionCode = 0;		String mappingFileMd5Code = null;		byte[] mappingFileBytes = null;		// String uploadFileFormat = null;		// String savedFileUrl = null;		boolean isMultipart = ServletFileUpload.isMultipartContent(request);// 判断提交的表单是不是普通表单，不是的话就进行上传		if (isMultipart) {// 不是普通表单的话就进行上传			FileItemFactory factory = new DiskFileItemFactory();// 固定用法，创建一个FileItemFactory对象			ServletFileUpload upload = new ServletFileUpload(factory);// 固定用法，创建一个ServletFileUpload对象			Iterator<FileItem> items;// 定义一个保存所有表单数据的集合			try {				items = upload.parseRequest(request).iterator();// 将表单数据全部赋值给items				while (items.hasNext()) {// while循环迭代items，得到所有的表单数据					FileItem item = items.next();					String fieldName = item.getFieldName();					if (fieldName.equals("broker_entry_id")) {						brokerEntryId = Integer.parseInt(item.getString("utf-8"));					} else if (fieldName.equals("mapping_file_version_code")) {						mappingVersionCode = Integer.parseInt(item.getString("utf-8"));					} else if (fieldName.equals("mapping_file_md5_code")) {						mappingFileMd5Code = item.getString("utf-8");					} else if (fieldName.equals("file")) {						mappingFileBytes = item.get();						String fileName = item.getName();						AppLog.i("UploadCommodityMappingFile ---- doPost ---- fileName : " + fileName);					}				}			} catch (Exception e) {				AppLog.e(e.getMessage(), e);				errorInfo.setErrorCode(ErrorCodeOuter.SERVER_BUSY.getErrorCode());				errorInfo.setErrorMsg(ErrorCodeOuter.SERVER_BUSY.getErrorMsg());				httpRespOutputPlainText(resp, errorInfoToJson(errorInfo));				return;			}		}		//		AppLog.i("UploadCommodityMappingFile ---- doPost ---- errorInfo.getErrorCode() : " + errorInfo.getErrorCode());//		//		if (errorInfo.getErrorCode() != 0) {//			httpRespOutputPlainText(resp, errorInfoToJson(errorInfo));//		} else {						AppLog.i("UploadCommodityMappingFile ---- doPost ---- isMultipart : " + isMultipart + ", brokerEntryId : "					+ brokerEntryId + ", mappingVersionCode : " + mappingVersionCode + ", mappingFileMd5Code : "					+ mappingFileMd5Code);//			AppLog.i("UploadCommodityMappingFile ---- doPost ---- mappingFileBytes : " + mappingFileBytes);			if (mappingVersionCode <= 0) {			errorInfo.setErrorCode(ErrorCodeOuter.PARAM_ERROR.getErrorCode());			errorInfo.setErrorMsg("请输入版本信息id");			httpRespOutputPlainText(resp, errorInfoToJson(errorInfo));			return;		}		if (mappingFileMd5Code == null || mappingFileMd5Code.isEmpty()) {			errorInfo.setErrorCode(ErrorCodeOuter.PARAM_ERROR.getErrorCode());			errorInfo.setErrorMsg("请输入MD5校验码");			httpRespOutputPlainText(resp, errorInfoToJson(errorInfo));			return;		}		if (mappingFileBytes == null || mappingFileBytes.length == 0) {			errorInfo.setErrorCode(ErrorCodeOuter.PARAM_ERROR.getErrorCode());			errorInfo.setErrorMsg("请上传一个文件");			httpRespOutputPlainText(resp, errorInfoToJson(errorInfo));			return;		}		ContractServiceStub contractServiceStub = new ContractServiceStub();		CommodityMapFileInfo mapFileInfo = new CommodityMapFileInfo();		mapFileInfo.setBrokerEntryId(brokerEntryId);		mapFileInfo.setCommodityMapFile(mappingFileBytes);		mapFileInfo.setFileMD5(mappingFileMd5Code);		mapFileInfo.setVersion(mappingVersionCode);		try {			ImportCommodityMapResp importCommodityMapResp = contractServiceStub.importCommodityMapFile(RandomUtils.nextInt(), TIME_OUT, mapFileInfo);			AppLog.i("UploadCommodityMappingFile ---- doPost ---- importCommodityMapResp : " + importCommodityMapResp.toString());		} catch (ErrorInfo e) {			AppLog.e(e.getMessage(), e);			AppLog.i("UploadCommodityMappingFile ---- doPost ---- ErrorInfo : " + e.getErrorCode() + ", msg : " + e.getErrorMsg());			httpRespOutputPlainText(resp, errorInfoToJson(e));			return;		} catch (Throwable e) {			AppLog.e(e.getMessage(), e);			AppLog.i("UploadCommodityMappingFile ---- doPost ---- Throwable : " + e.getMessage());			errorInfo.setErrorCode(ErrorCodeOuter.SERVER_BUSY.getErrorCode());			errorInfo.setErrorMsg(ErrorCodeOuter.SERVER_BUSY.getErrorMsg());			httpRespOutputPlainText(resp, errorInfoToJson(errorInfo));			return;		}		httpRespOutputPlainText(resp, errorInfoToJson(errorInfo));//		}	}	//	private void printImportCommodityMapResp(ImportCommodityMapResp importCommodityMapResp) {//		if (importCommodityMapResp == null) {//			AppLog.i("UploadCommodityMappingFile ---- printImportCommodityMapResp ---- importCommodityMapResp is null");//			return;//		}//		StringBuilder builder = new StringBuilder();//		builder.append("UploadCommodityMappingFile ---- complete : ");//		builder.append(importCommodityMapResp.isComplete());//		builder.append(", existMapping : [");//		if (importCommodityMapResp.getExistMapping() != null) {//			for (String existMappingStr : importCommodityMapResp.getExistMapping()) {//				builder.append(existMappingStr);//				builder.append(",");//			}//		} else {//			AppLog.i("UploadCommodityMappingFile ---- printImportCommodityMapResp ---- importCommodityMapResp.getExistMapping() is null");//		}//		//		builder.append("], conflictMapping : [");//		if (importCommodityMapResp.getConflictMapping() != null) {//			for (String conflictMappingStr : importCommodityMapResp.getConflictMapping()) {//				builder.append(conflictMappingStr);//				builder.append(",");//			}//		} else {//			AppLog.i("UploadCommodityMappingFile ---- printImportCommodityMapResp ---- importCommodityMapResp.getConflictMapping() is null");//		}//		//		builder.append("], addMapping : [");//		if (importCommodityMapResp.getAddMapping() != null) {//			for (String addMappingStr : importCommodityMapResp.getAddMapping()) {//				builder.append(addMappingStr);//				builder.append(",");//			}//		} else {//			AppLog.i("UploadCommodityMappingFile ---- printImportCommodityMapResp ---- importCommodityMapResp.getAddMapping() is null");//		}//		//		builder.append("]");//		AppLog.i(builder.toString());//	}	protected String errorInfoToJson(ErrorInfo err) {		if (err != null) {			/*			 * String json = new Gson().toJson(obj); return json;			 */			StringBuffer jsonBuilder = new StringBuffer();			jsonBuilder.append("{\"errorCode\":").append(err.getErrorCode()).append(",").append("\"errorMsg\":\"")					.append(err.getErrorMsg()).append("\"}");			return jsonBuilder.toString();		}		return null;	}	protected void httpRespOutputPlainText(HttpServletResponse resp, String text) throws IOException {		resp.setContentType("application/json;charset=UTF-8");		resp.getWriter().write(text);		resp.getWriter().flush();	}	protected int getCurrentTimestamp() {		return (int) (System.currentTimeMillis() / 1000);	}}