/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.payment.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PurchaseHistory implements org.apache.thrift.TBase<PurchaseHistory, PurchaseHistory._Fields>, java.io.Serializable, Cloneable, Comparable<PurchaseHistory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PurchaseHistory");

  private static final org.apache.thrift.protocol.TField HISTORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("historyId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENCY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NEW_XCOIN_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("newXCoinBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField COMPANY_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyGroupId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NEW_EXPIRED_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("newExpiredTimestamp", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PurchaseHistoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PurchaseHistoryTupleSchemeFactory());
  }

  public int historyId; // optional
  public int productId; // optional
  public String productName; // optional
  public int orderId; // optional
  public double totalAmount; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType
   */
  public com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType currencyType; // optional
  public int companyId; // optional
  public double newXCoinBalance; // optional
  public int companyGroupId; // optional
  public long newExpiredTimestamp; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HISTORY_ID((short)1, "historyId"),
    PRODUCT_ID((short)2, "productId"),
    PRODUCT_NAME((short)3, "productName"),
    ORDER_ID((short)4, "orderId"),
    TOTAL_AMOUNT((short)5, "totalAmount"),
    /**
     * 
     * @see com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType
     */
    CURRENCY_TYPE((short)6, "currencyType"),
    COMPANY_ID((short)7, "companyId"),
    NEW_XCOIN_BALANCE((short)8, "newXCoinBalance"),
    COMPANY_GROUP_ID((short)9, "companyGroupId"),
    NEW_EXPIRED_TIMESTAMP((short)10, "newExpiredTimestamp"),
    CREATE_TIMESTAMP((short)30, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)31, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HISTORY_ID
          return HISTORY_ID;
        case 2: // PRODUCT_ID
          return PRODUCT_ID;
        case 3: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 4: // ORDER_ID
          return ORDER_ID;
        case 5: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 6: // CURRENCY_TYPE
          return CURRENCY_TYPE;
        case 7: // COMPANY_ID
          return COMPANY_ID;
        case 8: // NEW_XCOIN_BALANCE
          return NEW_XCOIN_BALANCE;
        case 9: // COMPANY_GROUP_ID
          return COMPANY_GROUP_ID;
        case 10: // NEW_EXPIRED_TIMESTAMP
          return NEW_EXPIRED_TIMESTAMP;
        case 30: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 31: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HISTORYID_ISSET_ID = 0;
  private static final int __PRODUCTID_ISSET_ID = 1;
  private static final int __ORDERID_ISSET_ID = 2;
  private static final int __TOTALAMOUNT_ISSET_ID = 3;
  private static final int __COMPANYID_ISSET_ID = 4;
  private static final int __NEWXCOINBALANCE_ISSET_ID = 5;
  private static final int __COMPANYGROUPID_ISSET_ID = 6;
  private static final int __NEWEXPIREDTIMESTAMP_ISSET_ID = 7;
  private static final int __CREATETIMESTAMP_ISSET_ID = 8;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HISTORY_ID,_Fields.PRODUCT_ID,_Fields.PRODUCT_NAME,_Fields.ORDER_ID,_Fields.TOTAL_AMOUNT,_Fields.CURRENCY_TYPE,_Fields.COMPANY_ID,_Fields.NEW_XCOIN_BALANCE,_Fields.COMPANY_GROUP_ID,_Fields.NEW_EXPIRED_TIMESTAMP,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HISTORY_ID, new org.apache.thrift.meta_data.FieldMetaData("historyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("currencyType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType.class)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_XCOIN_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("newXCoinBalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMPANY_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("companyGroupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_EXPIRED_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("newExpiredTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PurchaseHistory.class, metaDataMap);
  }

  public PurchaseHistory() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PurchaseHistory(PurchaseHistory other) {
    __isset_bitfield = other.__isset_bitfield;
    this.historyId = other.historyId;
    this.productId = other.productId;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.orderId = other.orderId;
    this.totalAmount = other.totalAmount;
    if (other.isSetCurrencyType()) {
      this.currencyType = other.currencyType;
    }
    this.companyId = other.companyId;
    this.newXCoinBalance = other.newXCoinBalance;
    this.companyGroupId = other.companyGroupId;
    this.newExpiredTimestamp = other.newExpiredTimestamp;
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public PurchaseHistory deepCopy() {
    return new PurchaseHistory(this);
  }

  @Override
  public void clear() {
    setHistoryIdIsSet(false);
    this.historyId = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    this.productName = null;
    setOrderIdIsSet(false);
    this.orderId = 0;
    setTotalAmountIsSet(false);
    this.totalAmount = 0.0;
    this.currencyType = null;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setNewXCoinBalanceIsSet(false);
    this.newXCoinBalance = 0.0;
    setCompanyGroupIdIsSet(false);
    this.companyGroupId = 0;
    setNewExpiredTimestampIsSet(false);
    this.newExpiredTimestamp = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public int getHistoryId() {
    return this.historyId;
  }

  public PurchaseHistory setHistoryId(int historyId) {
    this.historyId = historyId;
    setHistoryIdIsSet(true);
    return this;
  }

  public void unsetHistoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HISTORYID_ISSET_ID);
  }

  /** Returns true if field historyId is set (has been assigned a value) and false otherwise */
  public boolean isSetHistoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __HISTORYID_ISSET_ID);
  }

  public void setHistoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HISTORYID_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public PurchaseHistory setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public PurchaseHistory setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public int getOrderId() {
    return this.orderId;
  }

  public PurchaseHistory setOrderId(int orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public double getTotalAmount() {
    return this.totalAmount;
  }

  public PurchaseHistory setTotalAmount(double totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  /**
   * 
   * @see com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType
   */
  public com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType getCurrencyType() {
    return this.currencyType;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType
   */
  public PurchaseHistory setCurrencyType(com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType currencyType) {
    this.currencyType = currencyType;
    return this;
  }

  public void unsetCurrencyType() {
    this.currencyType = null;
  }

  /** Returns true if field currencyType is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyType() {
    return this.currencyType != null;
  }

  public void setCurrencyTypeIsSet(boolean value) {
    if (!value) {
      this.currencyType = null;
    }
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public PurchaseHistory setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public double getNewXCoinBalance() {
    return this.newXCoinBalance;
  }

  public PurchaseHistory setNewXCoinBalance(double newXCoinBalance) {
    this.newXCoinBalance = newXCoinBalance;
    setNewXCoinBalanceIsSet(true);
    return this;
  }

  public void unsetNewXCoinBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWXCOINBALANCE_ISSET_ID);
  }

  /** Returns true if field newXCoinBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetNewXCoinBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWXCOINBALANCE_ISSET_ID);
  }

  public void setNewXCoinBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWXCOINBALANCE_ISSET_ID, value);
  }

  public int getCompanyGroupId() {
    return this.companyGroupId;
  }

  public PurchaseHistory setCompanyGroupId(int companyGroupId) {
    this.companyGroupId = companyGroupId;
    setCompanyGroupIdIsSet(true);
    return this;
  }

  public void unsetCompanyGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYGROUPID_ISSET_ID);
  }

  /** Returns true if field companyGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYGROUPID_ISSET_ID);
  }

  public void setCompanyGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYGROUPID_ISSET_ID, value);
  }

  public long getNewExpiredTimestamp() {
    return this.newExpiredTimestamp;
  }

  public PurchaseHistory setNewExpiredTimestamp(long newExpiredTimestamp) {
    this.newExpiredTimestamp = newExpiredTimestamp;
    setNewExpiredTimestampIsSet(true);
    return this;
  }

  public void unsetNewExpiredTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWEXPIREDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field newExpiredTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetNewExpiredTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWEXPIREDTIMESTAMP_ISSET_ID);
  }

  public void setNewExpiredTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWEXPIREDTIMESTAMP_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public PurchaseHistory setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public PurchaseHistory setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HISTORY_ID:
      if (value == null) {
        unsetHistoryId();
      } else {
        setHistoryId((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Integer)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Double)value);
      }
      break;

    case CURRENCY_TYPE:
      if (value == null) {
        unsetCurrencyType();
      } else {
        setCurrencyType((com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case NEW_XCOIN_BALANCE:
      if (value == null) {
        unsetNewXCoinBalance();
      } else {
        setNewXCoinBalance((Double)value);
      }
      break;

    case COMPANY_GROUP_ID:
      if (value == null) {
        unsetCompanyGroupId();
      } else {
        setCompanyGroupId((Integer)value);
      }
      break;

    case NEW_EXPIRED_TIMESTAMP:
      if (value == null) {
        unsetNewExpiredTimestamp();
      } else {
        setNewExpiredTimestamp((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HISTORY_ID:
      return Integer.valueOf(getHistoryId());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case PRODUCT_NAME:
      return getProductName();

    case ORDER_ID:
      return Integer.valueOf(getOrderId());

    case TOTAL_AMOUNT:
      return Double.valueOf(getTotalAmount());

    case CURRENCY_TYPE:
      return getCurrencyType();

    case COMPANY_ID:
      return Integer.valueOf(getCompanyId());

    case NEW_XCOIN_BALANCE:
      return Double.valueOf(getNewXCoinBalance());

    case COMPANY_GROUP_ID:
      return Integer.valueOf(getCompanyGroupId());

    case NEW_EXPIRED_TIMESTAMP:
      return Long.valueOf(getNewExpiredTimestamp());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HISTORY_ID:
      return isSetHistoryId();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case ORDER_ID:
      return isSetOrderId();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case CURRENCY_TYPE:
      return isSetCurrencyType();
    case COMPANY_ID:
      return isSetCompanyId();
    case NEW_XCOIN_BALANCE:
      return isSetNewXCoinBalance();
    case COMPANY_GROUP_ID:
      return isSetCompanyGroupId();
    case NEW_EXPIRED_TIMESTAMP:
      return isSetNewExpiredTimestamp();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PurchaseHistory)
      return this.equals((PurchaseHistory)that);
    return false;
  }

  public boolean equals(PurchaseHistory that) {
    if (that == null)
      return false;

    boolean this_present_historyId = true && this.isSetHistoryId();
    boolean that_present_historyId = true && that.isSetHistoryId();
    if (this_present_historyId || that_present_historyId) {
      if (!(this_present_historyId && that_present_historyId))
        return false;
      if (this.historyId != that.historyId)
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_currencyType = true && this.isSetCurrencyType();
    boolean that_present_currencyType = true && that.isSetCurrencyType();
    if (this_present_currencyType || that_present_currencyType) {
      if (!(this_present_currencyType && that_present_currencyType))
        return false;
      if (!this.currencyType.equals(that.currencyType))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_newXCoinBalance = true && this.isSetNewXCoinBalance();
    boolean that_present_newXCoinBalance = true && that.isSetNewXCoinBalance();
    if (this_present_newXCoinBalance || that_present_newXCoinBalance) {
      if (!(this_present_newXCoinBalance && that_present_newXCoinBalance))
        return false;
      if (this.newXCoinBalance != that.newXCoinBalance)
        return false;
    }

    boolean this_present_companyGroupId = true && this.isSetCompanyGroupId();
    boolean that_present_companyGroupId = true && that.isSetCompanyGroupId();
    if (this_present_companyGroupId || that_present_companyGroupId) {
      if (!(this_present_companyGroupId && that_present_companyGroupId))
        return false;
      if (this.companyGroupId != that.companyGroupId)
        return false;
    }

    boolean this_present_newExpiredTimestamp = true && this.isSetNewExpiredTimestamp();
    boolean that_present_newExpiredTimestamp = true && that.isSetNewExpiredTimestamp();
    if (this_present_newExpiredTimestamp || that_present_newExpiredTimestamp) {
      if (!(this_present_newExpiredTimestamp && that_present_newExpiredTimestamp))
        return false;
      if (this.newExpiredTimestamp != that.newExpiredTimestamp)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PurchaseHistory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHistoryId()).compareTo(other.isSetHistoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyId, other.historyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyType()).compareTo(other.isSetCurrencyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyType, other.currencyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewXCoinBalance()).compareTo(other.isSetNewXCoinBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewXCoinBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newXCoinBalance, other.newXCoinBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyGroupId()).compareTo(other.isSetCompanyGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyGroupId, other.companyGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewExpiredTimestamp()).compareTo(other.isSetNewExpiredTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewExpiredTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newExpiredTimestamp, other.newExpiredTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PurchaseHistory(");
    boolean first = true;

    if (isSetHistoryId()) {
      sb.append("historyId:");
      sb.append(this.historyId);
      first = false;
    }
    if (isSetProductId()) {
      if (!first) sb.append(", ");
      sb.append("productId:");
      sb.append(this.productId);
      first = false;
    }
    if (isSetProductName()) {
      if (!first) sb.append(", ");
      sb.append("productName:");
      if (this.productName == null) {
        sb.append("null");
      } else {
        sb.append(this.productName);
      }
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetTotalAmount()) {
      if (!first) sb.append(", ");
      sb.append("totalAmount:");
      sb.append(this.totalAmount);
      first = false;
    }
    if (isSetCurrencyType()) {
      if (!first) sb.append(", ");
      sb.append("currencyType:");
      if (this.currencyType == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyType);
      }
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetNewXCoinBalance()) {
      if (!first) sb.append(", ");
      sb.append("newXCoinBalance:");
      sb.append(this.newXCoinBalance);
      first = false;
    }
    if (isSetCompanyGroupId()) {
      if (!first) sb.append(", ");
      sb.append("companyGroupId:");
      sb.append(this.companyGroupId);
      first = false;
    }
    if (isSetNewExpiredTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("newExpiredTimestamp:");
      sb.append(this.newExpiredTimestamp);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PurchaseHistoryStandardSchemeFactory implements SchemeFactory {
    public PurchaseHistoryStandardScheme getScheme() {
      return new PurchaseHistoryStandardScheme();
    }
  }

  private static class PurchaseHistoryStandardScheme extends StandardScheme<PurchaseHistory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PurchaseHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HISTORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.historyId = iprot.readI32();
              struct.setHistoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderId = iprot.readI32();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmount = iprot.readDouble();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENCY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currencyType = com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType.findByValue(iprot.readI32());
              struct.setCurrencyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEW_XCOIN_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.newXCoinBalance = iprot.readDouble();
              struct.setNewXCoinBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMPANY_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyGroupId = iprot.readI32();
              struct.setCompanyGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NEW_EXPIRED_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.newExpiredTimestamp = iprot.readI64();
              struct.setNewExpiredTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PurchaseHistory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetHistoryId()) {
        oprot.writeFieldBegin(HISTORY_ID_FIELD_DESC);
        oprot.writeI32(struct.historyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProductId()) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI32(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        if (struct.isSetProductName()) {
          oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
          oprot.writeString(struct.productName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI32(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.totalAmount);
        oprot.writeFieldEnd();
      }
      if (struct.currencyType != null) {
        if (struct.isSetCurrencyType()) {
          oprot.writeFieldBegin(CURRENCY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.currencyType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNewXCoinBalance()) {
        oprot.writeFieldBegin(NEW_XCOIN_BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.newXCoinBalance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyGroupId()) {
        oprot.writeFieldBegin(COMPANY_GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.companyGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNewExpiredTimestamp()) {
        oprot.writeFieldBegin(NEW_EXPIRED_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.newExpiredTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PurchaseHistoryTupleSchemeFactory implements SchemeFactory {
    public PurchaseHistoryTupleScheme getScheme() {
      return new PurchaseHistoryTupleScheme();
    }
  }

  private static class PurchaseHistoryTupleScheme extends TupleScheme<PurchaseHistory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PurchaseHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHistoryId()) {
        optionals.set(0);
      }
      if (struct.isSetProductId()) {
        optionals.set(1);
      }
      if (struct.isSetProductName()) {
        optionals.set(2);
      }
      if (struct.isSetOrderId()) {
        optionals.set(3);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(4);
      }
      if (struct.isSetCurrencyType()) {
        optionals.set(5);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(6);
      }
      if (struct.isSetNewXCoinBalance()) {
        optionals.set(7);
      }
      if (struct.isSetCompanyGroupId()) {
        optionals.set(8);
      }
      if (struct.isSetNewExpiredTimestamp()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(10);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetHistoryId()) {
        oprot.writeI32(struct.historyId);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetOrderId()) {
        oprot.writeI32(struct.orderId);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeDouble(struct.totalAmount);
      }
      if (struct.isSetCurrencyType()) {
        oprot.writeI32(struct.currencyType.getValue());
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetNewXCoinBalance()) {
        oprot.writeDouble(struct.newXCoinBalance);
      }
      if (struct.isSetCompanyGroupId()) {
        oprot.writeI32(struct.companyGroupId);
      }
      if (struct.isSetNewExpiredTimestamp()) {
        oprot.writeI64(struct.newExpiredTimestamp);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PurchaseHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.historyId = iprot.readI32();
        struct.setHistoryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderId = iprot.readI32();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalAmount = iprot.readDouble();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currencyType = com.longsheng.xueqiao.payment.product.thriftapi.CurrencyType.findByValue(iprot.readI32());
        struct.setCurrencyTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.newXCoinBalance = iprot.readDouble();
        struct.setNewXCoinBalanceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.companyGroupId = iprot.readI32();
        struct.setCompanyGroupIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.newExpiredTimestamp = iprot.readI64();
        struct.setNewExpiredTimestampIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

