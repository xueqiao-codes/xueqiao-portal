/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.payment.balance.alteration;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BalanceAlteration implements org.apache.thrift.TBase<BalanceAlteration, BalanceAlteration._Fields>, java.io.Serializable, Cloneable, Comparable<BalanceAlteration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BalanceAlteration");

  private static final org.apache.thrift.protocol.TField ALTERATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("alterationId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField OPERATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ALTERATION_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("alterationChannel", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField THIRD_PARTY_TRADE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyTradeNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ALERATION_XCOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("alerationXCoin", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField X_COIN_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("xCoinBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BalanceAlterationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BalanceAlterationTupleSchemeFactory());
  }

  public long alterationId; // optional
  public long companyId; // optional
  /**
   * 
   * @see OperationType
   */
  public OperationType operationType; // optional
  /**
   * 
   * @see AlterationChannel
   */
  public AlterationChannel alterationChannel; // optional
  public String thirdPartyTradeNo; // optional
  public String description; // optional
  public String operator; // optional
  public double alerationXCoin; // optional
  public double xCoinBalance; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALTERATION_ID((short)1, "alterationId"),
    COMPANY_ID((short)2, "companyId"),
    /**
     * 
     * @see OperationType
     */
    OPERATION_TYPE((short)3, "operationType"),
    /**
     * 
     * @see AlterationChannel
     */
    ALTERATION_CHANNEL((short)4, "alterationChannel"),
    THIRD_PARTY_TRADE_NO((short)5, "thirdPartyTradeNo"),
    DESCRIPTION((short)6, "description"),
    OPERATOR((short)7, "operator"),
    ALERATION_XCOIN((short)8, "alerationXCoin"),
    X_COIN_BALANCE((short)9, "xCoinBalance"),
    CREATE_TIMESTAMP((short)20, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)21, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALTERATION_ID
          return ALTERATION_ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // OPERATION_TYPE
          return OPERATION_TYPE;
        case 4: // ALTERATION_CHANNEL
          return ALTERATION_CHANNEL;
        case 5: // THIRD_PARTY_TRADE_NO
          return THIRD_PARTY_TRADE_NO;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        case 7: // OPERATOR
          return OPERATOR;
        case 8: // ALERATION_XCOIN
          return ALERATION_XCOIN;
        case 9: // X_COIN_BALANCE
          return X_COIN_BALANCE;
        case 20: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 21: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALTERATIONID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __ALERATIONXCOIN_ISSET_ID = 2;
  private static final int __XCOINBALANCE_ISSET_ID = 3;
  private static final int __CREATETIMESTAMP_ISSET_ID = 4;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ALTERATION_ID,_Fields.COMPANY_ID,_Fields.OPERATION_TYPE,_Fields.ALTERATION_CHANNEL,_Fields.THIRD_PARTY_TRADE_NO,_Fields.DESCRIPTION,_Fields.OPERATOR,_Fields.ALERATION_XCOIN,_Fields.X_COIN_BALANCE,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALTERATION_ID, new org.apache.thrift.meta_data.FieldMetaData("alterationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OperationType.class)));
    tmpMap.put(_Fields.ALTERATION_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("alterationChannel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AlterationChannel.class)));
    tmpMap.put(_Fields.THIRD_PARTY_TRADE_NO, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyTradeNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALERATION_XCOIN, new org.apache.thrift.meta_data.FieldMetaData("alerationXCoin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.X_COIN_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("xCoinBalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BalanceAlteration.class, metaDataMap);
  }

  public BalanceAlteration() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BalanceAlteration(BalanceAlteration other) {
    __isset_bitfield = other.__isset_bitfield;
    this.alterationId = other.alterationId;
    this.companyId = other.companyId;
    if (other.isSetOperationType()) {
      this.operationType = other.operationType;
    }
    if (other.isSetAlterationChannel()) {
      this.alterationChannel = other.alterationChannel;
    }
    if (other.isSetThirdPartyTradeNo()) {
      this.thirdPartyTradeNo = other.thirdPartyTradeNo;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
    this.alerationXCoin = other.alerationXCoin;
    this.xCoinBalance = other.xCoinBalance;
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public BalanceAlteration deepCopy() {
    return new BalanceAlteration(this);
  }

  @Override
  public void clear() {
    setAlterationIdIsSet(false);
    this.alterationId = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.operationType = null;
    this.alterationChannel = null;
    this.thirdPartyTradeNo = null;
    this.description = null;
    this.operator = null;
    setAlerationXCoinIsSet(false);
    this.alerationXCoin = 0.0;
    setXCoinBalanceIsSet(false);
    this.xCoinBalance = 0.0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public long getAlterationId() {
    return this.alterationId;
  }

  public BalanceAlteration setAlterationId(long alterationId) {
    this.alterationId = alterationId;
    setAlterationIdIsSet(true);
    return this;
  }

  public void unsetAlterationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALTERATIONID_ISSET_ID);
  }

  /** Returns true if field alterationId is set (has been assigned a value) and false otherwise */
  public boolean isSetAlterationId() {
    return EncodingUtils.testBit(__isset_bitfield, __ALTERATIONID_ISSET_ID);
  }

  public void setAlterationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALTERATIONID_ISSET_ID, value);
  }

  public long getCompanyId() {
    return this.companyId;
  }

  public BalanceAlteration setCompanyId(long companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  /**
   * 
   * @see OperationType
   */
  public OperationType getOperationType() {
    return this.operationType;
  }

  /**
   * 
   * @see OperationType
   */
  public BalanceAlteration setOperationType(OperationType operationType) {
    this.operationType = operationType;
    return this;
  }

  public void unsetOperationType() {
    this.operationType = null;
  }

  /** Returns true if field operationType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationType() {
    return this.operationType != null;
  }

  public void setOperationTypeIsSet(boolean value) {
    if (!value) {
      this.operationType = null;
    }
  }

  /**
   * 
   * @see AlterationChannel
   */
  public AlterationChannel getAlterationChannel() {
    return this.alterationChannel;
  }

  /**
   * 
   * @see AlterationChannel
   */
  public BalanceAlteration setAlterationChannel(AlterationChannel alterationChannel) {
    this.alterationChannel = alterationChannel;
    return this;
  }

  public void unsetAlterationChannel() {
    this.alterationChannel = null;
  }

  /** Returns true if field alterationChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetAlterationChannel() {
    return this.alterationChannel != null;
  }

  public void setAlterationChannelIsSet(boolean value) {
    if (!value) {
      this.alterationChannel = null;
    }
  }

  public String getThirdPartyTradeNo() {
    return this.thirdPartyTradeNo;
  }

  public BalanceAlteration setThirdPartyTradeNo(String thirdPartyTradeNo) {
    this.thirdPartyTradeNo = thirdPartyTradeNo;
    return this;
  }

  public void unsetThirdPartyTradeNo() {
    this.thirdPartyTradeNo = null;
  }

  /** Returns true if field thirdPartyTradeNo is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdPartyTradeNo() {
    return this.thirdPartyTradeNo != null;
  }

  public void setThirdPartyTradeNoIsSet(boolean value) {
    if (!value) {
      this.thirdPartyTradeNo = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public BalanceAlteration setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getOperator() {
    return this.operator;
  }

  public BalanceAlteration setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public double getAlerationXCoin() {
    return this.alerationXCoin;
  }

  public BalanceAlteration setAlerationXCoin(double alerationXCoin) {
    this.alerationXCoin = alerationXCoin;
    setAlerationXCoinIsSet(true);
    return this;
  }

  public void unsetAlerationXCoin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALERATIONXCOIN_ISSET_ID);
  }

  /** Returns true if field alerationXCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetAlerationXCoin() {
    return EncodingUtils.testBit(__isset_bitfield, __ALERATIONXCOIN_ISSET_ID);
  }

  public void setAlerationXCoinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALERATIONXCOIN_ISSET_ID, value);
  }

  public double getXCoinBalance() {
    return this.xCoinBalance;
  }

  public BalanceAlteration setXCoinBalance(double xCoinBalance) {
    this.xCoinBalance = xCoinBalance;
    setXCoinBalanceIsSet(true);
    return this;
  }

  public void unsetXCoinBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XCOINBALANCE_ISSET_ID);
  }

  /** Returns true if field xCoinBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetXCoinBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __XCOINBALANCE_ISSET_ID);
  }

  public void setXCoinBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XCOINBALANCE_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public BalanceAlteration setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public BalanceAlteration setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALTERATION_ID:
      if (value == null) {
        unsetAlterationId();
      } else {
        setAlterationId((Long)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Long)value);
      }
      break;

    case OPERATION_TYPE:
      if (value == null) {
        unsetOperationType();
      } else {
        setOperationType((OperationType)value);
      }
      break;

    case ALTERATION_CHANNEL:
      if (value == null) {
        unsetAlterationChannel();
      } else {
        setAlterationChannel((AlterationChannel)value);
      }
      break;

    case THIRD_PARTY_TRADE_NO:
      if (value == null) {
        unsetThirdPartyTradeNo();
      } else {
        setThirdPartyTradeNo((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    case ALERATION_XCOIN:
      if (value == null) {
        unsetAlerationXCoin();
      } else {
        setAlerationXCoin((Double)value);
      }
      break;

    case X_COIN_BALANCE:
      if (value == null) {
        unsetXCoinBalance();
      } else {
        setXCoinBalance((Double)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALTERATION_ID:
      return Long.valueOf(getAlterationId());

    case COMPANY_ID:
      return Long.valueOf(getCompanyId());

    case OPERATION_TYPE:
      return getOperationType();

    case ALTERATION_CHANNEL:
      return getAlterationChannel();

    case THIRD_PARTY_TRADE_NO:
      return getThirdPartyTradeNo();

    case DESCRIPTION:
      return getDescription();

    case OPERATOR:
      return getOperator();

    case ALERATION_XCOIN:
      return Double.valueOf(getAlerationXCoin());

    case X_COIN_BALANCE:
      return Double.valueOf(getXCoinBalance());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALTERATION_ID:
      return isSetAlterationId();
    case COMPANY_ID:
      return isSetCompanyId();
    case OPERATION_TYPE:
      return isSetOperationType();
    case ALTERATION_CHANNEL:
      return isSetAlterationChannel();
    case THIRD_PARTY_TRADE_NO:
      return isSetThirdPartyTradeNo();
    case DESCRIPTION:
      return isSetDescription();
    case OPERATOR:
      return isSetOperator();
    case ALERATION_XCOIN:
      return isSetAlerationXCoin();
    case X_COIN_BALANCE:
      return isSetXCoinBalance();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BalanceAlteration)
      return this.equals((BalanceAlteration)that);
    return false;
  }

  public boolean equals(BalanceAlteration that) {
    if (that == null)
      return false;

    boolean this_present_alterationId = true && this.isSetAlterationId();
    boolean that_present_alterationId = true && that.isSetAlterationId();
    if (this_present_alterationId || that_present_alterationId) {
      if (!(this_present_alterationId && that_present_alterationId))
        return false;
      if (this.alterationId != that.alterationId)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_operationType = true && this.isSetOperationType();
    boolean that_present_operationType = true && that.isSetOperationType();
    if (this_present_operationType || that_present_operationType) {
      if (!(this_present_operationType && that_present_operationType))
        return false;
      if (!this.operationType.equals(that.operationType))
        return false;
    }

    boolean this_present_alterationChannel = true && this.isSetAlterationChannel();
    boolean that_present_alterationChannel = true && that.isSetAlterationChannel();
    if (this_present_alterationChannel || that_present_alterationChannel) {
      if (!(this_present_alterationChannel && that_present_alterationChannel))
        return false;
      if (!this.alterationChannel.equals(that.alterationChannel))
        return false;
    }

    boolean this_present_thirdPartyTradeNo = true && this.isSetThirdPartyTradeNo();
    boolean that_present_thirdPartyTradeNo = true && that.isSetThirdPartyTradeNo();
    if (this_present_thirdPartyTradeNo || that_present_thirdPartyTradeNo) {
      if (!(this_present_thirdPartyTradeNo && that_present_thirdPartyTradeNo))
        return false;
      if (!this.thirdPartyTradeNo.equals(that.thirdPartyTradeNo))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    boolean this_present_alerationXCoin = true && this.isSetAlerationXCoin();
    boolean that_present_alerationXCoin = true && that.isSetAlerationXCoin();
    if (this_present_alerationXCoin || that_present_alerationXCoin) {
      if (!(this_present_alerationXCoin && that_present_alerationXCoin))
        return false;
      if (this.alerationXCoin != that.alerationXCoin)
        return false;
    }

    boolean this_present_xCoinBalance = true && this.isSetXCoinBalance();
    boolean that_present_xCoinBalance = true && that.isSetXCoinBalance();
    if (this_present_xCoinBalance || that_present_xCoinBalance) {
      if (!(this_present_xCoinBalance && that_present_xCoinBalance))
        return false;
      if (this.xCoinBalance != that.xCoinBalance)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BalanceAlteration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAlterationId()).compareTo(other.isSetAlterationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlterationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alterationId, other.alterationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationType()).compareTo(other.isSetOperationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationType, other.operationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlterationChannel()).compareTo(other.isSetAlterationChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlterationChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alterationChannel, other.alterationChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPartyTradeNo()).compareTo(other.isSetThirdPartyTradeNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyTradeNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyTradeNo, other.thirdPartyTradeNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlerationXCoin()).compareTo(other.isSetAlerationXCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlerationXCoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alerationXCoin, other.alerationXCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXCoinBalance()).compareTo(other.isSetXCoinBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXCoinBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xCoinBalance, other.xCoinBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BalanceAlteration(");
    boolean first = true;

    if (isSetAlterationId()) {
      sb.append("alterationId:");
      sb.append(this.alterationId);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetOperationType()) {
      if (!first) sb.append(", ");
      sb.append("operationType:");
      if (this.operationType == null) {
        sb.append("null");
      } else {
        sb.append(this.operationType);
      }
      first = false;
    }
    if (isSetAlterationChannel()) {
      if (!first) sb.append(", ");
      sb.append("alterationChannel:");
      if (this.alterationChannel == null) {
        sb.append("null");
      } else {
        sb.append(this.alterationChannel);
      }
      first = false;
    }
    if (isSetThirdPartyTradeNo()) {
      if (!first) sb.append(", ");
      sb.append("thirdPartyTradeNo:");
      if (this.thirdPartyTradeNo == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdPartyTradeNo);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetOperator()) {
      if (!first) sb.append(", ");
      sb.append("operator:");
      if (this.operator == null) {
        sb.append("null");
      } else {
        sb.append(this.operator);
      }
      first = false;
    }
    if (isSetAlerationXCoin()) {
      if (!first) sb.append(", ");
      sb.append("alerationXCoin:");
      sb.append(this.alerationXCoin);
      first = false;
    }
    if (isSetXCoinBalance()) {
      if (!first) sb.append(", ");
      sb.append("xCoinBalance:");
      sb.append(this.xCoinBalance);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BalanceAlterationStandardSchemeFactory implements SchemeFactory {
    public BalanceAlterationStandardScheme getScheme() {
      return new BalanceAlterationStandardScheme();
    }
  }

  private static class BalanceAlterationStandardScheme extends StandardScheme<BalanceAlteration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BalanceAlteration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALTERATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.alterationId = iprot.readI64();
              struct.setAlterationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.companyId = iprot.readI64();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPERATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationType = OperationType.findByValue(iprot.readI32());
              struct.setOperationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALTERATION_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alterationChannel = AlterationChannel.findByValue(iprot.readI32());
              struct.setAlterationChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // THIRD_PARTY_TRADE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdPartyTradeNo = iprot.readString();
              struct.setThirdPartyTradeNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator = iprot.readString();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALERATION_XCOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.alerationXCoin = iprot.readDouble();
              struct.setAlerationXCoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // X_COIN_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.xCoinBalance = iprot.readDouble();
              struct.setXCoinBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BalanceAlteration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAlterationId()) {
        oprot.writeFieldBegin(ALTERATION_ID_FIELD_DESC);
        oprot.writeI64(struct.alterationId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI64(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.operationType != null) {
        if (struct.isSetOperationType()) {
          oprot.writeFieldBegin(OPERATION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.operationType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.alterationChannel != null) {
        if (struct.isSetAlterationChannel()) {
          oprot.writeFieldBegin(ALTERATION_CHANNEL_FIELD_DESC);
          oprot.writeI32(struct.alterationChannel.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.thirdPartyTradeNo != null) {
        if (struct.isSetThirdPartyTradeNo()) {
          oprot.writeFieldBegin(THIRD_PARTY_TRADE_NO_FIELD_DESC);
          oprot.writeString(struct.thirdPartyTradeNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operator != null) {
        if (struct.isSetOperator()) {
          oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
          oprot.writeString(struct.operator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAlerationXCoin()) {
        oprot.writeFieldBegin(ALERATION_XCOIN_FIELD_DESC);
        oprot.writeDouble(struct.alerationXCoin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetXCoinBalance()) {
        oprot.writeFieldBegin(X_COIN_BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.xCoinBalance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BalanceAlterationTupleSchemeFactory implements SchemeFactory {
    public BalanceAlterationTupleScheme getScheme() {
      return new BalanceAlterationTupleScheme();
    }
  }

  private static class BalanceAlterationTupleScheme extends TupleScheme<BalanceAlteration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BalanceAlteration struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAlterationId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetOperationType()) {
        optionals.set(2);
      }
      if (struct.isSetAlterationChannel()) {
        optionals.set(3);
      }
      if (struct.isSetThirdPartyTradeNo()) {
        optionals.set(4);
      }
      if (struct.isSetDescription()) {
        optionals.set(5);
      }
      if (struct.isSetOperator()) {
        optionals.set(6);
      }
      if (struct.isSetAlerationXCoin()) {
        optionals.set(7);
      }
      if (struct.isSetXCoinBalance()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(9);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetAlterationId()) {
        oprot.writeI64(struct.alterationId);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI64(struct.companyId);
      }
      if (struct.isSetOperationType()) {
        oprot.writeI32(struct.operationType.getValue());
      }
      if (struct.isSetAlterationChannel()) {
        oprot.writeI32(struct.alterationChannel.getValue());
      }
      if (struct.isSetThirdPartyTradeNo()) {
        oprot.writeString(struct.thirdPartyTradeNo);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetOperator()) {
        oprot.writeString(struct.operator);
      }
      if (struct.isSetAlerationXCoin()) {
        oprot.writeDouble(struct.alerationXCoin);
      }
      if (struct.isSetXCoinBalance()) {
        oprot.writeDouble(struct.xCoinBalance);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BalanceAlteration struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.alterationId = iprot.readI64();
        struct.setAlterationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI64();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operationType = OperationType.findByValue(iprot.readI32());
        struct.setOperationTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.alterationChannel = AlterationChannel.findByValue(iprot.readI32());
        struct.setAlterationChannelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.thirdPartyTradeNo = iprot.readString();
        struct.setThirdPartyTradeNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.operator = iprot.readString();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(7)) {
        struct.alerationXCoin = iprot.readDouble();
        struct.setAlerationXCoinIsSet(true);
      }
      if (incoming.get(8)) {
        struct.xCoinBalance = iprot.readDouble();
        struct.setXCoinBalanceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

