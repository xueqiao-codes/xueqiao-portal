/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.quotation.source.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqQuotationAccountOption implements org.apache.thrift.TBase<ReqQuotationAccountOption, ReqQuotationAccountOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqQuotationAccountOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqQuotationAccountOption");

  private static final org.apache.thrift.protocol.TField ACCOUNT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("accountIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accountName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNamePartical", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqQuotationAccountOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqQuotationAccountOptionTupleSchemeFactory());
  }

  public Set<Long> accountIds; // optional
  public String accountName; // optional
  public String accountNamePartical; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_IDS((short)1, "accountIds"),
    ACCOUNT_NAME((short)2, "accountName"),
    ACCOUNT_NAME_PARTICAL((short)10, "accountNamePartical");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_IDS
          return ACCOUNT_IDS;
        case 2: // ACCOUNT_NAME
          return ACCOUNT_NAME;
        case 10: // ACCOUNT_NAME_PARTICAL
          return ACCOUNT_NAME_PARTICAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ACCOUNT_IDS,_Fields.ACCOUNT_NAME,_Fields.ACCOUNT_NAME_PARTICAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_IDS, new org.apache.thrift.meta_data.FieldMetaData("accountIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("accountName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("accountNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqQuotationAccountOption.class, metaDataMap);
  }

  public ReqQuotationAccountOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqQuotationAccountOption(ReqQuotationAccountOption other) {
    if (other.isSetAccountIds()) {
      Set<Long> __this__accountIds = new HashSet<Long>(other.accountIds);
      this.accountIds = __this__accountIds;
    }
    if (other.isSetAccountName()) {
      this.accountName = other.accountName;
    }
    if (other.isSetAccountNamePartical()) {
      this.accountNamePartical = other.accountNamePartical;
    }
  }

  public ReqQuotationAccountOption deepCopy() {
    return new ReqQuotationAccountOption(this);
  }

  @Override
  public void clear() {
    this.accountIds = null;
    this.accountName = null;
    this.accountNamePartical = null;
  }

  public int getAccountIdsSize() {
    return (this.accountIds == null) ? 0 : this.accountIds.size();
  }

  public java.util.Iterator<Long> getAccountIdsIterator() {
    return (this.accountIds == null) ? null : this.accountIds.iterator();
  }

  public void addToAccountIds(long elem) {
    if (this.accountIds == null) {
      this.accountIds = new HashSet<Long>();
    }
    this.accountIds.add(elem);
  }

  public Set<Long> getAccountIds() {
    return this.accountIds;
  }

  public ReqQuotationAccountOption setAccountIds(Set<Long> accountIds) {
    this.accountIds = accountIds;
    return this;
  }

  public void unsetAccountIds() {
    this.accountIds = null;
  }

  /** Returns true if field accountIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountIds() {
    return this.accountIds != null;
  }

  public void setAccountIdsIsSet(boolean value) {
    if (!value) {
      this.accountIds = null;
    }
  }

  public String getAccountName() {
    return this.accountName;
  }

  public ReqQuotationAccountOption setAccountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  public void unsetAccountName() {
    this.accountName = null;
  }

  /** Returns true if field accountName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountName() {
    return this.accountName != null;
  }

  public void setAccountNameIsSet(boolean value) {
    if (!value) {
      this.accountName = null;
    }
  }

  public String getAccountNamePartical() {
    return this.accountNamePartical;
  }

  public ReqQuotationAccountOption setAccountNamePartical(String accountNamePartical) {
    this.accountNamePartical = accountNamePartical;
    return this;
  }

  public void unsetAccountNamePartical() {
    this.accountNamePartical = null;
  }

  /** Returns true if field accountNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNamePartical() {
    return this.accountNamePartical != null;
  }

  public void setAccountNameParticalIsSet(boolean value) {
    if (!value) {
      this.accountNamePartical = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNT_IDS:
      if (value == null) {
        unsetAccountIds();
      } else {
        setAccountIds((Set<Long>)value);
      }
      break;

    case ACCOUNT_NAME:
      if (value == null) {
        unsetAccountName();
      } else {
        setAccountName((String)value);
      }
      break;

    case ACCOUNT_NAME_PARTICAL:
      if (value == null) {
        unsetAccountNamePartical();
      } else {
        setAccountNamePartical((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_IDS:
      return getAccountIds();

    case ACCOUNT_NAME:
      return getAccountName();

    case ACCOUNT_NAME_PARTICAL:
      return getAccountNamePartical();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_IDS:
      return isSetAccountIds();
    case ACCOUNT_NAME:
      return isSetAccountName();
    case ACCOUNT_NAME_PARTICAL:
      return isSetAccountNamePartical();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqQuotationAccountOption)
      return this.equals((ReqQuotationAccountOption)that);
    return false;
  }

  public boolean equals(ReqQuotationAccountOption that) {
    if (that == null)
      return false;

    boolean this_present_accountIds = true && this.isSetAccountIds();
    boolean that_present_accountIds = true && that.isSetAccountIds();
    if (this_present_accountIds || that_present_accountIds) {
      if (!(this_present_accountIds && that_present_accountIds))
        return false;
      if (!this.accountIds.equals(that.accountIds))
        return false;
    }

    boolean this_present_accountName = true && this.isSetAccountName();
    boolean that_present_accountName = true && that.isSetAccountName();
    if (this_present_accountName || that_present_accountName) {
      if (!(this_present_accountName && that_present_accountName))
        return false;
      if (!this.accountName.equals(that.accountName))
        return false;
    }

    boolean this_present_accountNamePartical = true && this.isSetAccountNamePartical();
    boolean that_present_accountNamePartical = true && that.isSetAccountNamePartical();
    if (this_present_accountNamePartical || that_present_accountNamePartical) {
      if (!(this_present_accountNamePartical && that_present_accountNamePartical))
        return false;
      if (!this.accountNamePartical.equals(that.accountNamePartical))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqQuotationAccountOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccountIds()).compareTo(other.isSetAccountIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountIds, other.accountIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountName()).compareTo(other.isSetAccountName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountName, other.accountName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountNamePartical()).compareTo(other.isSetAccountNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNamePartical, other.accountNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqQuotationAccountOption(");
    boolean first = true;

    if (isSetAccountIds()) {
      sb.append("accountIds:");
      if (this.accountIds == null) {
        sb.append("null");
      } else {
        sb.append(this.accountIds);
      }
      first = false;
    }
    if (isSetAccountName()) {
      if (!first) sb.append(", ");
      sb.append("accountName:");
      if (this.accountName == null) {
        sb.append("null");
      } else {
        sb.append(this.accountName);
      }
      first = false;
    }
    if (isSetAccountNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("accountNamePartical:");
      if (this.accountNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.accountNamePartical);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqQuotationAccountOptionStandardSchemeFactory implements SchemeFactory {
    public ReqQuotationAccountOptionStandardScheme getScheme() {
      return new ReqQuotationAccountOptionStandardScheme();
    }
  }

  private static class ReqQuotationAccountOptionStandardScheme extends StandardScheme<ReqQuotationAccountOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqQuotationAccountOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set148 = iprot.readSetBegin();
                struct.accountIds = new HashSet<Long>(2*_set148.size);
                for (int _i149 = 0; _i149 < _set148.size; ++_i149)
                {
                  long _elem150;
                  _elem150 = iprot.readI64();
                  struct.accountIds.add(_elem150);
                }
                iprot.readSetEnd();
              }
              struct.setAccountIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCOUNT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountName = iprot.readString();
              struct.setAccountNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACCOUNT_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNamePartical = iprot.readString();
              struct.setAccountNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqQuotationAccountOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accountIds != null) {
        if (struct.isSetAccountIds()) {
          oprot.writeFieldBegin(ACCOUNT_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.accountIds.size()));
            for (long _iter151 : struct.accountIds)
            {
              oprot.writeI64(_iter151);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountName != null) {
        if (struct.isSetAccountName()) {
          oprot.writeFieldBegin(ACCOUNT_NAME_FIELD_DESC);
          oprot.writeString(struct.accountName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountNamePartical != null) {
        if (struct.isSetAccountNamePartical()) {
          oprot.writeFieldBegin(ACCOUNT_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.accountNamePartical);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqQuotationAccountOptionTupleSchemeFactory implements SchemeFactory {
    public ReqQuotationAccountOptionTupleScheme getScheme() {
      return new ReqQuotationAccountOptionTupleScheme();
    }
  }

  private static class ReqQuotationAccountOptionTupleScheme extends TupleScheme<ReqQuotationAccountOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqQuotationAccountOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAccountIds()) {
        optionals.set(0);
      }
      if (struct.isSetAccountName()) {
        optionals.set(1);
      }
      if (struct.isSetAccountNamePartical()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAccountIds()) {
        {
          oprot.writeI32(struct.accountIds.size());
          for (long _iter152 : struct.accountIds)
          {
            oprot.writeI64(_iter152);
          }
        }
      }
      if (struct.isSetAccountName()) {
        oprot.writeString(struct.accountName);
      }
      if (struct.isSetAccountNamePartical()) {
        oprot.writeString(struct.accountNamePartical);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqQuotationAccountOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set153 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.accountIds = new HashSet<Long>(2*_set153.size);
          for (int _i154 = 0; _i154 < _set153.size; ++_i154)
          {
            long _elem155;
            _elem155 = iprot.readI64();
            struct.accountIds.add(_elem155);
          }
        }
        struct.setAccountIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.accountName = iprot.readString();
        struct.setAccountNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accountNamePartical = iprot.readString();
        struct.setAccountNameParticalIsSet(true);
      }
    }
  }

}

