/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.payment.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PayOrderInfo implements org.apache.thrift.TBase<PayOrderInfo, PayOrderInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PayOrderInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PayOrderInfo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField THIRD_PARTY_ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyOrderNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField TRADE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeInfo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PayOrderInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PayOrderInfoTupleSchemeFactory());
  }

  public int orderId; // optional
  /**
   * 
   * @see PayType
   */
  public PayType payType; // optional
  public String thirdPartyOrderNo; // optional
  public double totalAmount; // optional
  public String tradeInfo; // optional
  public int productId; // optional
  public int quantity; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    /**
     * 
     * @see PayType
     */
    PAY_TYPE((short)2, "payType"),
    THIRD_PARTY_ORDER_NO((short)3, "thirdPartyOrderNo"),
    TOTAL_AMOUNT((short)4, "totalAmount"),
    TRADE_INFO((short)5, "tradeInfo"),
    PRODUCT_ID((short)6, "productId"),
    QUANTITY((short)7, "quantity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // PAY_TYPE
          return PAY_TYPE;
        case 3: // THIRD_PARTY_ORDER_NO
          return THIRD_PARTY_ORDER_NO;
        case 4: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 5: // TRADE_INFO
          return TRADE_INFO;
        case 6: // PRODUCT_ID
          return PRODUCT_ID;
        case 7: // QUANTITY
          return QUANTITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERID_ISSET_ID = 0;
  private static final int __TOTALAMOUNT_ISSET_ID = 1;
  private static final int __PRODUCTID_ISSET_ID = 2;
  private static final int __QUANTITY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_ID,_Fields.PAY_TYPE,_Fields.THIRD_PARTY_ORDER_NO,_Fields.TOTAL_AMOUNT,_Fields.TRADE_INFO,_Fields.PRODUCT_ID,_Fields.QUANTITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PayType.class)));
    tmpMap.put(_Fields.THIRD_PARTY_ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyOrderNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADE_INFO, new org.apache.thrift.meta_data.FieldMetaData("tradeInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PayOrderInfo.class, metaDataMap);
  }

  public PayOrderInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayOrderInfo(PayOrderInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orderId = other.orderId;
    if (other.isSetPayType()) {
      this.payType = other.payType;
    }
    if (other.isSetThirdPartyOrderNo()) {
      this.thirdPartyOrderNo = other.thirdPartyOrderNo;
    }
    this.totalAmount = other.totalAmount;
    if (other.isSetTradeInfo()) {
      this.tradeInfo = other.tradeInfo;
    }
    this.productId = other.productId;
    this.quantity = other.quantity;
  }

  public PayOrderInfo deepCopy() {
    return new PayOrderInfo(this);
  }

  @Override
  public void clear() {
    setOrderIdIsSet(false);
    this.orderId = 0;
    this.payType = null;
    this.thirdPartyOrderNo = null;
    setTotalAmountIsSet(false);
    this.totalAmount = 0.0;
    this.tradeInfo = null;
    setProductIdIsSet(false);
    this.productId = 0;
    setQuantityIsSet(false);
    this.quantity = 0;
  }

  public int getOrderId() {
    return this.orderId;
  }

  public PayOrderInfo setOrderId(int orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  /**
   * 
   * @see PayType
   */
  public PayType getPayType() {
    return this.payType;
  }

  /**
   * 
   * @see PayType
   */
  public PayOrderInfo setPayType(PayType payType) {
    this.payType = payType;
    return this;
  }

  public void unsetPayType() {
    this.payType = null;
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return this.payType != null;
  }

  public void setPayTypeIsSet(boolean value) {
    if (!value) {
      this.payType = null;
    }
  }

  public String getThirdPartyOrderNo() {
    return this.thirdPartyOrderNo;
  }

  public PayOrderInfo setThirdPartyOrderNo(String thirdPartyOrderNo) {
    this.thirdPartyOrderNo = thirdPartyOrderNo;
    return this;
  }

  public void unsetThirdPartyOrderNo() {
    this.thirdPartyOrderNo = null;
  }

  /** Returns true if field thirdPartyOrderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdPartyOrderNo() {
    return this.thirdPartyOrderNo != null;
  }

  public void setThirdPartyOrderNoIsSet(boolean value) {
    if (!value) {
      this.thirdPartyOrderNo = null;
    }
  }

  public double getTotalAmount() {
    return this.totalAmount;
  }

  public PayOrderInfo setTotalAmount(double totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public String getTradeInfo() {
    return this.tradeInfo;
  }

  public PayOrderInfo setTradeInfo(String tradeInfo) {
    this.tradeInfo = tradeInfo;
    return this;
  }

  public void unsetTradeInfo() {
    this.tradeInfo = null;
  }

  /** Returns true if field tradeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeInfo() {
    return this.tradeInfo != null;
  }

  public void setTradeInfoIsSet(boolean value) {
    if (!value) {
      this.tradeInfo = null;
    }
  }

  public int getProductId() {
    return this.productId;
  }

  public PayOrderInfo setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public int getQuantity() {
    return this.quantity;
  }

  public PayOrderInfo setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Integer)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((PayType)value);
      }
      break;

    case THIRD_PARTY_ORDER_NO:
      if (value == null) {
        unsetThirdPartyOrderNo();
      } else {
        setThirdPartyOrderNo((String)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Double)value);
      }
      break;

    case TRADE_INFO:
      if (value == null) {
        unsetTradeInfo();
      } else {
        setTradeInfo((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return Integer.valueOf(getOrderId());

    case PAY_TYPE:
      return getPayType();

    case THIRD_PARTY_ORDER_NO:
      return getThirdPartyOrderNo();

    case TOTAL_AMOUNT:
      return Double.valueOf(getTotalAmount());

    case TRADE_INFO:
      return getTradeInfo();

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case PAY_TYPE:
      return isSetPayType();
    case THIRD_PARTY_ORDER_NO:
      return isSetThirdPartyOrderNo();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case TRADE_INFO:
      return isSetTradeInfo();
    case PRODUCT_ID:
      return isSetProductId();
    case QUANTITY:
      return isSetQuantity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayOrderInfo)
      return this.equals((PayOrderInfo)that);
    return false;
  }

  public boolean equals(PayOrderInfo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_payType = true && this.isSetPayType();
    boolean that_present_payType = true && that.isSetPayType();
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (!this.payType.equals(that.payType))
        return false;
    }

    boolean this_present_thirdPartyOrderNo = true && this.isSetThirdPartyOrderNo();
    boolean that_present_thirdPartyOrderNo = true && that.isSetThirdPartyOrderNo();
    if (this_present_thirdPartyOrderNo || that_present_thirdPartyOrderNo) {
      if (!(this_present_thirdPartyOrderNo && that_present_thirdPartyOrderNo))
        return false;
      if (!this.thirdPartyOrderNo.equals(that.thirdPartyOrderNo))
        return false;
    }

    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_tradeInfo = true && this.isSetTradeInfo();
    boolean that_present_tradeInfo = true && that.isSetTradeInfo();
    if (this_present_tradeInfo || that_present_tradeInfo) {
      if (!(this_present_tradeInfo && that_present_tradeInfo))
        return false;
      if (!this.tradeInfo.equals(that.tradeInfo))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_quantity = true && this.isSetQuantity();
    boolean that_present_quantity = true && that.isSetQuantity();
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PayOrderInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPartyOrderNo()).compareTo(other.isSetThirdPartyOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyOrderNo, other.thirdPartyOrderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeInfo()).compareTo(other.isSetTradeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeInfo, other.tradeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayOrderInfo(");
    boolean first = true;

    if (isSetOrderId()) {
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetPayType()) {
      if (!first) sb.append(", ");
      sb.append("payType:");
      if (this.payType == null) {
        sb.append("null");
      } else {
        sb.append(this.payType);
      }
      first = false;
    }
    if (isSetThirdPartyOrderNo()) {
      if (!first) sb.append(", ");
      sb.append("thirdPartyOrderNo:");
      if (this.thirdPartyOrderNo == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdPartyOrderNo);
      }
      first = false;
    }
    if (isSetTotalAmount()) {
      if (!first) sb.append(", ");
      sb.append("totalAmount:");
      sb.append(this.totalAmount);
      first = false;
    }
    if (isSetTradeInfo()) {
      if (!first) sb.append(", ");
      sb.append("tradeInfo:");
      if (this.tradeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeInfo);
      }
      first = false;
    }
    if (isSetProductId()) {
      if (!first) sb.append(", ");
      sb.append("productId:");
      sb.append(this.productId);
      first = false;
    }
    if (isSetQuantity()) {
      if (!first) sb.append(", ");
      sb.append("quantity:");
      sb.append(this.quantity);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PayOrderInfoStandardSchemeFactory implements SchemeFactory {
    public PayOrderInfoStandardScheme getScheme() {
      return new PayOrderInfoStandardScheme();
    }
  }

  private static class PayOrderInfoStandardScheme extends StandardScheme<PayOrderInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PayOrderInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderId = iprot.readI32();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payType = PayType.findByValue(iprot.readI32());
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // THIRD_PARTY_ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdPartyOrderNo = iprot.readString();
              struct.setThirdPartyOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmount = iprot.readDouble();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRADE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeInfo = iprot.readString();
              struct.setTradeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PayOrderInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI32(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.payType != null) {
        if (struct.isSetPayType()) {
          oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.payType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.thirdPartyOrderNo != null) {
        if (struct.isSetThirdPartyOrderNo()) {
          oprot.writeFieldBegin(THIRD_PARTY_ORDER_NO_FIELD_DESC);
          oprot.writeString(struct.thirdPartyOrderNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.totalAmount);
        oprot.writeFieldEnd();
      }
      if (struct.tradeInfo != null) {
        if (struct.isSetTradeInfo()) {
          oprot.writeFieldBegin(TRADE_INFO_FIELD_DESC);
          oprot.writeString(struct.tradeInfo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProductId()) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI32(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuantity()) {
        oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.quantity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PayOrderInfoTupleSchemeFactory implements SchemeFactory {
    public PayOrderInfoTupleScheme getScheme() {
      return new PayOrderInfoTupleScheme();
    }
  }

  private static class PayOrderInfoTupleScheme extends TupleScheme<PayOrderInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PayOrderInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetPayType()) {
        optionals.set(1);
      }
      if (struct.isSetThirdPartyOrderNo()) {
        optionals.set(2);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(3);
      }
      if (struct.isSetTradeInfo()) {
        optionals.set(4);
      }
      if (struct.isSetProductId()) {
        optionals.set(5);
      }
      if (struct.isSetQuantity()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetOrderId()) {
        oprot.writeI32(struct.orderId);
      }
      if (struct.isSetPayType()) {
        oprot.writeI32(struct.payType.getValue());
      }
      if (struct.isSetThirdPartyOrderNo()) {
        oprot.writeString(struct.thirdPartyOrderNo);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeDouble(struct.totalAmount);
      }
      if (struct.isSetTradeInfo()) {
        oprot.writeString(struct.tradeInfo);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PayOrderInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.orderId = iprot.readI32();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.payType = PayType.findByValue(iprot.readI32());
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.thirdPartyOrderNo = iprot.readString();
        struct.setThirdPartyOrderNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalAmount = iprot.readDouble();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeInfo = iprot.readString();
        struct.setTradeInfoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
    }
  }

}

