/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.broker.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqBrokerAccessOption implements org.apache.thrift.TBase<ReqBrokerAccessOption, ReqBrokerAccessOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqBrokerAccessOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqBrokerAccessOption");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerId", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_ACCESS_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerAccessIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqBrokerAccessOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqBrokerAccessOptionTupleSchemeFactory());
  }

  public List<Integer> brokerId; // optional
  public List<Integer> brokerAccessIds; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform
   */
  public com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform platform; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerId"),
    BROKER_ACCESS_IDS((short)2, "brokerAccessIds"),
    /**
     * 
     * @see com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform
     */
    PLATFORM((short)3, "platform");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // BROKER_ACCESS_IDS
          return BROKER_ACCESS_IDS;
        case 3: // PLATFORM
          return PLATFORM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.BROKER_ID,_Fields.BROKER_ACCESS_IDS,_Fields.PLATFORM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BROKER_ACCESS_IDS, new org.apache.thrift.meta_data.FieldMetaData("brokerAccessIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqBrokerAccessOption.class, metaDataMap);
  }

  public ReqBrokerAccessOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqBrokerAccessOption(ReqBrokerAccessOption other) {
    if (other.isSetBrokerId()) {
      List<Integer> __this__brokerId = new ArrayList<Integer>(other.brokerId);
      this.brokerId = __this__brokerId;
    }
    if (other.isSetBrokerAccessIds()) {
      List<Integer> __this__brokerAccessIds = new ArrayList<Integer>(other.brokerAccessIds);
      this.brokerAccessIds = __this__brokerAccessIds;
    }
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
  }

  public ReqBrokerAccessOption deepCopy() {
    return new ReqBrokerAccessOption(this);
  }

  @Override
  public void clear() {
    this.brokerId = null;
    this.brokerAccessIds = null;
    this.platform = null;
  }

  public int getBrokerIdSize() {
    return (this.brokerId == null) ? 0 : this.brokerId.size();
  }

  public java.util.Iterator<Integer> getBrokerIdIterator() {
    return (this.brokerId == null) ? null : this.brokerId.iterator();
  }

  public void addToBrokerId(int elem) {
    if (this.brokerId == null) {
      this.brokerId = new ArrayList<Integer>();
    }
    this.brokerId.add(elem);
  }

  public List<Integer> getBrokerId() {
    return this.brokerId;
  }

  public ReqBrokerAccessOption setBrokerId(List<Integer> brokerId) {
    this.brokerId = brokerId;
    return this;
  }

  public void unsetBrokerId() {
    this.brokerId = null;
  }

  /** Returns true if field brokerId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerId() {
    return this.brokerId != null;
  }

  public void setBrokerIdIsSet(boolean value) {
    if (!value) {
      this.brokerId = null;
    }
  }

  public int getBrokerAccessIdsSize() {
    return (this.brokerAccessIds == null) ? 0 : this.brokerAccessIds.size();
  }

  public java.util.Iterator<Integer> getBrokerAccessIdsIterator() {
    return (this.brokerAccessIds == null) ? null : this.brokerAccessIds.iterator();
  }

  public void addToBrokerAccessIds(int elem) {
    if (this.brokerAccessIds == null) {
      this.brokerAccessIds = new ArrayList<Integer>();
    }
    this.brokerAccessIds.add(elem);
  }

  public List<Integer> getBrokerAccessIds() {
    return this.brokerAccessIds;
  }

  public ReqBrokerAccessOption setBrokerAccessIds(List<Integer> brokerAccessIds) {
    this.brokerAccessIds = brokerAccessIds;
    return this;
  }

  public void unsetBrokerAccessIds() {
    this.brokerAccessIds = null;
  }

  /** Returns true if field brokerAccessIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerAccessIds() {
    return this.brokerAccessIds != null;
  }

  public void setBrokerAccessIdsIsSet(boolean value) {
    if (!value) {
      this.brokerAccessIds = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform
   */
  public com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform getPlatform() {
    return this.platform;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform
   */
  public ReqBrokerAccessOption setPlatform(com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerId();
      } else {
        setBrokerId((List<Integer>)value);
      }
      break;

    case BROKER_ACCESS_IDS:
      if (value == null) {
        unsetBrokerAccessIds();
      } else {
        setBrokerAccessIds((List<Integer>)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerId();

    case BROKER_ACCESS_IDS:
      return getBrokerAccessIds();

    case PLATFORM:
      return getPlatform();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerId();
    case BROKER_ACCESS_IDS:
      return isSetBrokerAccessIds();
    case PLATFORM:
      return isSetPlatform();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqBrokerAccessOption)
      return this.equals((ReqBrokerAccessOption)that);
    return false;
  }

  public boolean equals(ReqBrokerAccessOption that) {
    if (that == null)
      return false;

    boolean this_present_brokerId = true && this.isSetBrokerId();
    boolean that_present_brokerId = true && that.isSetBrokerId();
    if (this_present_brokerId || that_present_brokerId) {
      if (!(this_present_brokerId && that_present_brokerId))
        return false;
      if (!this.brokerId.equals(that.brokerId))
        return false;
    }

    boolean this_present_brokerAccessIds = true && this.isSetBrokerAccessIds();
    boolean that_present_brokerAccessIds = true && that.isSetBrokerAccessIds();
    if (this_present_brokerAccessIds || that_present_brokerAccessIds) {
      if (!(this_present_brokerAccessIds && that_present_brokerAccessIds))
        return false;
      if (!this.brokerAccessIds.equals(that.brokerAccessIds))
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqBrokerAccessOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerId()).compareTo(other.isSetBrokerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerId, other.brokerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerAccessIds()).compareTo(other.isSetBrokerAccessIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerAccessIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerAccessIds, other.brokerAccessIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqBrokerAccessOption(");
    boolean first = true;

    if (isSetBrokerId()) {
      sb.append("brokerId:");
      if (this.brokerId == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerId);
      }
      first = false;
    }
    if (isSetBrokerAccessIds()) {
      if (!first) sb.append(", ");
      sb.append("brokerAccessIds:");
      if (this.brokerAccessIds == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerAccessIds);
      }
      first = false;
    }
    if (isSetPlatform()) {
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqBrokerAccessOptionStandardSchemeFactory implements SchemeFactory {
    public ReqBrokerAccessOptionStandardScheme getScheme() {
      return new ReqBrokerAccessOptionStandardScheme();
    }
  }

  private static class ReqBrokerAccessOptionStandardScheme extends StandardScheme<ReqBrokerAccessOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqBrokerAccessOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.brokerId = new ArrayList<Integer>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  int _elem18;
                  _elem18 = iprot.readI32();
                  struct.brokerId.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setBrokerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_ACCESS_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.brokerAccessIds = new ArrayList<Integer>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  int _elem21;
                  _elem21 = iprot.readI32();
                  struct.brokerAccessIds.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setBrokerAccessIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platform = com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform.findByValue(iprot.readI32());
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqBrokerAccessOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerId != null) {
        if (struct.isSetBrokerId()) {
          oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.brokerId.size()));
            for (int _iter22 : struct.brokerId)
            {
              oprot.writeI32(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.brokerAccessIds != null) {
        if (struct.isSetBrokerAccessIds()) {
          oprot.writeFieldBegin(BROKER_ACCESS_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.brokerAccessIds.size()));
            for (int _iter23 : struct.brokerAccessIds)
            {
              oprot.writeI32(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.platform.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqBrokerAccessOptionTupleSchemeFactory implements SchemeFactory {
    public ReqBrokerAccessOptionTupleScheme getScheme() {
      return new ReqBrokerAccessOptionTupleScheme();
    }
  }

  private static class ReqBrokerAccessOptionTupleScheme extends TupleScheme<ReqBrokerAccessOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqBrokerAccessOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerId()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerAccessIds()) {
        optionals.set(1);
      }
      if (struct.isSetPlatform()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBrokerId()) {
        {
          oprot.writeI32(struct.brokerId.size());
          for (int _iter24 : struct.brokerId)
          {
            oprot.writeI32(_iter24);
          }
        }
      }
      if (struct.isSetBrokerAccessIds()) {
        {
          oprot.writeI32(struct.brokerAccessIds.size());
          for (int _iter25 : struct.brokerAccessIds)
          {
            oprot.writeI32(_iter25);
          }
        }
      }
      if (struct.isSetPlatform()) {
        oprot.writeI32(struct.platform.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqBrokerAccessOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.brokerId = new ArrayList<Integer>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            int _elem28;
            _elem28 = iprot.readI32();
            struct.brokerId.add(_elem28);
          }
        }
        struct.setBrokerIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.brokerAccessIds = new ArrayList<Integer>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            int _elem31;
            _elem31 = iprot.readI32();
            struct.brokerAccessIds.add(_elem31);
          }
        }
        struct.setBrokerAccessIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.platform = com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform.findByValue(iprot.readI32());
        struct.setPlatformIsSet(true);
      }
    }
  }

}

