/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.payment.product.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Product implements org.apache.thrift.TBase<Product, Product._Fields>, java.io.Serializable, Cloneable, Comparable<Product> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Product");

  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INVENTORY_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("inventoryQuantity", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CURRENCY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IMAGE_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("imageCodes", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField EXTEND_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("extendProperties", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField NEED_OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("needOperator", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PURPOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("purpose", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PURPOSE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("purposeType", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField X_COIN_INCREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("xCoinIncrement", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField TIME_INCREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeIncrement", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductTupleSchemeFactory());
  }

  public int productId; // optional
  /**
   * 
   * @see ProductType
   */
  public ProductType type; // optional
  public String name; // optional
  public String description; // optional
  public int inventoryQuantity; // optional
  public double price; // optional
  /**
   * 
   * @see CurrencyType
   */
  public CurrencyType currencyType; // optional
  public String imageCodes; // optional
  /**
   * 
   * @see ProductStatus
   */
  public ProductStatus status; // optional
  public Map<String,String> extendProperties; // optional
  public boolean needOperator; // optional
  /**
   * 
   * @see Operation
   */
  public Operation operation; // optional
  /**
   * 
   * @see ProductPurpose
   */
  public ProductPurpose purpose; // optional
  /**
   * 
   * @see ProductType
   */
  public ProductType purposeType; // optional
  public double xCoinIncrement; // optional
  public long timeIncrement; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    /**
     * 
     * @see ProductType
     */
    TYPE((short)2, "type"),
    NAME((short)3, "name"),
    DESCRIPTION((short)4, "description"),
    INVENTORY_QUANTITY((short)5, "inventoryQuantity"),
    PRICE((short)6, "price"),
    /**
     * 
     * @see CurrencyType
     */
    CURRENCY_TYPE((short)7, "currencyType"),
    IMAGE_CODES((short)8, "imageCodes"),
    /**
     * 
     * @see ProductStatus
     */
    STATUS((short)9, "status"),
    EXTEND_PROPERTIES((short)10, "extendProperties"),
    NEED_OPERATOR((short)11, "needOperator"),
    /**
     * 
     * @see Operation
     */
    OPERATION((short)12, "operation"),
    /**
     * 
     * @see ProductPurpose
     */
    PURPOSE((short)13, "purpose"),
    /**
     * 
     * @see ProductType
     */
    PURPOSE_TYPE((short)14, "purposeType"),
    X_COIN_INCREMENT((short)31, "xCoinIncrement"),
    TIME_INCREMENT((short)32, "timeIncrement"),
    CREATE_TIMESTAMP((short)20, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)21, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
          return PRODUCT_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // NAME
          return NAME;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // INVENTORY_QUANTITY
          return INVENTORY_QUANTITY;
        case 6: // PRICE
          return PRICE;
        case 7: // CURRENCY_TYPE
          return CURRENCY_TYPE;
        case 8: // IMAGE_CODES
          return IMAGE_CODES;
        case 9: // STATUS
          return STATUS;
        case 10: // EXTEND_PROPERTIES
          return EXTEND_PROPERTIES;
        case 11: // NEED_OPERATOR
          return NEED_OPERATOR;
        case 12: // OPERATION
          return OPERATION;
        case 13: // PURPOSE
          return PURPOSE;
        case 14: // PURPOSE_TYPE
          return PURPOSE_TYPE;
        case 31: // X_COIN_INCREMENT
          return X_COIN_INCREMENT;
        case 32: // TIME_INCREMENT
          return TIME_INCREMENT;
        case 20: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 21: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCTID_ISSET_ID = 0;
  private static final int __INVENTORYQUANTITY_ISSET_ID = 1;
  private static final int __PRICE_ISSET_ID = 2;
  private static final int __NEEDOPERATOR_ISSET_ID = 3;
  private static final int __XCOININCREMENT_ISSET_ID = 4;
  private static final int __TIMEINCREMENT_ISSET_ID = 5;
  private static final int __CREATETIMESTAMP_ISSET_ID = 6;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PRODUCT_ID,_Fields.TYPE,_Fields.NAME,_Fields.DESCRIPTION,_Fields.INVENTORY_QUANTITY,_Fields.PRICE,_Fields.CURRENCY_TYPE,_Fields.IMAGE_CODES,_Fields.STATUS,_Fields.EXTEND_PROPERTIES,_Fields.NEED_OPERATOR,_Fields.OPERATION,_Fields.PURPOSE,_Fields.PURPOSE_TYPE,_Fields.X_COIN_INCREMENT,_Fields.TIME_INCREMENT,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProductType.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVENTORY_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("inventoryQuantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("currencyType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CurrencyType.class)));
    tmpMap.put(_Fields.IMAGE_CODES, new org.apache.thrift.meta_data.FieldMetaData("imageCodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProductStatus.class)));
    tmpMap.put(_Fields.EXTEND_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("extendProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NEED_OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("needOperator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Operation.class)));
    tmpMap.put(_Fields.PURPOSE, new org.apache.thrift.meta_data.FieldMetaData("purpose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProductPurpose.class)));
    tmpMap.put(_Fields.PURPOSE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("purposeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProductType.class)));
    tmpMap.put(_Fields.X_COIN_INCREMENT, new org.apache.thrift.meta_data.FieldMetaData("xCoinIncrement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIME_INCREMENT, new org.apache.thrift.meta_data.FieldMetaData("timeIncrement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Product.class, metaDataMap);
  }

  public Product() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Product(Product other) {
    __isset_bitfield = other.__isset_bitfield;
    this.productId = other.productId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.inventoryQuantity = other.inventoryQuantity;
    this.price = other.price;
    if (other.isSetCurrencyType()) {
      this.currencyType = other.currencyType;
    }
    if (other.isSetImageCodes()) {
      this.imageCodes = other.imageCodes;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetExtendProperties()) {
      Map<String,String> __this__extendProperties = new HashMap<String,String>(other.extendProperties);
      this.extendProperties = __this__extendProperties;
    }
    this.needOperator = other.needOperator;
    if (other.isSetOperation()) {
      this.operation = other.operation;
    }
    if (other.isSetPurpose()) {
      this.purpose = other.purpose;
    }
    if (other.isSetPurposeType()) {
      this.purposeType = other.purposeType;
    }
    this.xCoinIncrement = other.xCoinIncrement;
    this.timeIncrement = other.timeIncrement;
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public Product deepCopy() {
    return new Product(this);
  }

  @Override
  public void clear() {
    setProductIdIsSet(false);
    this.productId = 0;
    this.type = null;
    this.name = null;
    this.description = null;
    setInventoryQuantityIsSet(false);
    this.inventoryQuantity = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    this.currencyType = null;
    this.imageCodes = null;
    this.status = null;
    this.extendProperties = null;
    setNeedOperatorIsSet(false);
    this.needOperator = false;
    this.operation = null;
    this.purpose = null;
    this.purposeType = null;
    setXCoinIncrementIsSet(false);
    this.xCoinIncrement = 0.0;
    setTimeIncrementIsSet(false);
    this.timeIncrement = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public int getProductId() {
    return this.productId;
  }

  public Product setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  /**
   * 
   * @see ProductType
   */
  public ProductType getType() {
    return this.type;
  }

  /**
   * 
   * @see ProductType
   */
  public Product setType(ProductType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Product setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Product setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getInventoryQuantity() {
    return this.inventoryQuantity;
  }

  public Product setInventoryQuantity(int inventoryQuantity) {
    this.inventoryQuantity = inventoryQuantity;
    setInventoryQuantityIsSet(true);
    return this;
  }

  public void unsetInventoryQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVENTORYQUANTITY_ISSET_ID);
  }

  /** Returns true if field inventoryQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetInventoryQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __INVENTORYQUANTITY_ISSET_ID);
  }

  public void setInventoryQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVENTORYQUANTITY_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public Product setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  /**
   * 
   * @see CurrencyType
   */
  public CurrencyType getCurrencyType() {
    return this.currencyType;
  }

  /**
   * 
   * @see CurrencyType
   */
  public Product setCurrencyType(CurrencyType currencyType) {
    this.currencyType = currencyType;
    return this;
  }

  public void unsetCurrencyType() {
    this.currencyType = null;
  }

  /** Returns true if field currencyType is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyType() {
    return this.currencyType != null;
  }

  public void setCurrencyTypeIsSet(boolean value) {
    if (!value) {
      this.currencyType = null;
    }
  }

  public String getImageCodes() {
    return this.imageCodes;
  }

  public Product setImageCodes(String imageCodes) {
    this.imageCodes = imageCodes;
    return this;
  }

  public void unsetImageCodes() {
    this.imageCodes = null;
  }

  /** Returns true if field imageCodes is set (has been assigned a value) and false otherwise */
  public boolean isSetImageCodes() {
    return this.imageCodes != null;
  }

  public void setImageCodesIsSet(boolean value) {
    if (!value) {
      this.imageCodes = null;
    }
  }

  /**
   * 
   * @see ProductStatus
   */
  public ProductStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see ProductStatus
   */
  public Product setStatus(ProductStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getExtendPropertiesSize() {
    return (this.extendProperties == null) ? 0 : this.extendProperties.size();
  }

  public void putToExtendProperties(String key, String val) {
    if (this.extendProperties == null) {
      this.extendProperties = new HashMap<String,String>();
    }
    this.extendProperties.put(key, val);
  }

  public Map<String,String> getExtendProperties() {
    return this.extendProperties;
  }

  public Product setExtendProperties(Map<String,String> extendProperties) {
    this.extendProperties = extendProperties;
    return this;
  }

  public void unsetExtendProperties() {
    this.extendProperties = null;
  }

  /** Returns true if field extendProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendProperties() {
    return this.extendProperties != null;
  }

  public void setExtendPropertiesIsSet(boolean value) {
    if (!value) {
      this.extendProperties = null;
    }
  }

  public boolean isNeedOperator() {
    return this.needOperator;
  }

  public Product setNeedOperator(boolean needOperator) {
    this.needOperator = needOperator;
    setNeedOperatorIsSet(true);
    return this;
  }

  public void unsetNeedOperator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDOPERATOR_ISSET_ID);
  }

  /** Returns true if field needOperator is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedOperator() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDOPERATOR_ISSET_ID);
  }

  public void setNeedOperatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDOPERATOR_ISSET_ID, value);
  }

  /**
   * 
   * @see Operation
   */
  public Operation getOperation() {
    return this.operation;
  }

  /**
   * 
   * @see Operation
   */
  public Product setOperation(Operation operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  /**
   * 
   * @see ProductPurpose
   */
  public ProductPurpose getPurpose() {
    return this.purpose;
  }

  /**
   * 
   * @see ProductPurpose
   */
  public Product setPurpose(ProductPurpose purpose) {
    this.purpose = purpose;
    return this;
  }

  public void unsetPurpose() {
    this.purpose = null;
  }

  /** Returns true if field purpose is set (has been assigned a value) and false otherwise */
  public boolean isSetPurpose() {
    return this.purpose != null;
  }

  public void setPurposeIsSet(boolean value) {
    if (!value) {
      this.purpose = null;
    }
  }

  /**
   * 
   * @see ProductType
   */
  public ProductType getPurposeType() {
    return this.purposeType;
  }

  /**
   * 
   * @see ProductType
   */
  public Product setPurposeType(ProductType purposeType) {
    this.purposeType = purposeType;
    return this;
  }

  public void unsetPurposeType() {
    this.purposeType = null;
  }

  /** Returns true if field purposeType is set (has been assigned a value) and false otherwise */
  public boolean isSetPurposeType() {
    return this.purposeType != null;
  }

  public void setPurposeTypeIsSet(boolean value) {
    if (!value) {
      this.purposeType = null;
    }
  }

  public double getXCoinIncrement() {
    return this.xCoinIncrement;
  }

  public Product setXCoinIncrement(double xCoinIncrement) {
    this.xCoinIncrement = xCoinIncrement;
    setXCoinIncrementIsSet(true);
    return this;
  }

  public void unsetXCoinIncrement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XCOININCREMENT_ISSET_ID);
  }

  /** Returns true if field xCoinIncrement is set (has been assigned a value) and false otherwise */
  public boolean isSetXCoinIncrement() {
    return EncodingUtils.testBit(__isset_bitfield, __XCOININCREMENT_ISSET_ID);
  }

  public void setXCoinIncrementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XCOININCREMENT_ISSET_ID, value);
  }

  public long getTimeIncrement() {
    return this.timeIncrement;
  }

  public Product setTimeIncrement(long timeIncrement) {
    this.timeIncrement = timeIncrement;
    setTimeIncrementIsSet(true);
    return this;
  }

  public void unsetTimeIncrement() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEINCREMENT_ISSET_ID);
  }

  /** Returns true if field timeIncrement is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeIncrement() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEINCREMENT_ISSET_ID);
  }

  public void setTimeIncrementIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEINCREMENT_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public Product setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public Product setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ProductType)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case INVENTORY_QUANTITY:
      if (value == null) {
        unsetInventoryQuantity();
      } else {
        setInventoryQuantity((Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case CURRENCY_TYPE:
      if (value == null) {
        unsetCurrencyType();
      } else {
        setCurrencyType((CurrencyType)value);
      }
      break;

    case IMAGE_CODES:
      if (value == null) {
        unsetImageCodes();
      } else {
        setImageCodes((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((ProductStatus)value);
      }
      break;

    case EXTEND_PROPERTIES:
      if (value == null) {
        unsetExtendProperties();
      } else {
        setExtendProperties((Map<String,String>)value);
      }
      break;

    case NEED_OPERATOR:
      if (value == null) {
        unsetNeedOperator();
      } else {
        setNeedOperator((Boolean)value);
      }
      break;

    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((Operation)value);
      }
      break;

    case PURPOSE:
      if (value == null) {
        unsetPurpose();
      } else {
        setPurpose((ProductPurpose)value);
      }
      break;

    case PURPOSE_TYPE:
      if (value == null) {
        unsetPurposeType();
      } else {
        setPurposeType((ProductType)value);
      }
      break;

    case X_COIN_INCREMENT:
      if (value == null) {
        unsetXCoinIncrement();
      } else {
        setXCoinIncrement((Double)value);
      }
      break;

    case TIME_INCREMENT:
      if (value == null) {
        unsetTimeIncrement();
      } else {
        setTimeIncrement((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case TYPE:
      return getType();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case INVENTORY_QUANTITY:
      return Integer.valueOf(getInventoryQuantity());

    case PRICE:
      return Double.valueOf(getPrice());

    case CURRENCY_TYPE:
      return getCurrencyType();

    case IMAGE_CODES:
      return getImageCodes();

    case STATUS:
      return getStatus();

    case EXTEND_PROPERTIES:
      return getExtendProperties();

    case NEED_OPERATOR:
      return Boolean.valueOf(isNeedOperator());

    case OPERATION:
      return getOperation();

    case PURPOSE:
      return getPurpose();

    case PURPOSE_TYPE:
      return getPurposeType();

    case X_COIN_INCREMENT:
      return Double.valueOf(getXCoinIncrement());

    case TIME_INCREMENT:
      return Long.valueOf(getTimeIncrement());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case TYPE:
      return isSetType();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case INVENTORY_QUANTITY:
      return isSetInventoryQuantity();
    case PRICE:
      return isSetPrice();
    case CURRENCY_TYPE:
      return isSetCurrencyType();
    case IMAGE_CODES:
      return isSetImageCodes();
    case STATUS:
      return isSetStatus();
    case EXTEND_PROPERTIES:
      return isSetExtendProperties();
    case NEED_OPERATOR:
      return isSetNeedOperator();
    case OPERATION:
      return isSetOperation();
    case PURPOSE:
      return isSetPurpose();
    case PURPOSE_TYPE:
      return isSetPurposeType();
    case X_COIN_INCREMENT:
      return isSetXCoinIncrement();
    case TIME_INCREMENT:
      return isSetTimeIncrement();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Product)
      return this.equals((Product)that);
    return false;
  }

  public boolean equals(Product that) {
    if (that == null)
      return false;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_inventoryQuantity = true && this.isSetInventoryQuantity();
    boolean that_present_inventoryQuantity = true && that.isSetInventoryQuantity();
    if (this_present_inventoryQuantity || that_present_inventoryQuantity) {
      if (!(this_present_inventoryQuantity && that_present_inventoryQuantity))
        return false;
      if (this.inventoryQuantity != that.inventoryQuantity)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_currencyType = true && this.isSetCurrencyType();
    boolean that_present_currencyType = true && that.isSetCurrencyType();
    if (this_present_currencyType || that_present_currencyType) {
      if (!(this_present_currencyType && that_present_currencyType))
        return false;
      if (!this.currencyType.equals(that.currencyType))
        return false;
    }

    boolean this_present_imageCodes = true && this.isSetImageCodes();
    boolean that_present_imageCodes = true && that.isSetImageCodes();
    if (this_present_imageCodes || that_present_imageCodes) {
      if (!(this_present_imageCodes && that_present_imageCodes))
        return false;
      if (!this.imageCodes.equals(that.imageCodes))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_extendProperties = true && this.isSetExtendProperties();
    boolean that_present_extendProperties = true && that.isSetExtendProperties();
    if (this_present_extendProperties || that_present_extendProperties) {
      if (!(this_present_extendProperties && that_present_extendProperties))
        return false;
      if (!this.extendProperties.equals(that.extendProperties))
        return false;
    }

    boolean this_present_needOperator = true && this.isSetNeedOperator();
    boolean that_present_needOperator = true && that.isSetNeedOperator();
    if (this_present_needOperator || that_present_needOperator) {
      if (!(this_present_needOperator && that_present_needOperator))
        return false;
      if (this.needOperator != that.needOperator)
        return false;
    }

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_purpose = true && this.isSetPurpose();
    boolean that_present_purpose = true && that.isSetPurpose();
    if (this_present_purpose || that_present_purpose) {
      if (!(this_present_purpose && that_present_purpose))
        return false;
      if (!this.purpose.equals(that.purpose))
        return false;
    }

    boolean this_present_purposeType = true && this.isSetPurposeType();
    boolean that_present_purposeType = true && that.isSetPurposeType();
    if (this_present_purposeType || that_present_purposeType) {
      if (!(this_present_purposeType && that_present_purposeType))
        return false;
      if (!this.purposeType.equals(that.purposeType))
        return false;
    }

    boolean this_present_xCoinIncrement = true && this.isSetXCoinIncrement();
    boolean that_present_xCoinIncrement = true && that.isSetXCoinIncrement();
    if (this_present_xCoinIncrement || that_present_xCoinIncrement) {
      if (!(this_present_xCoinIncrement && that_present_xCoinIncrement))
        return false;
      if (this.xCoinIncrement != that.xCoinIncrement)
        return false;
    }

    boolean this_present_timeIncrement = true && this.isSetTimeIncrement();
    boolean that_present_timeIncrement = true && that.isSetTimeIncrement();
    if (this_present_timeIncrement || that_present_timeIncrement) {
      if (!(this_present_timeIncrement && that_present_timeIncrement))
        return false;
      if (this.timeIncrement != that.timeIncrement)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Product other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInventoryQuantity()).compareTo(other.isSetInventoryQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInventoryQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inventoryQuantity, other.inventoryQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyType()).compareTo(other.isSetCurrencyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyType, other.currencyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageCodes()).compareTo(other.isSetImageCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageCodes, other.imageCodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendProperties()).compareTo(other.isSetExtendProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendProperties, other.extendProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedOperator()).compareTo(other.isSetNeedOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needOperator, other.needOperator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperation()).compareTo(other.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, other.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurpose()).compareTo(other.isSetPurpose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurpose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purpose, other.purpose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurposeType()).compareTo(other.isSetPurposeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurposeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purposeType, other.purposeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXCoinIncrement()).compareTo(other.isSetXCoinIncrement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXCoinIncrement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xCoinIncrement, other.xCoinIncrement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeIncrement()).compareTo(other.isSetTimeIncrement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeIncrement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeIncrement, other.timeIncrement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Product(");
    boolean first = true;

    if (isSetProductId()) {
      sb.append("productId:");
      sb.append(this.productId);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetInventoryQuantity()) {
      if (!first) sb.append(", ");
      sb.append("inventoryQuantity:");
      sb.append(this.inventoryQuantity);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetCurrencyType()) {
      if (!first) sb.append(", ");
      sb.append("currencyType:");
      if (this.currencyType == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyType);
      }
      first = false;
    }
    if (isSetImageCodes()) {
      if (!first) sb.append(", ");
      sb.append("imageCodes:");
      if (this.imageCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.imageCodes);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetExtendProperties()) {
      if (!first) sb.append(", ");
      sb.append("extendProperties:");
      if (this.extendProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.extendProperties);
      }
      first = false;
    }
    if (isSetNeedOperator()) {
      if (!first) sb.append(", ");
      sb.append("needOperator:");
      sb.append(this.needOperator);
      first = false;
    }
    if (isSetOperation()) {
      if (!first) sb.append(", ");
      sb.append("operation:");
      if (this.operation == null) {
        sb.append("null");
      } else {
        sb.append(this.operation);
      }
      first = false;
    }
    if (isSetPurpose()) {
      if (!first) sb.append(", ");
      sb.append("purpose:");
      if (this.purpose == null) {
        sb.append("null");
      } else {
        sb.append(this.purpose);
      }
      first = false;
    }
    if (isSetPurposeType()) {
      if (!first) sb.append(", ");
      sb.append("purposeType:");
      if (this.purposeType == null) {
        sb.append("null");
      } else {
        sb.append(this.purposeType);
      }
      first = false;
    }
    if (isSetXCoinIncrement()) {
      if (!first) sb.append(", ");
      sb.append("xCoinIncrement:");
      sb.append(this.xCoinIncrement);
      first = false;
    }
    if (isSetTimeIncrement()) {
      if (!first) sb.append(", ");
      sb.append("timeIncrement:");
      sb.append(this.timeIncrement);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductStandardSchemeFactory implements SchemeFactory {
    public ProductStandardScheme getScheme() {
      return new ProductStandardScheme();
    }
  }

  private static class ProductStandardScheme extends StandardScheme<Product> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Product struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = ProductType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INVENTORY_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inventoryQuantity = iprot.readI32();
              struct.setInventoryQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CURRENCY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currencyType = CurrencyType.findByValue(iprot.readI32());
              struct.setCurrencyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMAGE_CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageCodes = iprot.readString();
              struct.setImageCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = ProductStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTEND_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.extendProperties = new HashMap<String,String>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  String _key12;
                  String _val13;
                  _key12 = iprot.readString();
                  _val13 = iprot.readString();
                  struct.extendProperties.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setExtendPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NEED_OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needOperator = iprot.readBool();
              struct.setNeedOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operation = Operation.findByValue(iprot.readI32());
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PURPOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.purpose = ProductPurpose.findByValue(iprot.readI32());
              struct.setPurposeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PURPOSE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.purposeType = ProductType.findByValue(iprot.readI32());
              struct.setPurposeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // X_COIN_INCREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.xCoinIncrement = iprot.readDouble();
              struct.setXCoinIncrementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // TIME_INCREMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeIncrement = iprot.readI64();
              struct.setTimeIncrementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Product struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetProductId()) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI32(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInventoryQuantity()) {
        oprot.writeFieldBegin(INVENTORY_QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.inventoryQuantity);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.currencyType != null) {
        if (struct.isSetCurrencyType()) {
          oprot.writeFieldBegin(CURRENCY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.currencyType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageCodes != null) {
        if (struct.isSetImageCodes()) {
          oprot.writeFieldBegin(IMAGE_CODES_FIELD_DESC);
          oprot.writeString(struct.imageCodes);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.extendProperties != null) {
        if (struct.isSetExtendProperties()) {
          oprot.writeFieldBegin(EXTEND_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extendProperties.size()));
            for (Map.Entry<String, String> _iter14 : struct.extendProperties.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeedOperator()) {
        oprot.writeFieldBegin(NEED_OPERATOR_FIELD_DESC);
        oprot.writeBool(struct.needOperator);
        oprot.writeFieldEnd();
      }
      if (struct.operation != null) {
        if (struct.isSetOperation()) {
          oprot.writeFieldBegin(OPERATION_FIELD_DESC);
          oprot.writeI32(struct.operation.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.purpose != null) {
        if (struct.isSetPurpose()) {
          oprot.writeFieldBegin(PURPOSE_FIELD_DESC);
          oprot.writeI32(struct.purpose.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.purposeType != null) {
        if (struct.isSetPurposeType()) {
          oprot.writeFieldBegin(PURPOSE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.purposeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetXCoinIncrement()) {
        oprot.writeFieldBegin(X_COIN_INCREMENT_FIELD_DESC);
        oprot.writeDouble(struct.xCoinIncrement);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeIncrement()) {
        oprot.writeFieldBegin(TIME_INCREMENT_FIELD_DESC);
        oprot.writeI64(struct.timeIncrement);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductTupleSchemeFactory implements SchemeFactory {
    public ProductTupleScheme getScheme() {
      return new ProductTupleScheme();
    }
  }

  private static class ProductTupleScheme extends TupleScheme<Product> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Product struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetInventoryQuantity()) {
        optionals.set(4);
      }
      if (struct.isSetPrice()) {
        optionals.set(5);
      }
      if (struct.isSetCurrencyType()) {
        optionals.set(6);
      }
      if (struct.isSetImageCodes()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetExtendProperties()) {
        optionals.set(9);
      }
      if (struct.isSetNeedOperator()) {
        optionals.set(10);
      }
      if (struct.isSetOperation()) {
        optionals.set(11);
      }
      if (struct.isSetPurpose()) {
        optionals.set(12);
      }
      if (struct.isSetPurposeType()) {
        optionals.set(13);
      }
      if (struct.isSetXCoinIncrement()) {
        optionals.set(14);
      }
      if (struct.isSetTimeIncrement()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(16);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetInventoryQuantity()) {
        oprot.writeI32(struct.inventoryQuantity);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetCurrencyType()) {
        oprot.writeI32(struct.currencyType.getValue());
      }
      if (struct.isSetImageCodes()) {
        oprot.writeString(struct.imageCodes);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetExtendProperties()) {
        {
          oprot.writeI32(struct.extendProperties.size());
          for (Map.Entry<String, String> _iter15 : struct.extendProperties.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
      if (struct.isSetNeedOperator()) {
        oprot.writeBool(struct.needOperator);
      }
      if (struct.isSetOperation()) {
        oprot.writeI32(struct.operation.getValue());
      }
      if (struct.isSetPurpose()) {
        oprot.writeI32(struct.purpose.getValue());
      }
      if (struct.isSetPurposeType()) {
        oprot.writeI32(struct.purposeType.getValue());
      }
      if (struct.isSetXCoinIncrement()) {
        oprot.writeDouble(struct.xCoinIncrement);
      }
      if (struct.isSetTimeIncrement()) {
        oprot.writeI64(struct.timeIncrement);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Product struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = ProductType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.inventoryQuantity = iprot.readI32();
        struct.setInventoryQuantityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.currencyType = CurrencyType.findByValue(iprot.readI32());
        struct.setCurrencyTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.imageCodes = iprot.readString();
        struct.setImageCodesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = ProductStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extendProperties = new HashMap<String,String>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18;
            String _val19;
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            struct.extendProperties.put(_key18, _val19);
          }
        }
        struct.setExtendPropertiesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.needOperator = iprot.readBool();
        struct.setNeedOperatorIsSet(true);
      }
      if (incoming.get(11)) {
        struct.operation = Operation.findByValue(iprot.readI32());
        struct.setOperationIsSet(true);
      }
      if (incoming.get(12)) {
        struct.purpose = ProductPurpose.findByValue(iprot.readI32());
        struct.setPurposeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.purposeType = ProductType.findByValue(iprot.readI32());
        struct.setPurposeTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.xCoinIncrement = iprot.readDouble();
        struct.setXCoinIncrementIsSet(true);
      }
      if (incoming.get(15)) {
        struct.timeIncrement = iprot.readI64();
        struct.setTimeIncrementIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(17)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

