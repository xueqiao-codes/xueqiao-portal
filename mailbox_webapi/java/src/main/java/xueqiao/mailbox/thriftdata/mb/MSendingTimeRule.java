/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.mailbox.thriftdata.mb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 信箱消息发送时间规则描述
 */
public class MSendingTimeRule implements org.apache.thrift.TBase<MSendingTimeRule, MSendingTimeRule._Fields>, java.io.Serializable, Cloneable, Comparable<MSendingTimeRule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MSendingTimeRule");

  private static final org.apache.thrift.protocol.TField MBM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mbmId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MB_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mbStartTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REPEAT_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("repeatUnit", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REPEAT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("repeatCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DAY_TIME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dayTimeList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField UNIT_TIME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("unitTimeList", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MSendingTimeRuleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MSendingTimeRuleTupleSchemeFactory());
  }

  public long mbmId; // optional
  public long mbStartTime; // optional
  /**
   * 
   * @see MSendingTimeRepeatUnit
   */
  public MSendingTimeRepeatUnit repeatUnit; // optional
  public int repeatCount; // optional
  public List<Long> dayTimeList; // optional
  public List<Integer> unitTimeList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MBM_ID((short)1, "mbmId"),
    MB_START_TIME((short)2, "mbStartTime"),
    /**
     * 
     * @see MSendingTimeRepeatUnit
     */
    REPEAT_UNIT((short)3, "repeatUnit"),
    REPEAT_COUNT((short)4, "repeatCount"),
    DAY_TIME_LIST((short)5, "dayTimeList"),
    UNIT_TIME_LIST((short)6, "unitTimeList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MBM_ID
          return MBM_ID;
        case 2: // MB_START_TIME
          return MB_START_TIME;
        case 3: // REPEAT_UNIT
          return REPEAT_UNIT;
        case 4: // REPEAT_COUNT
          return REPEAT_COUNT;
        case 5: // DAY_TIME_LIST
          return DAY_TIME_LIST;
        case 6: // UNIT_TIME_LIST
          return UNIT_TIME_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MBMID_ISSET_ID = 0;
  private static final int __MBSTARTTIME_ISSET_ID = 1;
  private static final int __REPEATCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MBM_ID,_Fields.MB_START_TIME,_Fields.REPEAT_UNIT,_Fields.REPEAT_COUNT,_Fields.DAY_TIME_LIST,_Fields.UNIT_TIME_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MBM_ID, new org.apache.thrift.meta_data.FieldMetaData("mbmId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MB_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("mbStartTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPEAT_UNIT, new org.apache.thrift.meta_data.FieldMetaData("repeatUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MSendingTimeRepeatUnit.class)));
    tmpMap.put(_Fields.REPEAT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("repeatCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAY_TIME_LIST, new org.apache.thrift.meta_data.FieldMetaData("dayTimeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.UNIT_TIME_LIST, new org.apache.thrift.meta_data.FieldMetaData("unitTimeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MSendingTimeRule.class, metaDataMap);
  }

  public MSendingTimeRule() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MSendingTimeRule(MSendingTimeRule other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mbmId = other.mbmId;
    this.mbStartTime = other.mbStartTime;
    if (other.isSetRepeatUnit()) {
      this.repeatUnit = other.repeatUnit;
    }
    this.repeatCount = other.repeatCount;
    if (other.isSetDayTimeList()) {
      List<Long> __this__dayTimeList = new ArrayList<Long>(other.dayTimeList);
      this.dayTimeList = __this__dayTimeList;
    }
    if (other.isSetUnitTimeList()) {
      List<Integer> __this__unitTimeList = new ArrayList<Integer>(other.unitTimeList);
      this.unitTimeList = __this__unitTimeList;
    }
  }

  public MSendingTimeRule deepCopy() {
    return new MSendingTimeRule(this);
  }

  @Override
  public void clear() {
    setMbmIdIsSet(false);
    this.mbmId = 0;
    setMbStartTimeIsSet(false);
    this.mbStartTime = 0;
    this.repeatUnit = null;
    setRepeatCountIsSet(false);
    this.repeatCount = 0;
    this.dayTimeList = null;
    this.unitTimeList = null;
  }

  public long getMbmId() {
    return this.mbmId;
  }

  public MSendingTimeRule setMbmId(long mbmId) {
    this.mbmId = mbmId;
    setMbmIdIsSet(true);
    return this;
  }

  public void unsetMbmId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBMID_ISSET_ID);
  }

  /** Returns true if field mbmId is set (has been assigned a value) and false otherwise */
  public boolean isSetMbmId() {
    return EncodingUtils.testBit(__isset_bitfield, __MBMID_ISSET_ID);
  }

  public void setMbmIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBMID_ISSET_ID, value);
  }

  public long getMbStartTime() {
    return this.mbStartTime;
  }

  public MSendingTimeRule setMbStartTime(long mbStartTime) {
    this.mbStartTime = mbStartTime;
    setMbStartTimeIsSet(true);
    return this;
  }

  public void unsetMbStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MBSTARTTIME_ISSET_ID);
  }

  /** Returns true if field mbStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMbStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MBSTARTTIME_ISSET_ID);
  }

  public void setMbStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MBSTARTTIME_ISSET_ID, value);
  }

  /**
   * 
   * @see MSendingTimeRepeatUnit
   */
  public MSendingTimeRepeatUnit getRepeatUnit() {
    return this.repeatUnit;
  }

  /**
   * 
   * @see MSendingTimeRepeatUnit
   */
  public MSendingTimeRule setRepeatUnit(MSendingTimeRepeatUnit repeatUnit) {
    this.repeatUnit = repeatUnit;
    return this;
  }

  public void unsetRepeatUnit() {
    this.repeatUnit = null;
  }

  /** Returns true if field repeatUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatUnit() {
    return this.repeatUnit != null;
  }

  public void setRepeatUnitIsSet(boolean value) {
    if (!value) {
      this.repeatUnit = null;
    }
  }

  public int getRepeatCount() {
    return this.repeatCount;
  }

  public MSendingTimeRule setRepeatCount(int repeatCount) {
    this.repeatCount = repeatCount;
    setRepeatCountIsSet(true);
    return this;
  }

  public void unsetRepeatCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPEATCOUNT_ISSET_ID);
  }

  /** Returns true if field repeatCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatCount() {
    return EncodingUtils.testBit(__isset_bitfield, __REPEATCOUNT_ISSET_ID);
  }

  public void setRepeatCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPEATCOUNT_ISSET_ID, value);
  }

  public int getDayTimeListSize() {
    return (this.dayTimeList == null) ? 0 : this.dayTimeList.size();
  }

  public java.util.Iterator<Long> getDayTimeListIterator() {
    return (this.dayTimeList == null) ? null : this.dayTimeList.iterator();
  }

  public void addToDayTimeList(long elem) {
    if (this.dayTimeList == null) {
      this.dayTimeList = new ArrayList<Long>();
    }
    this.dayTimeList.add(elem);
  }

  public List<Long> getDayTimeList() {
    return this.dayTimeList;
  }

  public MSendingTimeRule setDayTimeList(List<Long> dayTimeList) {
    this.dayTimeList = dayTimeList;
    return this;
  }

  public void unsetDayTimeList() {
    this.dayTimeList = null;
  }

  /** Returns true if field dayTimeList is set (has been assigned a value) and false otherwise */
  public boolean isSetDayTimeList() {
    return this.dayTimeList != null;
  }

  public void setDayTimeListIsSet(boolean value) {
    if (!value) {
      this.dayTimeList = null;
    }
  }

  public int getUnitTimeListSize() {
    return (this.unitTimeList == null) ? 0 : this.unitTimeList.size();
  }

  public java.util.Iterator<Integer> getUnitTimeListIterator() {
    return (this.unitTimeList == null) ? null : this.unitTimeList.iterator();
  }

  public void addToUnitTimeList(int elem) {
    if (this.unitTimeList == null) {
      this.unitTimeList = new ArrayList<Integer>();
    }
    this.unitTimeList.add(elem);
  }

  public List<Integer> getUnitTimeList() {
    return this.unitTimeList;
  }

  public MSendingTimeRule setUnitTimeList(List<Integer> unitTimeList) {
    this.unitTimeList = unitTimeList;
    return this;
  }

  public void unsetUnitTimeList() {
    this.unitTimeList = null;
  }

  /** Returns true if field unitTimeList is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitTimeList() {
    return this.unitTimeList != null;
  }

  public void setUnitTimeListIsSet(boolean value) {
    if (!value) {
      this.unitTimeList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MBM_ID:
      if (value == null) {
        unsetMbmId();
      } else {
        setMbmId((Long)value);
      }
      break;

    case MB_START_TIME:
      if (value == null) {
        unsetMbStartTime();
      } else {
        setMbStartTime((Long)value);
      }
      break;

    case REPEAT_UNIT:
      if (value == null) {
        unsetRepeatUnit();
      } else {
        setRepeatUnit((MSendingTimeRepeatUnit)value);
      }
      break;

    case REPEAT_COUNT:
      if (value == null) {
        unsetRepeatCount();
      } else {
        setRepeatCount((Integer)value);
      }
      break;

    case DAY_TIME_LIST:
      if (value == null) {
        unsetDayTimeList();
      } else {
        setDayTimeList((List<Long>)value);
      }
      break;

    case UNIT_TIME_LIST:
      if (value == null) {
        unsetUnitTimeList();
      } else {
        setUnitTimeList((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MBM_ID:
      return Long.valueOf(getMbmId());

    case MB_START_TIME:
      return Long.valueOf(getMbStartTime());

    case REPEAT_UNIT:
      return getRepeatUnit();

    case REPEAT_COUNT:
      return Integer.valueOf(getRepeatCount());

    case DAY_TIME_LIST:
      return getDayTimeList();

    case UNIT_TIME_LIST:
      return getUnitTimeList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MBM_ID:
      return isSetMbmId();
    case MB_START_TIME:
      return isSetMbStartTime();
    case REPEAT_UNIT:
      return isSetRepeatUnit();
    case REPEAT_COUNT:
      return isSetRepeatCount();
    case DAY_TIME_LIST:
      return isSetDayTimeList();
    case UNIT_TIME_LIST:
      return isSetUnitTimeList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MSendingTimeRule)
      return this.equals((MSendingTimeRule)that);
    return false;
  }

  public boolean equals(MSendingTimeRule that) {
    if (that == null)
      return false;

    boolean this_present_mbmId = true && this.isSetMbmId();
    boolean that_present_mbmId = true && that.isSetMbmId();
    if (this_present_mbmId || that_present_mbmId) {
      if (!(this_present_mbmId && that_present_mbmId))
        return false;
      if (this.mbmId != that.mbmId)
        return false;
    }

    boolean this_present_mbStartTime = true && this.isSetMbStartTime();
    boolean that_present_mbStartTime = true && that.isSetMbStartTime();
    if (this_present_mbStartTime || that_present_mbStartTime) {
      if (!(this_present_mbStartTime && that_present_mbStartTime))
        return false;
      if (this.mbStartTime != that.mbStartTime)
        return false;
    }

    boolean this_present_repeatUnit = true && this.isSetRepeatUnit();
    boolean that_present_repeatUnit = true && that.isSetRepeatUnit();
    if (this_present_repeatUnit || that_present_repeatUnit) {
      if (!(this_present_repeatUnit && that_present_repeatUnit))
        return false;
      if (!this.repeatUnit.equals(that.repeatUnit))
        return false;
    }

    boolean this_present_repeatCount = true && this.isSetRepeatCount();
    boolean that_present_repeatCount = true && that.isSetRepeatCount();
    if (this_present_repeatCount || that_present_repeatCount) {
      if (!(this_present_repeatCount && that_present_repeatCount))
        return false;
      if (this.repeatCount != that.repeatCount)
        return false;
    }

    boolean this_present_dayTimeList = true && this.isSetDayTimeList();
    boolean that_present_dayTimeList = true && that.isSetDayTimeList();
    if (this_present_dayTimeList || that_present_dayTimeList) {
      if (!(this_present_dayTimeList && that_present_dayTimeList))
        return false;
      if (!this.dayTimeList.equals(that.dayTimeList))
        return false;
    }

    boolean this_present_unitTimeList = true && this.isSetUnitTimeList();
    boolean that_present_unitTimeList = true && that.isSetUnitTimeList();
    if (this_present_unitTimeList || that_present_unitTimeList) {
      if (!(this_present_unitTimeList && that_present_unitTimeList))
        return false;
      if (!this.unitTimeList.equals(that.unitTimeList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MSendingTimeRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMbmId()).compareTo(other.isSetMbmId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMbmId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbmId, other.mbmId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMbStartTime()).compareTo(other.isSetMbStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMbStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbStartTime, other.mbStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeatUnit()).compareTo(other.isSetRepeatUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeatUnit, other.repeatUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeatCount()).compareTo(other.isSetRepeatCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeatCount, other.repeatCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayTimeList()).compareTo(other.isSetDayTimeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayTimeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayTimeList, other.dayTimeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitTimeList()).compareTo(other.isSetUnitTimeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitTimeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitTimeList, other.unitTimeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MSendingTimeRule(");
    boolean first = true;

    if (isSetMbmId()) {
      sb.append("mbmId:");
      sb.append(this.mbmId);
      first = false;
    }
    if (isSetMbStartTime()) {
      if (!first) sb.append(", ");
      sb.append("mbStartTime:");
      sb.append(this.mbStartTime);
      first = false;
    }
    if (isSetRepeatUnit()) {
      if (!first) sb.append(", ");
      sb.append("repeatUnit:");
      if (this.repeatUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.repeatUnit);
      }
      first = false;
    }
    if (isSetRepeatCount()) {
      if (!first) sb.append(", ");
      sb.append("repeatCount:");
      sb.append(this.repeatCount);
      first = false;
    }
    if (isSetDayTimeList()) {
      if (!first) sb.append(", ");
      sb.append("dayTimeList:");
      if (this.dayTimeList == null) {
        sb.append("null");
      } else {
        sb.append(this.dayTimeList);
      }
      first = false;
    }
    if (isSetUnitTimeList()) {
      if (!first) sb.append(", ");
      sb.append("unitTimeList:");
      if (this.unitTimeList == null) {
        sb.append("null");
      } else {
        sb.append(this.unitTimeList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MSendingTimeRuleStandardSchemeFactory implements SchemeFactory {
    public MSendingTimeRuleStandardScheme getScheme() {
      return new MSendingTimeRuleStandardScheme();
    }
  }

  private static class MSendingTimeRuleStandardScheme extends StandardScheme<MSendingTimeRule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MSendingTimeRule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MBM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mbmId = iprot.readI64();
              struct.setMbmIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MB_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mbStartTime = iprot.readI64();
              struct.setMbStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPEAT_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repeatUnit = MSendingTimeRepeatUnit.findByValue(iprot.readI32());
              struct.setRepeatUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPEAT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repeatCount = iprot.readI32();
              struct.setRepeatCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DAY_TIME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.dayTimeList = new ArrayList<Long>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  long _elem18;
                  _elem18 = iprot.readI64();
                  struct.dayTimeList.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setDayTimeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNIT_TIME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.unitTimeList = new ArrayList<Integer>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  int _elem21;
                  _elem21 = iprot.readI32();
                  struct.unitTimeList.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setUnitTimeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MSendingTimeRule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMbmId()) {
        oprot.writeFieldBegin(MBM_ID_FIELD_DESC);
        oprot.writeI64(struct.mbmId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMbStartTime()) {
        oprot.writeFieldBegin(MB_START_TIME_FIELD_DESC);
        oprot.writeI64(struct.mbStartTime);
        oprot.writeFieldEnd();
      }
      if (struct.repeatUnit != null) {
        if (struct.isSetRepeatUnit()) {
          oprot.writeFieldBegin(REPEAT_UNIT_FIELD_DESC);
          oprot.writeI32(struct.repeatUnit.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRepeatCount()) {
        oprot.writeFieldBegin(REPEAT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.repeatCount);
        oprot.writeFieldEnd();
      }
      if (struct.dayTimeList != null) {
        if (struct.isSetDayTimeList()) {
          oprot.writeFieldBegin(DAY_TIME_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.dayTimeList.size()));
            for (long _iter22 : struct.dayTimeList)
            {
              oprot.writeI64(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unitTimeList != null) {
        if (struct.isSetUnitTimeList()) {
          oprot.writeFieldBegin(UNIT_TIME_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.unitTimeList.size()));
            for (int _iter23 : struct.unitTimeList)
            {
              oprot.writeI32(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MSendingTimeRuleTupleSchemeFactory implements SchemeFactory {
    public MSendingTimeRuleTupleScheme getScheme() {
      return new MSendingTimeRuleTupleScheme();
    }
  }

  private static class MSendingTimeRuleTupleScheme extends TupleScheme<MSendingTimeRule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MSendingTimeRule struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMbmId()) {
        optionals.set(0);
      }
      if (struct.isSetMbStartTime()) {
        optionals.set(1);
      }
      if (struct.isSetRepeatUnit()) {
        optionals.set(2);
      }
      if (struct.isSetRepeatCount()) {
        optionals.set(3);
      }
      if (struct.isSetDayTimeList()) {
        optionals.set(4);
      }
      if (struct.isSetUnitTimeList()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMbmId()) {
        oprot.writeI64(struct.mbmId);
      }
      if (struct.isSetMbStartTime()) {
        oprot.writeI64(struct.mbStartTime);
      }
      if (struct.isSetRepeatUnit()) {
        oprot.writeI32(struct.repeatUnit.getValue());
      }
      if (struct.isSetRepeatCount()) {
        oprot.writeI32(struct.repeatCount);
      }
      if (struct.isSetDayTimeList()) {
        {
          oprot.writeI32(struct.dayTimeList.size());
          for (long _iter24 : struct.dayTimeList)
          {
            oprot.writeI64(_iter24);
          }
        }
      }
      if (struct.isSetUnitTimeList()) {
        {
          oprot.writeI32(struct.unitTimeList.size());
          for (int _iter25 : struct.unitTimeList)
          {
            oprot.writeI32(_iter25);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MSendingTimeRule struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.mbmId = iprot.readI64();
        struct.setMbmIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mbStartTime = iprot.readI64();
        struct.setMbStartTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.repeatUnit = MSendingTimeRepeatUnit.findByValue(iprot.readI32());
        struct.setRepeatUnitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.repeatCount = iprot.readI32();
        struct.setRepeatCountIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.dayTimeList = new ArrayList<Long>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            long _elem28;
            _elem28 = iprot.readI64();
            struct.dayTimeList.add(_elem28);
          }
        }
        struct.setDayTimeListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.unitTimeList = new ArrayList<Integer>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            int _elem31;
            _elem31 = iprot.readI32();
            struct.unitTimeList.add(_elem31);
          }
        }
        struct.setUnitTimeListIsSet(true);
      }
    }
  }

}

