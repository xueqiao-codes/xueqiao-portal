/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.mailbox.thriftdata.req;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 查询信箱消息条件
 */
public class QueryMBMessageOption implements org.apache.thrift.TBase<QueryMBMessageOption, QueryMBMessageOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryMBMessageOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryMBMessageOption");

  private static final org.apache.thrift.protocol.TField MBM_ID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("mbmIdSet", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("statusList", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryMBMessageOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryMBMessageOptionTupleSchemeFactory());
  }

  public Set<Long> mbmIdSet; // optional
  public Set<xueqiao.mailbox.thriftdata.mb.MStatus> statusList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MBM_ID_SET((short)1, "mbmIdSet"),
    STATUS_LIST((short)2, "statusList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MBM_ID_SET
          return MBM_ID_SET;
        case 2: // STATUS_LIST
          return STATUS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.MBM_ID_SET,_Fields.STATUS_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MBM_ID_SET, new org.apache.thrift.meta_data.FieldMetaData("mbmIdSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.STATUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("statusList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.mailbox.thriftdata.mb.MStatus.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryMBMessageOption.class, metaDataMap);
  }

  public QueryMBMessageOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryMBMessageOption(QueryMBMessageOption other) {
    if (other.isSetMbmIdSet()) {
      Set<Long> __this__mbmIdSet = new HashSet<Long>(other.mbmIdSet);
      this.mbmIdSet = __this__mbmIdSet;
    }
    if (other.isSetStatusList()) {
      Set<xueqiao.mailbox.thriftdata.mb.MStatus> __this__statusList = new HashSet<xueqiao.mailbox.thriftdata.mb.MStatus>(other.statusList.size());
      for (xueqiao.mailbox.thriftdata.mb.MStatus other_element : other.statusList) {
        __this__statusList.add(other_element);
      }
      this.statusList = __this__statusList;
    }
  }

  public QueryMBMessageOption deepCopy() {
    return new QueryMBMessageOption(this);
  }

  @Override
  public void clear() {
    this.mbmIdSet = null;
    this.statusList = null;
  }

  public int getMbmIdSetSize() {
    return (this.mbmIdSet == null) ? 0 : this.mbmIdSet.size();
  }

  public java.util.Iterator<Long> getMbmIdSetIterator() {
    return (this.mbmIdSet == null) ? null : this.mbmIdSet.iterator();
  }

  public void addToMbmIdSet(long elem) {
    if (this.mbmIdSet == null) {
      this.mbmIdSet = new HashSet<Long>();
    }
    this.mbmIdSet.add(elem);
  }

  public Set<Long> getMbmIdSet() {
    return this.mbmIdSet;
  }

  public QueryMBMessageOption setMbmIdSet(Set<Long> mbmIdSet) {
    this.mbmIdSet = mbmIdSet;
    return this;
  }

  public void unsetMbmIdSet() {
    this.mbmIdSet = null;
  }

  /** Returns true if field mbmIdSet is set (has been assigned a value) and false otherwise */
  public boolean isSetMbmIdSet() {
    return this.mbmIdSet != null;
  }

  public void setMbmIdSetIsSet(boolean value) {
    if (!value) {
      this.mbmIdSet = null;
    }
  }

  public int getStatusListSize() {
    return (this.statusList == null) ? 0 : this.statusList.size();
  }

  public java.util.Iterator<xueqiao.mailbox.thriftdata.mb.MStatus> getStatusListIterator() {
    return (this.statusList == null) ? null : this.statusList.iterator();
  }

  public void addToStatusList(xueqiao.mailbox.thriftdata.mb.MStatus elem) {
    if (this.statusList == null) {
      this.statusList = new HashSet<xueqiao.mailbox.thriftdata.mb.MStatus>();
    }
    this.statusList.add(elem);
  }

  public Set<xueqiao.mailbox.thriftdata.mb.MStatus> getStatusList() {
    return this.statusList;
  }

  public QueryMBMessageOption setStatusList(Set<xueqiao.mailbox.thriftdata.mb.MStatus> statusList) {
    this.statusList = statusList;
    return this;
  }

  public void unsetStatusList() {
    this.statusList = null;
  }

  /** Returns true if field statusList is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusList() {
    return this.statusList != null;
  }

  public void setStatusListIsSet(boolean value) {
    if (!value) {
      this.statusList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MBM_ID_SET:
      if (value == null) {
        unsetMbmIdSet();
      } else {
        setMbmIdSet((Set<Long>)value);
      }
      break;

    case STATUS_LIST:
      if (value == null) {
        unsetStatusList();
      } else {
        setStatusList((Set<xueqiao.mailbox.thriftdata.mb.MStatus>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MBM_ID_SET:
      return getMbmIdSet();

    case STATUS_LIST:
      return getStatusList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MBM_ID_SET:
      return isSetMbmIdSet();
    case STATUS_LIST:
      return isSetStatusList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryMBMessageOption)
      return this.equals((QueryMBMessageOption)that);
    return false;
  }

  public boolean equals(QueryMBMessageOption that) {
    if (that == null)
      return false;

    boolean this_present_mbmIdSet = true && this.isSetMbmIdSet();
    boolean that_present_mbmIdSet = true && that.isSetMbmIdSet();
    if (this_present_mbmIdSet || that_present_mbmIdSet) {
      if (!(this_present_mbmIdSet && that_present_mbmIdSet))
        return false;
      if (!this.mbmIdSet.equals(that.mbmIdSet))
        return false;
    }

    boolean this_present_statusList = true && this.isSetStatusList();
    boolean that_present_statusList = true && that.isSetStatusList();
    if (this_present_statusList || that_present_statusList) {
      if (!(this_present_statusList && that_present_statusList))
        return false;
      if (!this.statusList.equals(that.statusList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryMBMessageOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMbmIdSet()).compareTo(other.isSetMbmIdSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMbmIdSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mbmIdSet, other.mbmIdSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusList()).compareTo(other.isSetStatusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusList, other.statusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryMBMessageOption(");
    boolean first = true;

    if (isSetMbmIdSet()) {
      sb.append("mbmIdSet:");
      if (this.mbmIdSet == null) {
        sb.append("null");
      } else {
        sb.append(this.mbmIdSet);
      }
      first = false;
    }
    if (isSetStatusList()) {
      if (!first) sb.append(", ");
      sb.append("statusList:");
      if (this.statusList == null) {
        sb.append("null");
      } else {
        sb.append(this.statusList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryMBMessageOptionStandardSchemeFactory implements SchemeFactory {
    public QueryMBMessageOptionStandardScheme getScheme() {
      return new QueryMBMessageOptionStandardScheme();
    }
  }

  private static class QueryMBMessageOptionStandardScheme extends StandardScheme<QueryMBMessageOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryMBMessageOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MBM_ID_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set32 = iprot.readSetBegin();
                struct.mbmIdSet = new HashSet<Long>(2*_set32.size);
                for (int _i33 = 0; _i33 < _set32.size; ++_i33)
                {
                  long _elem34;
                  _elem34 = iprot.readI64();
                  struct.mbmIdSet.add(_elem34);
                }
                iprot.readSetEnd();
              }
              struct.setMbmIdSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set35 = iprot.readSetBegin();
                struct.statusList = new HashSet<xueqiao.mailbox.thriftdata.mb.MStatus>(2*_set35.size);
                for (int _i36 = 0; _i36 < _set35.size; ++_i36)
                {
                  xueqiao.mailbox.thriftdata.mb.MStatus _elem37;
                  _elem37 = xueqiao.mailbox.thriftdata.mb.MStatus.findByValue(iprot.readI32());
                  struct.statusList.add(_elem37);
                }
                iprot.readSetEnd();
              }
              struct.setStatusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryMBMessageOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mbmIdSet != null) {
        if (struct.isSetMbmIdSet()) {
          oprot.writeFieldBegin(MBM_ID_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.mbmIdSet.size()));
            for (long _iter38 : struct.mbmIdSet)
            {
              oprot.writeI64(_iter38);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.statusList != null) {
        if (struct.isSetStatusList()) {
          oprot.writeFieldBegin(STATUS_LIST_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statusList.size()));
            for (xueqiao.mailbox.thriftdata.mb.MStatus _iter39 : struct.statusList)
            {
              oprot.writeI32(_iter39.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryMBMessageOptionTupleSchemeFactory implements SchemeFactory {
    public QueryMBMessageOptionTupleScheme getScheme() {
      return new QueryMBMessageOptionTupleScheme();
    }
  }

  private static class QueryMBMessageOptionTupleScheme extends TupleScheme<QueryMBMessageOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryMBMessageOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMbmIdSet()) {
        optionals.set(0);
      }
      if (struct.isSetStatusList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMbmIdSet()) {
        {
          oprot.writeI32(struct.mbmIdSet.size());
          for (long _iter40 : struct.mbmIdSet)
          {
            oprot.writeI64(_iter40);
          }
        }
      }
      if (struct.isSetStatusList()) {
        {
          oprot.writeI32(struct.statusList.size());
          for (xueqiao.mailbox.thriftdata.mb.MStatus _iter41 : struct.statusList)
          {
            oprot.writeI32(_iter41.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryMBMessageOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set42 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mbmIdSet = new HashSet<Long>(2*_set42.size);
          for (int _i43 = 0; _i43 < _set42.size; ++_i43)
          {
            long _elem44;
            _elem44 = iprot.readI64();
            struct.mbmIdSet.add(_elem44);
          }
        }
        struct.setMbmIdSetIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.statusList = new HashSet<xueqiao.mailbox.thriftdata.mb.MStatus>(2*_set45.size);
          for (int _i46 = 0; _i46 < _set45.size; ++_i46)
          {
            xueqiao.mailbox.thriftdata.mb.MStatus _elem47;
            _elem47 = xueqiao.mailbox.thriftdata.mb.MStatus.findByValue(iprot.readI32());
            struct.statusList.add(_elem47);
          }
        }
        struct.setStatusListIsSet(true);
      }
    }
  }

}

